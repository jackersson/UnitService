// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: services/facial_service.proto

#include "services/facial_service.pb.h"
#include "services/facial_service.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace Services {

static const char* BiometricFacialService_method_names[] = {
  "/Services.BiometricFacialService/Process",
  "/Services.BiometricFacialService/Update",
};

std::unique_ptr< BiometricFacialService::Stub> BiometricFacialService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< BiometricFacialService::Stub> stub(new BiometricFacialService::Stub(channel));
  return stub;
}

BiometricFacialService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Process_(BiometricFacialService_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Update_(BiometricFacialService_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status BiometricFacialService::Stub::Process(::grpc::ClientContext* context, const ::Services::BiometricRequest& request, ::Services::BiometricResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Process_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::Services::BiometricResponse>* BiometricFacialService::Stub::AsyncProcessRaw(::grpc::ClientContext* context, const ::Services::BiometricRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::Services::BiometricResponse>(channel_.get(), cq, rpcmethod_Process_, context, request);
}

::grpc::Status BiometricFacialService::Stub::Update(::grpc::ClientContext* context, const ::Services::BiometricUpdate& request, ::google::protobuf::Empty* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Update_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* BiometricFacialService::Stub::AsyncUpdateRaw(::grpc::ClientContext* context, const ::Services::BiometricUpdate& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>(channel_.get(), cq, rpcmethod_Update_, context, request);
}

BiometricFacialService::Service::Service() {
  (void)BiometricFacialService_method_names;
  AddMethod(new ::grpc::RpcServiceMethod(
      BiometricFacialService_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< BiometricFacialService::Service, ::Services::BiometricRequest, ::Services::BiometricResponse>(
          std::mem_fn(&BiometricFacialService::Service::Process), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      BiometricFacialService_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< BiometricFacialService::Service, ::Services::BiometricUpdate, ::google::protobuf::Empty>(
          std::mem_fn(&BiometricFacialService::Service::Update), this)));
}

BiometricFacialService::Service::~Service() {
}

::grpc::Status BiometricFacialService::Service::Process(::grpc::ServerContext* context, const ::Services::BiometricRequest* request, ::Services::BiometricResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BiometricFacialService::Service::Update(::grpc::ServerContext* context, const ::Services::BiometricUpdate* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace Services

