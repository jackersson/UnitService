// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datatypes/group.proto

#ifndef PROTOBUF_datatypes_2fgroup_2eproto__INCLUDED
#define PROTOBUF_datatypes_2fgroup_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "datatypes/visit_record.pb.h"
#include "datatypes/key.pb.h"
// @@protoc_insertion_point(includes)

namespace DataTypes {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_datatypes_2fgroup_2eproto();
void protobuf_AssignDesc_datatypes_2fgroup_2eproto();
void protobuf_ShutdownFile_datatypes_2fgroup_2eproto();

class Group;
class Groups;

// ===================================================================

class Group : public ::google::protobuf::Message {
 public:
  Group();
  virtual ~Group();

  Group(const Group& from);

  inline Group& operator=(const Group& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Group& default_instance();

  void Swap(Group* other);

  // implements Message ----------------------------------------------

  inline Group* New() const { return New(NULL); }

  Group* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Group& from);
  void MergeFrom(const Group& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Group* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .DataTypes.Key id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::DataTypes::Key& id() const;
  ::DataTypes::Key* mutable_id();
  ::DataTypes::Key* release_id();
  void set_allocated_id(::DataTypes::Key* id);

  // optional string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string description = 3;
  void clear_description();
  static const int kDescriptionFieldNumber = 3;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // optional .DataTypes.AccessState access = 4;
  void clear_access();
  static const int kAccessFieldNumber = 4;
  ::DataTypes::AccessState access() const;
  void set_access(::DataTypes::AccessState value);

  // repeated .DataTypes.Key persons = 5;
  int persons_size() const;
  void clear_persons();
  static const int kPersonsFieldNumber = 5;
  const ::DataTypes::Key& persons(int index) const;
  ::DataTypes::Key* mutable_persons(int index);
  ::DataTypes::Key* add_persons();
  ::google::protobuf::RepeatedPtrField< ::DataTypes::Key >*
      mutable_persons();
  const ::google::protobuf::RepeatedPtrField< ::DataTypes::Key >&
      persons() const;

  // repeated .DataTypes.Key locations = 6;
  int locations_size() const;
  void clear_locations();
  static const int kLocationsFieldNumber = 6;
  const ::DataTypes::Key& locations(int index) const;
  ::DataTypes::Key* mutable_locations(int index);
  ::DataTypes::Key* add_locations();
  ::google::protobuf::RepeatedPtrField< ::DataTypes::Key >*
      mutable_locations();
  const ::google::protobuf::RepeatedPtrField< ::DataTypes::Key >&
      locations() const;

  // @@protoc_insertion_point(class_scope:DataTypes.Group)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::DataTypes::Key* id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::RepeatedPtrField< ::DataTypes::Key > persons_;
  ::google::protobuf::RepeatedPtrField< ::DataTypes::Key > locations_;
  int access_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_datatypes_2fgroup_2eproto();
  friend void protobuf_AssignDesc_datatypes_2fgroup_2eproto();
  friend void protobuf_ShutdownFile_datatypes_2fgroup_2eproto();

  void InitAsDefaultInstance();
  static Group* default_instance_;
};
// -------------------------------------------------------------------

class Groups : public ::google::protobuf::Message {
 public:
  Groups();
  virtual ~Groups();

  Groups(const Groups& from);

  inline Groups& operator=(const Groups& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Groups& default_instance();

  void Swap(Groups* other);

  // implements Message ----------------------------------------------

  inline Groups* New() const { return New(NULL); }

  Groups* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Groups& from);
  void MergeFrom(const Groups& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Groups* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .DataTypes.Group items = 1;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 1;
  const ::DataTypes::Group& items(int index) const;
  ::DataTypes::Group* mutable_items(int index);
  ::DataTypes::Group* add_items();
  ::google::protobuf::RepeatedPtrField< ::DataTypes::Group >*
      mutable_items();
  const ::google::protobuf::RepeatedPtrField< ::DataTypes::Group >&
      items() const;

  // optional int64 count = 2;
  void clear_count();
  static const int kCountFieldNumber = 2;
  ::google::protobuf::int64 count() const;
  void set_count(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:DataTypes.Groups)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::DataTypes::Group > items_;
  ::google::protobuf::int64 count_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_datatypes_2fgroup_2eproto();
  friend void protobuf_AssignDesc_datatypes_2fgroup_2eproto();
  friend void protobuf_ShutdownFile_datatypes_2fgroup_2eproto();

  void InitAsDefaultInstance();
  static Groups* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Group

// optional .DataTypes.Key id = 1;
inline bool Group::has_id() const {
  return !_is_default_instance_ && id_ != NULL;
}
inline void Group::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) delete id_;
  id_ = NULL;
}
inline const ::DataTypes::Key& Group::id() const {
  // @@protoc_insertion_point(field_get:DataTypes.Group.id)
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
inline ::DataTypes::Key* Group::mutable_id() {
  
  if (id_ == NULL) {
    id_ = new ::DataTypes::Key;
  }
  // @@protoc_insertion_point(field_mutable:DataTypes.Group.id)
  return id_;
}
inline ::DataTypes::Key* Group::release_id() {
  // @@protoc_insertion_point(field_release:DataTypes.Group.id)
  
  ::DataTypes::Key* temp = id_;
  id_ = NULL;
  return temp;
}
inline void Group::set_allocated_id(::DataTypes::Key* id) {
  delete id_;
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:DataTypes.Group.id)
}

// optional string name = 2;
inline void Group::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Group::name() const {
  // @@protoc_insertion_point(field_get:DataTypes.Group.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Group::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DataTypes.Group.name)
}
inline void Group::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DataTypes.Group.name)
}
inline void Group::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DataTypes.Group.name)
}
inline ::std::string* Group::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:DataTypes.Group.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Group::release_name() {
  // @@protoc_insertion_point(field_release:DataTypes.Group.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Group::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:DataTypes.Group.name)
}

// optional string description = 3;
inline void Group::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Group::description() const {
  // @@protoc_insertion_point(field_get:DataTypes.Group.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Group::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DataTypes.Group.description)
}
inline void Group::set_description(const char* value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DataTypes.Group.description)
}
inline void Group::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DataTypes.Group.description)
}
inline ::std::string* Group::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:DataTypes.Group.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Group::release_description() {
  // @@protoc_insertion_point(field_release:DataTypes.Group.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Group::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:DataTypes.Group.description)
}

// optional .DataTypes.AccessState access = 4;
inline void Group::clear_access() {
  access_ = 0;
}
inline ::DataTypes::AccessState Group::access() const {
  // @@protoc_insertion_point(field_get:DataTypes.Group.access)
  return static_cast< ::DataTypes::AccessState >(access_);
}
inline void Group::set_access(::DataTypes::AccessState value) {
  
  access_ = value;
  // @@protoc_insertion_point(field_set:DataTypes.Group.access)
}

// repeated .DataTypes.Key persons = 5;
inline int Group::persons_size() const {
  return persons_.size();
}
inline void Group::clear_persons() {
  persons_.Clear();
}
inline const ::DataTypes::Key& Group::persons(int index) const {
  // @@protoc_insertion_point(field_get:DataTypes.Group.persons)
  return persons_.Get(index);
}
inline ::DataTypes::Key* Group::mutable_persons(int index) {
  // @@protoc_insertion_point(field_mutable:DataTypes.Group.persons)
  return persons_.Mutable(index);
}
inline ::DataTypes::Key* Group::add_persons() {
  // @@protoc_insertion_point(field_add:DataTypes.Group.persons)
  return persons_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::DataTypes::Key >*
Group::mutable_persons() {
  // @@protoc_insertion_point(field_mutable_list:DataTypes.Group.persons)
  return &persons_;
}
inline const ::google::protobuf::RepeatedPtrField< ::DataTypes::Key >&
Group::persons() const {
  // @@protoc_insertion_point(field_list:DataTypes.Group.persons)
  return persons_;
}

// repeated .DataTypes.Key locations = 6;
inline int Group::locations_size() const {
  return locations_.size();
}
inline void Group::clear_locations() {
  locations_.Clear();
}
inline const ::DataTypes::Key& Group::locations(int index) const {
  // @@protoc_insertion_point(field_get:DataTypes.Group.locations)
  return locations_.Get(index);
}
inline ::DataTypes::Key* Group::mutable_locations(int index) {
  // @@protoc_insertion_point(field_mutable:DataTypes.Group.locations)
  return locations_.Mutable(index);
}
inline ::DataTypes::Key* Group::add_locations() {
  // @@protoc_insertion_point(field_add:DataTypes.Group.locations)
  return locations_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::DataTypes::Key >*
Group::mutable_locations() {
  // @@protoc_insertion_point(field_mutable_list:DataTypes.Group.locations)
  return &locations_;
}
inline const ::google::protobuf::RepeatedPtrField< ::DataTypes::Key >&
Group::locations() const {
  // @@protoc_insertion_point(field_list:DataTypes.Group.locations)
  return locations_;
}

// -------------------------------------------------------------------

// Groups

// repeated .DataTypes.Group items = 1;
inline int Groups::items_size() const {
  return items_.size();
}
inline void Groups::clear_items() {
  items_.Clear();
}
inline const ::DataTypes::Group& Groups::items(int index) const {
  // @@protoc_insertion_point(field_get:DataTypes.Groups.items)
  return items_.Get(index);
}
inline ::DataTypes::Group* Groups::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:DataTypes.Groups.items)
  return items_.Mutable(index);
}
inline ::DataTypes::Group* Groups::add_items() {
  // @@protoc_insertion_point(field_add:DataTypes.Groups.items)
  return items_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::DataTypes::Group >*
Groups::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:DataTypes.Groups.items)
  return &items_;
}
inline const ::google::protobuf::RepeatedPtrField< ::DataTypes::Group >&
Groups::items() const {
  // @@protoc_insertion_point(field_list:DataTypes.Groups.items)
  return items_;
}

// optional int64 count = 2;
inline void Groups::clear_count() {
  count_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Groups::count() const {
  // @@protoc_insertion_point(field_get:DataTypes.Groups.count)
  return count_;
}
inline void Groups::set_count(::google::protobuf::int64 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:DataTypes.Groups.count)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace DataTypes

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_datatypes_2fgroup_2eproto__INCLUDED
