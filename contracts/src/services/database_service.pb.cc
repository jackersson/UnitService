// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: services/database_service.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "services/database_service.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Services {

namespace {

const ::google::protobuf::Descriptor* GetResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetRequest_reflection_ = NULL;
struct GetRequestOneofInstance {
  const ::DataTypes::GetPersonRequest* person_request_;
  const ::DataTypes::GetCardRequest* card_request_;
  const ::DataTypes::GetLocationRequest* location_request_;
  const ::DataTypes::GetVisitRecordRequest* visit_record_request_;
}* GetRequest_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* CommitRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommitRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommitResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommitResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MutationResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MutationResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* Mutation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mutation_reflection_ = NULL;
struct MutationOneofInstance {
  const ::Services::Entity* insert_;
  const ::Services::Entity* update_;
  const ::Services::Entity* delete__;
}* Mutation_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* Entity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Entity_reflection_ = NULL;
struct EntityOneofInstance {
  const ::DataTypes::Card* card_;
  const ::DataTypes::Person* person_;
  const ::DataTypes::VisitRecord* visit_record_;
  const ::DataTypes::Location* location_;
  const ::DataTypes::Photo* photo_;
}* Entity_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* Entities_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Entities_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_services_2fdatabase_5fservice_2eproto() {
  protobuf_AddDesc_services_2fdatabase_5fservice_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "services/database_service.proto");
  GOOGLE_CHECK(file != NULL);
  GetResponse_descriptor_ = file->message_type(0);
  static const int GetResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetResponse, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetResponse, count_),
  };
  GetResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetResponse_descriptor_,
      GetResponse::default_instance_,
      GetResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetResponse, _is_default_instance_));
  GetRequest_descriptor_ = file->message_type(1);
  static const int GetRequest_offsets_[5] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(GetRequest_default_oneof_instance_, person_request_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(GetRequest_default_oneof_instance_, card_request_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(GetRequest_default_oneof_instance_, location_request_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(GetRequest_default_oneof_instance_, visit_record_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRequest, request_type_),
  };
  GetRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetRequest_descriptor_,
      GetRequest::default_instance_,
      GetRequest_offsets_,
      -1,
      -1,
      -1,
      GetRequest_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRequest, _oneof_case_[0]),
      sizeof(GetRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRequest, _is_default_instance_));
  CommitRequest_descriptor_ = file->message_type(2);
  static const int CommitRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitRequest, mutations_),
  };
  CommitRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CommitRequest_descriptor_,
      CommitRequest::default_instance_,
      CommitRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(CommitRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitRequest, _is_default_instance_));
  CommitResponse_descriptor_ = file->message_type(3);
  static const int CommitResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitResponse, mutation_results_),
  };
  CommitResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CommitResponse_descriptor_,
      CommitResponse::default_instance_,
      CommitResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(CommitResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitResponse, _is_default_instance_));
  MutationResult_descriptor_ = file->message_type(4);
  static const int MutationResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutationResult, entity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutationResult, error_),
  };
  MutationResult_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MutationResult_descriptor_,
      MutationResult::default_instance_,
      MutationResult_offsets_,
      -1,
      -1,
      -1,
      sizeof(MutationResult),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutationResult, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutationResult, _is_default_instance_));
  Mutation_descriptor_ = file->message_type(5);
  static const int Mutation_offsets_[4] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Mutation_default_oneof_instance_, insert_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Mutation_default_oneof_instance_, update_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Mutation_default_oneof_instance_, delete__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mutation, operation_),
  };
  Mutation_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Mutation_descriptor_,
      Mutation::default_instance_,
      Mutation_offsets_,
      -1,
      -1,
      -1,
      Mutation_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mutation, _oneof_case_[0]),
      sizeof(Mutation),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mutation, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mutation, _is_default_instance_));
  Entity_descriptor_ = file->message_type(6);
  static const int Entity_offsets_[6] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Entity_default_oneof_instance_, card_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Entity_default_oneof_instance_, person_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Entity_default_oneof_instance_, visit_record_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Entity_default_oneof_instance_, location_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Entity_default_oneof_instance_, photo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, value_type_),
  };
  Entity_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Entity_descriptor_,
      Entity::default_instance_,
      Entity_offsets_,
      -1,
      -1,
      -1,
      Entity_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, _oneof_case_[0]),
      sizeof(Entity),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, _is_default_instance_));
  Entities_descriptor_ = file->message_type(7);
  static const int Entities_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entities, items_),
  };
  Entities_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Entities_descriptor_,
      Entities::default_instance_,
      Entities_offsets_,
      -1,
      -1,
      -1,
      sizeof(Entities),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entities, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entities, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_services_2fdatabase_5fservice_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetResponse_descriptor_, &GetResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetRequest_descriptor_, &GetRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CommitRequest_descriptor_, &CommitRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CommitResponse_descriptor_, &CommitResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MutationResult_descriptor_, &MutationResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Mutation_descriptor_, &Mutation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Entity_descriptor_, &Entity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Entities_descriptor_, &Entities::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_services_2fdatabase_5fservice_2eproto() {
  delete GetResponse::default_instance_;
  delete GetResponse_reflection_;
  delete GetRequest::default_instance_;
  delete GetRequest_default_oneof_instance_;
  delete GetRequest_reflection_;
  delete CommitRequest::default_instance_;
  delete CommitRequest_reflection_;
  delete CommitResponse::default_instance_;
  delete CommitResponse_reflection_;
  delete MutationResult::default_instance_;
  delete MutationResult_reflection_;
  delete Mutation::default_instance_;
  delete Mutation_default_oneof_instance_;
  delete Mutation_reflection_;
  delete Entity::default_instance_;
  delete Entity_default_oneof_instance_;
  delete Entity_reflection_;
  delete Entities::default_instance_;
  delete Entities_reflection_;
}

void protobuf_AddDesc_services_2fdatabase_5fservice_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DataTypes::protobuf_AddDesc_datatypes_2fperson_2eproto();
  ::DataTypes::protobuf_AddDesc_datatypes_2fcard_2eproto();
  ::DataTypes::protobuf_AddDesc_datatypes_2fphoto_2eproto();
  ::DataTypes::protobuf_AddDesc_datatypes_2flocation_2eproto();
  ::DataTypes::protobuf_AddDesc_datatypes_2fvisit_5frecord_2eproto();
  ::DataTypes::protobuf_AddDesc_datatypes_2fdata_2eproto();
  ::DataTypes::protobuf_AddDesc_datatypes_2fqueries_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\037services/database_service.proto\022\010Servi"
    "ces\032\026datatypes/person.proto\032\024datatypes/c"
    "ard.proto\032\025datatypes/photo.proto\032\030dataty"
    "pes/location.proto\032\034datatypes/visit_reco"
    "rd.proto\032\024datatypes/data.proto\032\027datatype"
    "s/queries.proto\"\?\n\013GetResponse\022!\n\005items\030"
    "\001 \001(\0132\022.Services.Entities\022\r\n\005count\030\002 \001(\003"
    "\"\203\002\n\nGetRequest\0225\n\016person_request\030\001 \001(\0132"
    "\033.DataTypes.GetPersonRequestH\000\0221\n\014card_r"
    "equest\030\002 \001(\0132\031.DataTypes.GetCardRequestH"
    "\000\0229\n\020location_request\030\003 \001(\0132\035.DataTypes."
    "GetLocationRequestH\000\022@\n\024visit_record_req"
    "uest\030\004 \001(\0132 .DataTypes.GetVisitRecordReq"
    "uestH\000B\016\n\014request_type\"6\n\rCommitRequest\022"
    "%\n\tmutations\030\001 \003(\0132\022.Services.Mutation\"D"
    "\n\016CommitResponse\0222\n\020mutation_results\030\001 \003"
    "(\0132\030.Services.MutationResult\"A\n\016Mutation"
    "Result\022 \n\006entity\030\001 \001(\0132\020.Services.Entity"
    "\022\r\n\005error\030\002 \001(\t\"\203\001\n\010Mutation\022\"\n\006insert\030\001"
    " \001(\0132\020.Services.EntityH\000\022\"\n\006update\030\002 \001(\013"
    "2\020.Services.EntityH\000\022\"\n\006delete\030\003 \001(\0132\020.S"
    "ervices.EntityH\000B\013\n\toperation\"\330\001\n\006Entity"
    "\022\037\n\004card\030\001 \001(\0132\017.DataTypes.CardH\000\022#\n\006per"
    "son\030\002 \001(\0132\021.DataTypes.PersonH\000\022.\n\014visit_"
    "record\030\003 \001(\0132\026.DataTypes.VisitRecordH\000\022\'"
    "\n\010location\030\004 \001(\0132\023.DataTypes.LocationH\000\022"
    "!\n\005Photo\030\005 \001(\0132\020.DataTypes.PhotoH\000B\014\n\nva"
    "lue_type\"+\n\010Entities\022\037\n\005items\030\001 \003(\0132\020.Se"
    "rvices.Entity2\212\001\n\017DatabaseService\0229\n\003Get"
    "\022\027.DataTypes.MessageBytes\032\027.DataTypes.Me"
    "ssageBytes\"\000\022<\n\006Commit\022\027.DataTypes.Messa"
    "geBytes\032\027.DataTypes.MessageBytes\"\000BS\n\007ex"
    ".grpcZBgithub.com/Enebra/ServiceCoordina"
    "tor/grpc/services/databaseservice\242\002\003RTGb"
    "\006proto3", 1367);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "services/database_service.proto", &protobuf_RegisterTypes);
  GetResponse::default_instance_ = new GetResponse();
  GetRequest::default_instance_ = new GetRequest();
  GetRequest_default_oneof_instance_ = new GetRequestOneofInstance();
  CommitRequest::default_instance_ = new CommitRequest();
  CommitResponse::default_instance_ = new CommitResponse();
  MutationResult::default_instance_ = new MutationResult();
  Mutation::default_instance_ = new Mutation();
  Mutation_default_oneof_instance_ = new MutationOneofInstance();
  Entity::default_instance_ = new Entity();
  Entity_default_oneof_instance_ = new EntityOneofInstance();
  Entities::default_instance_ = new Entities();
  GetResponse::default_instance_->InitAsDefaultInstance();
  GetRequest::default_instance_->InitAsDefaultInstance();
  CommitRequest::default_instance_->InitAsDefaultInstance();
  CommitResponse::default_instance_->InitAsDefaultInstance();
  MutationResult::default_instance_->InitAsDefaultInstance();
  Mutation::default_instance_->InitAsDefaultInstance();
  Entity::default_instance_->InitAsDefaultInstance();
  Entities::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_services_2fdatabase_5fservice_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_services_2fdatabase_5fservice_2eproto {
  StaticDescriptorInitializer_services_2fdatabase_5fservice_2eproto() {
    protobuf_AddDesc_services_2fdatabase_5fservice_2eproto();
  }
} static_descriptor_initializer_services_2fdatabase_5fservice_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetResponse::kItemsFieldNumber;
const int GetResponse::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetResponse::GetResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Services.GetResponse)
}

void GetResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  items_ = const_cast< ::Services::Entities*>(&::Services::Entities::default_instance());
}

GetResponse::GetResponse(const GetResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Services.GetResponse)
}

void GetResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  items_ = NULL;
  count_ = GOOGLE_LONGLONG(0);
}

GetResponse::~GetResponse() {
  // @@protoc_insertion_point(destructor:Services.GetResponse)
  SharedDtor();
}

void GetResponse::SharedDtor() {
  if (this != default_instance_) {
    delete items_;
  }
}

void GetResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetResponse_descriptor_;
}

const GetResponse& GetResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_services_2fdatabase_5fservice_2eproto();
  return *default_instance_;
}

GetResponse* GetResponse::default_instance_ = NULL;

GetResponse* GetResponse::New(::google::protobuf::Arena* arena) const {
  GetResponse* n = new GetResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Services.GetResponse)
  if (GetArenaNoVirtual() == NULL && items_ != NULL) delete items_;
  items_ = NULL;
  count_ = GOOGLE_LONGLONG(0);
}

bool GetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Services.GetResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Services.Entities items = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional int64 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &count_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Services.GetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Services.GetResponse)
  return false;
#undef DO_
}

void GetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Services.GetResponse)
  // optional .Services.Entities items = 1;
  if (this->has_items()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->items_, output);
  }

  // optional int64 count = 2;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->count(), output);
  }

  // @@protoc_insertion_point(serialize_end:Services.GetResponse)
}

::google::protobuf::uint8* GetResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Services.GetResponse)
  // optional .Services.Entities items = 1;
  if (this->has_items()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->items_, target);
  }

  // optional int64 count = 2;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->count(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Services.GetResponse)
  return target;
}

int GetResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Services.GetResponse)
  int total_size = 0;

  // optional .Services.Entities items = 1;
  if (this->has_items()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->items_);
  }

  // optional int64 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->count());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Services.GetResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GetResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Services.GetResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Services.GetResponse)
    MergeFrom(*source);
  }
}

void GetResponse::MergeFrom(const GetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Services.GetResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_items()) {
    mutable_items()->::Services::Entities::MergeFrom(from.items());
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void GetResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Services.GetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetResponse::CopyFrom(const GetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Services.GetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetResponse::IsInitialized() const {

  return true;
}

void GetResponse::Swap(GetResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetResponse::InternalSwap(GetResponse* other) {
  std::swap(items_, other->items_);
  std::swap(count_, other->count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetResponse_descriptor_;
  metadata.reflection = GetResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetResponse

// optional .Services.Entities items = 1;
bool GetResponse::has_items() const {
  return !_is_default_instance_ && items_ != NULL;
}
void GetResponse::clear_items() {
  if (GetArenaNoVirtual() == NULL && items_ != NULL) delete items_;
  items_ = NULL;
}
const ::Services::Entities& GetResponse::items() const {
  // @@protoc_insertion_point(field_get:Services.GetResponse.items)
  return items_ != NULL ? *items_ : *default_instance_->items_;
}
::Services::Entities* GetResponse::mutable_items() {
  
  if (items_ == NULL) {
    items_ = new ::Services::Entities;
  }
  // @@protoc_insertion_point(field_mutable:Services.GetResponse.items)
  return items_;
}
::Services::Entities* GetResponse::release_items() {
  // @@protoc_insertion_point(field_release:Services.GetResponse.items)
  
  ::Services::Entities* temp = items_;
  items_ = NULL;
  return temp;
}
void GetResponse::set_allocated_items(::Services::Entities* items) {
  delete items_;
  items_ = items;
  if (items) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Services.GetResponse.items)
}

// optional int64 count = 2;
void GetResponse::clear_count() {
  count_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 GetResponse::count() const {
  // @@protoc_insertion_point(field_get:Services.GetResponse.count)
  return count_;
}
 void GetResponse::set_count(::google::protobuf::int64 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:Services.GetResponse.count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetRequest::kPersonRequestFieldNumber;
const int GetRequest::kCardRequestFieldNumber;
const int GetRequest::kLocationRequestFieldNumber;
const int GetRequest::kVisitRecordRequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetRequest::GetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Services.GetRequest)
}

void GetRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  GetRequest_default_oneof_instance_->person_request_ = const_cast< ::DataTypes::GetPersonRequest*>(&::DataTypes::GetPersonRequest::default_instance());
  GetRequest_default_oneof_instance_->card_request_ = const_cast< ::DataTypes::GetCardRequest*>(&::DataTypes::GetCardRequest::default_instance());
  GetRequest_default_oneof_instance_->location_request_ = const_cast< ::DataTypes::GetLocationRequest*>(&::DataTypes::GetLocationRequest::default_instance());
  GetRequest_default_oneof_instance_->visit_record_request_ = const_cast< ::DataTypes::GetVisitRecordRequest*>(&::DataTypes::GetVisitRecordRequest::default_instance());
}

GetRequest::GetRequest(const GetRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Services.GetRequest)
}

void GetRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  clear_has_request_type();
}

GetRequest::~GetRequest() {
  // @@protoc_insertion_point(destructor:Services.GetRequest)
  SharedDtor();
}

void GetRequest::SharedDtor() {
  if (has_request_type()) {
    clear_request_type();
  }
  if (this != default_instance_) {
  }
}

void GetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetRequest_descriptor_;
}

const GetRequest& GetRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_services_2fdatabase_5fservice_2eproto();
  return *default_instance_;
}

GetRequest* GetRequest::default_instance_ = NULL;

GetRequest* GetRequest::New(::google::protobuf::Arena* arena) const {
  GetRequest* n = new GetRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetRequest::clear_request_type() {
// @@protoc_insertion_point(one_of_clear_start:Services.GetRequest)
  switch(request_type_case()) {
    case kPersonRequest: {
      delete request_type_.person_request_;
      break;
    }
    case kCardRequest: {
      delete request_type_.card_request_;
      break;
    }
    case kLocationRequest: {
      delete request_type_.location_request_;
      break;
    }
    case kVisitRecordRequest: {
      delete request_type_.visit_record_request_;
      break;
    }
    case REQUEST_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REQUEST_TYPE_NOT_SET;
}


void GetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Services.GetRequest)
  clear_request_type();
}

bool GetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Services.GetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DataTypes.GetPersonRequest person_request = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_person_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_card_request;
        break;
      }

      // optional .DataTypes.GetCardRequest card_request = 2;
      case 2: {
        if (tag == 18) {
         parse_card_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_card_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_location_request;
        break;
      }

      // optional .DataTypes.GetLocationRequest location_request = 3;
      case 3: {
        if (tag == 26) {
         parse_location_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_visit_record_request;
        break;
      }

      // optional .DataTypes.GetVisitRecordRequest visit_record_request = 4;
      case 4: {
        if (tag == 34) {
         parse_visit_record_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_visit_record_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Services.GetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Services.GetRequest)
  return false;
#undef DO_
}

void GetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Services.GetRequest)
  // optional .DataTypes.GetPersonRequest person_request = 1;
  if (has_person_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *request_type_.person_request_, output);
  }

  // optional .DataTypes.GetCardRequest card_request = 2;
  if (has_card_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *request_type_.card_request_, output);
  }

  // optional .DataTypes.GetLocationRequest location_request = 3;
  if (has_location_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *request_type_.location_request_, output);
  }

  // optional .DataTypes.GetVisitRecordRequest visit_record_request = 4;
  if (has_visit_record_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *request_type_.visit_record_request_, output);
  }

  // @@protoc_insertion_point(serialize_end:Services.GetRequest)
}

::google::protobuf::uint8* GetRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Services.GetRequest)
  // optional .DataTypes.GetPersonRequest person_request = 1;
  if (has_person_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *request_type_.person_request_, target);
  }

  // optional .DataTypes.GetCardRequest card_request = 2;
  if (has_card_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *request_type_.card_request_, target);
  }

  // optional .DataTypes.GetLocationRequest location_request = 3;
  if (has_location_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *request_type_.location_request_, target);
  }

  // optional .DataTypes.GetVisitRecordRequest visit_record_request = 4;
  if (has_visit_record_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *request_type_.visit_record_request_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Services.GetRequest)
  return target;
}

int GetRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Services.GetRequest)
  int total_size = 0;

  switch (request_type_case()) {
    // optional .DataTypes.GetPersonRequest person_request = 1;
    case kPersonRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *request_type_.person_request_);
      break;
    }
    // optional .DataTypes.GetCardRequest card_request = 2;
    case kCardRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *request_type_.card_request_);
      break;
    }
    // optional .DataTypes.GetLocationRequest location_request = 3;
    case kLocationRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *request_type_.location_request_);
      break;
    }
    // optional .DataTypes.GetVisitRecordRequest visit_record_request = 4;
    case kVisitRecordRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *request_type_.visit_record_request_);
      break;
    }
    case REQUEST_TYPE_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Services.GetRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GetRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Services.GetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Services.GetRequest)
    MergeFrom(*source);
  }
}

void GetRequest::MergeFrom(const GetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Services.GetRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  switch (from.request_type_case()) {
    case kPersonRequest: {
      mutable_person_request()->::DataTypes::GetPersonRequest::MergeFrom(from.person_request());
      break;
    }
    case kCardRequest: {
      mutable_card_request()->::DataTypes::GetCardRequest::MergeFrom(from.card_request());
      break;
    }
    case kLocationRequest: {
      mutable_location_request()->::DataTypes::GetLocationRequest::MergeFrom(from.location_request());
      break;
    }
    case kVisitRecordRequest: {
      mutable_visit_record_request()->::DataTypes::GetVisitRecordRequest::MergeFrom(from.visit_record_request());
      break;
    }
    case REQUEST_TYPE_NOT_SET: {
      break;
    }
  }
}

void GetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Services.GetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRequest::CopyFrom(const GetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Services.GetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRequest::IsInitialized() const {

  return true;
}

void GetRequest::Swap(GetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRequest::InternalSwap(GetRequest* other) {
  std::swap(request_type_, other->request_type_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetRequest_descriptor_;
  metadata.reflection = GetRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetRequest

// optional .DataTypes.GetPersonRequest person_request = 1;
bool GetRequest::has_person_request() const {
  return request_type_case() == kPersonRequest;
}
void GetRequest::set_has_person_request() {
  _oneof_case_[0] = kPersonRequest;
}
void GetRequest::clear_person_request() {
  if (has_person_request()) {
    delete request_type_.person_request_;
    clear_has_request_type();
  }
}
 const ::DataTypes::GetPersonRequest& GetRequest::person_request() const {
  // @@protoc_insertion_point(field_get:Services.GetRequest.person_request)
  return has_person_request()
      ? *request_type_.person_request_
      : ::DataTypes::GetPersonRequest::default_instance();
}
::DataTypes::GetPersonRequest* GetRequest::mutable_person_request() {
  if (!has_person_request()) {
    clear_request_type();
    set_has_person_request();
    request_type_.person_request_ = new ::DataTypes::GetPersonRequest;
  }
  // @@protoc_insertion_point(field_mutable:Services.GetRequest.person_request)
  return request_type_.person_request_;
}
::DataTypes::GetPersonRequest* GetRequest::release_person_request() {
  // @@protoc_insertion_point(field_release:Services.GetRequest.person_request)
  if (has_person_request()) {
    clear_has_request_type();
    ::DataTypes::GetPersonRequest* temp = request_type_.person_request_;
    request_type_.person_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GetRequest::set_allocated_person_request(::DataTypes::GetPersonRequest* person_request) {
  clear_request_type();
  if (person_request) {
    set_has_person_request();
    request_type_.person_request_ = person_request;
  }
  // @@protoc_insertion_point(field_set_allocated:Services.GetRequest.person_request)
}

// optional .DataTypes.GetCardRequest card_request = 2;
bool GetRequest::has_card_request() const {
  return request_type_case() == kCardRequest;
}
void GetRequest::set_has_card_request() {
  _oneof_case_[0] = kCardRequest;
}
void GetRequest::clear_card_request() {
  if (has_card_request()) {
    delete request_type_.card_request_;
    clear_has_request_type();
  }
}
 const ::DataTypes::GetCardRequest& GetRequest::card_request() const {
  // @@protoc_insertion_point(field_get:Services.GetRequest.card_request)
  return has_card_request()
      ? *request_type_.card_request_
      : ::DataTypes::GetCardRequest::default_instance();
}
::DataTypes::GetCardRequest* GetRequest::mutable_card_request() {
  if (!has_card_request()) {
    clear_request_type();
    set_has_card_request();
    request_type_.card_request_ = new ::DataTypes::GetCardRequest;
  }
  // @@protoc_insertion_point(field_mutable:Services.GetRequest.card_request)
  return request_type_.card_request_;
}
::DataTypes::GetCardRequest* GetRequest::release_card_request() {
  // @@protoc_insertion_point(field_release:Services.GetRequest.card_request)
  if (has_card_request()) {
    clear_has_request_type();
    ::DataTypes::GetCardRequest* temp = request_type_.card_request_;
    request_type_.card_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GetRequest::set_allocated_card_request(::DataTypes::GetCardRequest* card_request) {
  clear_request_type();
  if (card_request) {
    set_has_card_request();
    request_type_.card_request_ = card_request;
  }
  // @@protoc_insertion_point(field_set_allocated:Services.GetRequest.card_request)
}

// optional .DataTypes.GetLocationRequest location_request = 3;
bool GetRequest::has_location_request() const {
  return request_type_case() == kLocationRequest;
}
void GetRequest::set_has_location_request() {
  _oneof_case_[0] = kLocationRequest;
}
void GetRequest::clear_location_request() {
  if (has_location_request()) {
    delete request_type_.location_request_;
    clear_has_request_type();
  }
}
 const ::DataTypes::GetLocationRequest& GetRequest::location_request() const {
  // @@protoc_insertion_point(field_get:Services.GetRequest.location_request)
  return has_location_request()
      ? *request_type_.location_request_
      : ::DataTypes::GetLocationRequest::default_instance();
}
::DataTypes::GetLocationRequest* GetRequest::mutable_location_request() {
  if (!has_location_request()) {
    clear_request_type();
    set_has_location_request();
    request_type_.location_request_ = new ::DataTypes::GetLocationRequest;
  }
  // @@protoc_insertion_point(field_mutable:Services.GetRequest.location_request)
  return request_type_.location_request_;
}
::DataTypes::GetLocationRequest* GetRequest::release_location_request() {
  // @@protoc_insertion_point(field_release:Services.GetRequest.location_request)
  if (has_location_request()) {
    clear_has_request_type();
    ::DataTypes::GetLocationRequest* temp = request_type_.location_request_;
    request_type_.location_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GetRequest::set_allocated_location_request(::DataTypes::GetLocationRequest* location_request) {
  clear_request_type();
  if (location_request) {
    set_has_location_request();
    request_type_.location_request_ = location_request;
  }
  // @@protoc_insertion_point(field_set_allocated:Services.GetRequest.location_request)
}

// optional .DataTypes.GetVisitRecordRequest visit_record_request = 4;
bool GetRequest::has_visit_record_request() const {
  return request_type_case() == kVisitRecordRequest;
}
void GetRequest::set_has_visit_record_request() {
  _oneof_case_[0] = kVisitRecordRequest;
}
void GetRequest::clear_visit_record_request() {
  if (has_visit_record_request()) {
    delete request_type_.visit_record_request_;
    clear_has_request_type();
  }
}
 const ::DataTypes::GetVisitRecordRequest& GetRequest::visit_record_request() const {
  // @@protoc_insertion_point(field_get:Services.GetRequest.visit_record_request)
  return has_visit_record_request()
      ? *request_type_.visit_record_request_
      : ::DataTypes::GetVisitRecordRequest::default_instance();
}
::DataTypes::GetVisitRecordRequest* GetRequest::mutable_visit_record_request() {
  if (!has_visit_record_request()) {
    clear_request_type();
    set_has_visit_record_request();
    request_type_.visit_record_request_ = new ::DataTypes::GetVisitRecordRequest;
  }
  // @@protoc_insertion_point(field_mutable:Services.GetRequest.visit_record_request)
  return request_type_.visit_record_request_;
}
::DataTypes::GetVisitRecordRequest* GetRequest::release_visit_record_request() {
  // @@protoc_insertion_point(field_release:Services.GetRequest.visit_record_request)
  if (has_visit_record_request()) {
    clear_has_request_type();
    ::DataTypes::GetVisitRecordRequest* temp = request_type_.visit_record_request_;
    request_type_.visit_record_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GetRequest::set_allocated_visit_record_request(::DataTypes::GetVisitRecordRequest* visit_record_request) {
  clear_request_type();
  if (visit_record_request) {
    set_has_visit_record_request();
    request_type_.visit_record_request_ = visit_record_request;
  }
  // @@protoc_insertion_point(field_set_allocated:Services.GetRequest.visit_record_request)
}

bool GetRequest::has_request_type() const {
  return request_type_case() != REQUEST_TYPE_NOT_SET;
}
void GetRequest::clear_has_request_type() {
  _oneof_case_[0] = REQUEST_TYPE_NOT_SET;
}
GetRequest::RequestTypeCase GetRequest::request_type_case() const {
  return GetRequest::RequestTypeCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommitRequest::kMutationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommitRequest::CommitRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Services.CommitRequest)
}

void CommitRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CommitRequest::CommitRequest(const CommitRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Services.CommitRequest)
}

void CommitRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

CommitRequest::~CommitRequest() {
  // @@protoc_insertion_point(destructor:Services.CommitRequest)
  SharedDtor();
}

void CommitRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CommitRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommitRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommitRequest_descriptor_;
}

const CommitRequest& CommitRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_services_2fdatabase_5fservice_2eproto();
  return *default_instance_;
}

CommitRequest* CommitRequest::default_instance_ = NULL;

CommitRequest* CommitRequest::New(::google::protobuf::Arena* arena) const {
  CommitRequest* n = new CommitRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CommitRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Services.CommitRequest)
  mutations_.Clear();
}

bool CommitRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Services.CommitRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Services.Mutation mutations = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_mutations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_mutations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_mutations;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Services.CommitRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Services.CommitRequest)
  return false;
#undef DO_
}

void CommitRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Services.CommitRequest)
  // repeated .Services.Mutation mutations = 1;
  for (unsigned int i = 0, n = this->mutations_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mutations(i), output);
  }

  // @@protoc_insertion_point(serialize_end:Services.CommitRequest)
}

::google::protobuf::uint8* CommitRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Services.CommitRequest)
  // repeated .Services.Mutation mutations = 1;
  for (unsigned int i = 0, n = this->mutations_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mutations(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Services.CommitRequest)
  return target;
}

int CommitRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Services.CommitRequest)
  int total_size = 0;

  // repeated .Services.Mutation mutations = 1;
  total_size += 1 * this->mutations_size();
  for (int i = 0; i < this->mutations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mutations(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommitRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Services.CommitRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CommitRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CommitRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Services.CommitRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Services.CommitRequest)
    MergeFrom(*source);
  }
}

void CommitRequest::MergeFrom(const CommitRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Services.CommitRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  mutations_.MergeFrom(from.mutations_);
}

void CommitRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Services.CommitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommitRequest::CopyFrom(const CommitRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Services.CommitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommitRequest::IsInitialized() const {

  return true;
}

void CommitRequest::Swap(CommitRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommitRequest::InternalSwap(CommitRequest* other) {
  mutations_.UnsafeArenaSwap(&other->mutations_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CommitRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommitRequest_descriptor_;
  metadata.reflection = CommitRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CommitRequest

// repeated .Services.Mutation mutations = 1;
int CommitRequest::mutations_size() const {
  return mutations_.size();
}
void CommitRequest::clear_mutations() {
  mutations_.Clear();
}
const ::Services::Mutation& CommitRequest::mutations(int index) const {
  // @@protoc_insertion_point(field_get:Services.CommitRequest.mutations)
  return mutations_.Get(index);
}
::Services::Mutation* CommitRequest::mutable_mutations(int index) {
  // @@protoc_insertion_point(field_mutable:Services.CommitRequest.mutations)
  return mutations_.Mutable(index);
}
::Services::Mutation* CommitRequest::add_mutations() {
  // @@protoc_insertion_point(field_add:Services.CommitRequest.mutations)
  return mutations_.Add();
}
::google::protobuf::RepeatedPtrField< ::Services::Mutation >*
CommitRequest::mutable_mutations() {
  // @@protoc_insertion_point(field_mutable_list:Services.CommitRequest.mutations)
  return &mutations_;
}
const ::google::protobuf::RepeatedPtrField< ::Services::Mutation >&
CommitRequest::mutations() const {
  // @@protoc_insertion_point(field_list:Services.CommitRequest.mutations)
  return mutations_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommitResponse::kMutationResultsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommitResponse::CommitResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Services.CommitResponse)
}

void CommitResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CommitResponse::CommitResponse(const CommitResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Services.CommitResponse)
}

void CommitResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

CommitResponse::~CommitResponse() {
  // @@protoc_insertion_point(destructor:Services.CommitResponse)
  SharedDtor();
}

void CommitResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CommitResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommitResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommitResponse_descriptor_;
}

const CommitResponse& CommitResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_services_2fdatabase_5fservice_2eproto();
  return *default_instance_;
}

CommitResponse* CommitResponse::default_instance_ = NULL;

CommitResponse* CommitResponse::New(::google::protobuf::Arena* arena) const {
  CommitResponse* n = new CommitResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CommitResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Services.CommitResponse)
  mutation_results_.Clear();
}

bool CommitResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Services.CommitResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Services.MutationResult mutation_results = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_mutation_results:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_mutation_results()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_mutation_results;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Services.CommitResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Services.CommitResponse)
  return false;
#undef DO_
}

void CommitResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Services.CommitResponse)
  // repeated .Services.MutationResult mutation_results = 1;
  for (unsigned int i = 0, n = this->mutation_results_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mutation_results(i), output);
  }

  // @@protoc_insertion_point(serialize_end:Services.CommitResponse)
}

::google::protobuf::uint8* CommitResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Services.CommitResponse)
  // repeated .Services.MutationResult mutation_results = 1;
  for (unsigned int i = 0, n = this->mutation_results_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mutation_results(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Services.CommitResponse)
  return target;
}

int CommitResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Services.CommitResponse)
  int total_size = 0;

  // repeated .Services.MutationResult mutation_results = 1;
  total_size += 1 * this->mutation_results_size();
  for (int i = 0; i < this->mutation_results_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mutation_results(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommitResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Services.CommitResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CommitResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CommitResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Services.CommitResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Services.CommitResponse)
    MergeFrom(*source);
  }
}

void CommitResponse::MergeFrom(const CommitResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Services.CommitResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  mutation_results_.MergeFrom(from.mutation_results_);
}

void CommitResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Services.CommitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommitResponse::CopyFrom(const CommitResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Services.CommitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommitResponse::IsInitialized() const {

  return true;
}

void CommitResponse::Swap(CommitResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommitResponse::InternalSwap(CommitResponse* other) {
  mutation_results_.UnsafeArenaSwap(&other->mutation_results_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CommitResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommitResponse_descriptor_;
  metadata.reflection = CommitResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CommitResponse

// repeated .Services.MutationResult mutation_results = 1;
int CommitResponse::mutation_results_size() const {
  return mutation_results_.size();
}
void CommitResponse::clear_mutation_results() {
  mutation_results_.Clear();
}
const ::Services::MutationResult& CommitResponse::mutation_results(int index) const {
  // @@protoc_insertion_point(field_get:Services.CommitResponse.mutation_results)
  return mutation_results_.Get(index);
}
::Services::MutationResult* CommitResponse::mutable_mutation_results(int index) {
  // @@protoc_insertion_point(field_mutable:Services.CommitResponse.mutation_results)
  return mutation_results_.Mutable(index);
}
::Services::MutationResult* CommitResponse::add_mutation_results() {
  // @@protoc_insertion_point(field_add:Services.CommitResponse.mutation_results)
  return mutation_results_.Add();
}
::google::protobuf::RepeatedPtrField< ::Services::MutationResult >*
CommitResponse::mutable_mutation_results() {
  // @@protoc_insertion_point(field_mutable_list:Services.CommitResponse.mutation_results)
  return &mutation_results_;
}
const ::google::protobuf::RepeatedPtrField< ::Services::MutationResult >&
CommitResponse::mutation_results() const {
  // @@protoc_insertion_point(field_list:Services.CommitResponse.mutation_results)
  return mutation_results_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MutationResult::kEntityFieldNumber;
const int MutationResult::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MutationResult::MutationResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Services.MutationResult)
}

void MutationResult::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  entity_ = const_cast< ::Services::Entity*>(&::Services::Entity::default_instance());
}

MutationResult::MutationResult(const MutationResult& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Services.MutationResult)
}

void MutationResult::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  entity_ = NULL;
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MutationResult::~MutationResult() {
  // @@protoc_insertion_point(destructor:Services.MutationResult)
  SharedDtor();
}

void MutationResult::SharedDtor() {
  error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete entity_;
  }
}

void MutationResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MutationResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MutationResult_descriptor_;
}

const MutationResult& MutationResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_services_2fdatabase_5fservice_2eproto();
  return *default_instance_;
}

MutationResult* MutationResult::default_instance_ = NULL;

MutationResult* MutationResult::New(::google::protobuf::Arena* arena) const {
  MutationResult* n = new MutationResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MutationResult::Clear() {
// @@protoc_insertion_point(message_clear_start:Services.MutationResult)
  if (GetArenaNoVirtual() == NULL && entity_ != NULL) delete entity_;
  entity_ = NULL;
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool MutationResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Services.MutationResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Services.Entity entity = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_entity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional string error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Services.MutationResult.error"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Services.MutationResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Services.MutationResult)
  return false;
#undef DO_
}

void MutationResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Services.MutationResult)
  // optional .Services.Entity entity = 1;
  if (this->has_entity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->entity_, output);
  }

  // optional string error = 2;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Services.MutationResult.error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error(), output);
  }

  // @@protoc_insertion_point(serialize_end:Services.MutationResult)
}

::google::protobuf::uint8* MutationResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Services.MutationResult)
  // optional .Services.Entity entity = 1;
  if (this->has_entity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->entity_, target);
  }

  // optional string error = 2;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Services.MutationResult.error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Services.MutationResult)
  return target;
}

int MutationResult::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Services.MutationResult)
  int total_size = 0;

  // optional .Services.Entity entity = 1;
  if (this->has_entity()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->entity_);
  }

  // optional string error = 2;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MutationResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Services.MutationResult)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MutationResult* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MutationResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Services.MutationResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Services.MutationResult)
    MergeFrom(*source);
  }
}

void MutationResult::MergeFrom(const MutationResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Services.MutationResult)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_entity()) {
    mutable_entity()->::Services::Entity::MergeFrom(from.entity());
  }
  if (from.error().size() > 0) {

    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
}

void MutationResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Services.MutationResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MutationResult::CopyFrom(const MutationResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Services.MutationResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MutationResult::IsInitialized() const {

  return true;
}

void MutationResult::Swap(MutationResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MutationResult::InternalSwap(MutationResult* other) {
  std::swap(entity_, other->entity_);
  error_.Swap(&other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MutationResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MutationResult_descriptor_;
  metadata.reflection = MutationResult_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MutationResult

// optional .Services.Entity entity = 1;
bool MutationResult::has_entity() const {
  return !_is_default_instance_ && entity_ != NULL;
}
void MutationResult::clear_entity() {
  if (GetArenaNoVirtual() == NULL && entity_ != NULL) delete entity_;
  entity_ = NULL;
}
const ::Services::Entity& MutationResult::entity() const {
  // @@protoc_insertion_point(field_get:Services.MutationResult.entity)
  return entity_ != NULL ? *entity_ : *default_instance_->entity_;
}
::Services::Entity* MutationResult::mutable_entity() {
  
  if (entity_ == NULL) {
    entity_ = new ::Services::Entity;
  }
  // @@protoc_insertion_point(field_mutable:Services.MutationResult.entity)
  return entity_;
}
::Services::Entity* MutationResult::release_entity() {
  // @@protoc_insertion_point(field_release:Services.MutationResult.entity)
  
  ::Services::Entity* temp = entity_;
  entity_ = NULL;
  return temp;
}
void MutationResult::set_allocated_entity(::Services::Entity* entity) {
  delete entity_;
  entity_ = entity;
  if (entity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Services.MutationResult.entity)
}

// optional string error = 2;
void MutationResult::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MutationResult::error() const {
  // @@protoc_insertion_point(field_get:Services.MutationResult.error)
  return error_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MutationResult::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Services.MutationResult.error)
}
 void MutationResult::set_error(const char* value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Services.MutationResult.error)
}
 void MutationResult::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Services.MutationResult.error)
}
 ::std::string* MutationResult::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:Services.MutationResult.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MutationResult::release_error() {
  // @@protoc_insertion_point(field_release:Services.MutationResult.error)
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MutationResult::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:Services.MutationResult.error)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mutation::kInsertFieldNumber;
const int Mutation::kUpdateFieldNumber;
const int Mutation::kDeleteFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mutation::Mutation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Services.Mutation)
}

void Mutation::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  Mutation_default_oneof_instance_->insert_ = const_cast< ::Services::Entity*>(&::Services::Entity::default_instance());
  Mutation_default_oneof_instance_->update_ = const_cast< ::Services::Entity*>(&::Services::Entity::default_instance());
  Mutation_default_oneof_instance_->delete__ = const_cast< ::Services::Entity*>(&::Services::Entity::default_instance());
}

Mutation::Mutation(const Mutation& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Services.Mutation)
}

void Mutation::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  clear_has_operation();
}

Mutation::~Mutation() {
  // @@protoc_insertion_point(destructor:Services.Mutation)
  SharedDtor();
}

void Mutation::SharedDtor() {
  if (has_operation()) {
    clear_operation();
  }
  if (this != default_instance_) {
  }
}

void Mutation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mutation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mutation_descriptor_;
}

const Mutation& Mutation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_services_2fdatabase_5fservice_2eproto();
  return *default_instance_;
}

Mutation* Mutation::default_instance_ = NULL;

Mutation* Mutation::New(::google::protobuf::Arena* arena) const {
  Mutation* n = new Mutation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Mutation::clear_operation() {
// @@protoc_insertion_point(one_of_clear_start:Services.Mutation)
  switch(operation_case()) {
    case kInsert: {
      delete operation_.insert_;
      break;
    }
    case kUpdate: {
      delete operation_.update_;
      break;
    }
    case kDelete: {
      delete operation_.delete__;
      break;
    }
    case OPERATION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OPERATION_NOT_SET;
}


void Mutation::Clear() {
// @@protoc_insertion_point(message_clear_start:Services.Mutation)
  clear_operation();
}

bool Mutation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Services.Mutation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Services.Entity insert = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_insert()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_update;
        break;
      }

      // optional .Services.Entity update = 2;
      case 2: {
        if (tag == 18) {
         parse_update:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_delete;
        break;
      }

      // optional .Services.Entity delete = 3;
      case 3: {
        if (tag == 26) {
         parse_delete:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_delete_()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Services.Mutation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Services.Mutation)
  return false;
#undef DO_
}

void Mutation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Services.Mutation)
  // optional .Services.Entity insert = 1;
  if (has_insert()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *operation_.insert_, output);
  }

  // optional .Services.Entity update = 2;
  if (has_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *operation_.update_, output);
  }

  // optional .Services.Entity delete = 3;
  if (has_delete_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *operation_.delete__, output);
  }

  // @@protoc_insertion_point(serialize_end:Services.Mutation)
}

::google::protobuf::uint8* Mutation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Services.Mutation)
  // optional .Services.Entity insert = 1;
  if (has_insert()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *operation_.insert_, target);
  }

  // optional .Services.Entity update = 2;
  if (has_update()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *operation_.update_, target);
  }

  // optional .Services.Entity delete = 3;
  if (has_delete_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *operation_.delete__, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Services.Mutation)
  return target;
}

int Mutation::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Services.Mutation)
  int total_size = 0;

  switch (operation_case()) {
    // optional .Services.Entity insert = 1;
    case kInsert: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *operation_.insert_);
      break;
    }
    // optional .Services.Entity update = 2;
    case kUpdate: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *operation_.update_);
      break;
    }
    // optional .Services.Entity delete = 3;
    case kDelete: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *operation_.delete__);
      break;
    }
    case OPERATION_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mutation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Services.Mutation)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Mutation* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Mutation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Services.Mutation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Services.Mutation)
    MergeFrom(*source);
  }
}

void Mutation::MergeFrom(const Mutation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Services.Mutation)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  switch (from.operation_case()) {
    case kInsert: {
      mutable_insert()->::Services::Entity::MergeFrom(from.insert());
      break;
    }
    case kUpdate: {
      mutable_update()->::Services::Entity::MergeFrom(from.update());
      break;
    }
    case kDelete: {
      mutable_delete_()->::Services::Entity::MergeFrom(from.delete_());
      break;
    }
    case OPERATION_NOT_SET: {
      break;
    }
  }
}

void Mutation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Services.Mutation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mutation::CopyFrom(const Mutation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Services.Mutation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mutation::IsInitialized() const {

  return true;
}

void Mutation::Swap(Mutation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mutation::InternalSwap(Mutation* other) {
  std::swap(operation_, other->operation_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Mutation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mutation_descriptor_;
  metadata.reflection = Mutation_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Mutation

// optional .Services.Entity insert = 1;
bool Mutation::has_insert() const {
  return operation_case() == kInsert;
}
void Mutation::set_has_insert() {
  _oneof_case_[0] = kInsert;
}
void Mutation::clear_insert() {
  if (has_insert()) {
    delete operation_.insert_;
    clear_has_operation();
  }
}
 const ::Services::Entity& Mutation::insert() const {
  // @@protoc_insertion_point(field_get:Services.Mutation.insert)
  return has_insert()
      ? *operation_.insert_
      : ::Services::Entity::default_instance();
}
::Services::Entity* Mutation::mutable_insert() {
  if (!has_insert()) {
    clear_operation();
    set_has_insert();
    operation_.insert_ = new ::Services::Entity;
  }
  // @@protoc_insertion_point(field_mutable:Services.Mutation.insert)
  return operation_.insert_;
}
::Services::Entity* Mutation::release_insert() {
  // @@protoc_insertion_point(field_release:Services.Mutation.insert)
  if (has_insert()) {
    clear_has_operation();
    ::Services::Entity* temp = operation_.insert_;
    operation_.insert_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Mutation::set_allocated_insert(::Services::Entity* insert) {
  clear_operation();
  if (insert) {
    set_has_insert();
    operation_.insert_ = insert;
  }
  // @@protoc_insertion_point(field_set_allocated:Services.Mutation.insert)
}

// optional .Services.Entity update = 2;
bool Mutation::has_update() const {
  return operation_case() == kUpdate;
}
void Mutation::set_has_update() {
  _oneof_case_[0] = kUpdate;
}
void Mutation::clear_update() {
  if (has_update()) {
    delete operation_.update_;
    clear_has_operation();
  }
}
 const ::Services::Entity& Mutation::update() const {
  // @@protoc_insertion_point(field_get:Services.Mutation.update)
  return has_update()
      ? *operation_.update_
      : ::Services::Entity::default_instance();
}
::Services::Entity* Mutation::mutable_update() {
  if (!has_update()) {
    clear_operation();
    set_has_update();
    operation_.update_ = new ::Services::Entity;
  }
  // @@protoc_insertion_point(field_mutable:Services.Mutation.update)
  return operation_.update_;
}
::Services::Entity* Mutation::release_update() {
  // @@protoc_insertion_point(field_release:Services.Mutation.update)
  if (has_update()) {
    clear_has_operation();
    ::Services::Entity* temp = operation_.update_;
    operation_.update_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Mutation::set_allocated_update(::Services::Entity* update) {
  clear_operation();
  if (update) {
    set_has_update();
    operation_.update_ = update;
  }
  // @@protoc_insertion_point(field_set_allocated:Services.Mutation.update)
}

// optional .Services.Entity delete = 3;
bool Mutation::has_delete_() const {
  return operation_case() == kDelete;
}
void Mutation::set_has_delete_() {
  _oneof_case_[0] = kDelete;
}
void Mutation::clear_delete_() {
  if (has_delete_()) {
    delete operation_.delete__;
    clear_has_operation();
  }
}
 const ::Services::Entity& Mutation::delete_() const {
  // @@protoc_insertion_point(field_get:Services.Mutation.delete)
  return has_delete_()
      ? *operation_.delete__
      : ::Services::Entity::default_instance();
}
::Services::Entity* Mutation::mutable_delete_() {
  if (!has_delete_()) {
    clear_operation();
    set_has_delete_();
    operation_.delete__ = new ::Services::Entity;
  }
  // @@protoc_insertion_point(field_mutable:Services.Mutation.delete)
  return operation_.delete__;
}
::Services::Entity* Mutation::release_delete_() {
  // @@protoc_insertion_point(field_release:Services.Mutation.delete)
  if (has_delete_()) {
    clear_has_operation();
    ::Services::Entity* temp = operation_.delete__;
    operation_.delete__ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Mutation::set_allocated_delete_(::Services::Entity* delete_) {
  clear_operation();
  if (delete_) {
    set_has_delete_();
    operation_.delete__ = delete_;
  }
  // @@protoc_insertion_point(field_set_allocated:Services.Mutation.delete)
}

bool Mutation::has_operation() const {
  return operation_case() != OPERATION_NOT_SET;
}
void Mutation::clear_has_operation() {
  _oneof_case_[0] = OPERATION_NOT_SET;
}
Mutation::OperationCase Mutation::operation_case() const {
  return Mutation::OperationCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Entity::kCardFieldNumber;
const int Entity::kPersonFieldNumber;
const int Entity::kVisitRecordFieldNumber;
const int Entity::kLocationFieldNumber;
const int Entity::kPhotoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Entity::Entity()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Services.Entity)
}

void Entity::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  Entity_default_oneof_instance_->card_ = const_cast< ::DataTypes::Card*>(&::DataTypes::Card::default_instance());
  Entity_default_oneof_instance_->person_ = const_cast< ::DataTypes::Person*>(&::DataTypes::Person::default_instance());
  Entity_default_oneof_instance_->visit_record_ = const_cast< ::DataTypes::VisitRecord*>(&::DataTypes::VisitRecord::default_instance());
  Entity_default_oneof_instance_->location_ = const_cast< ::DataTypes::Location*>(&::DataTypes::Location::default_instance());
  Entity_default_oneof_instance_->photo_ = const_cast< ::DataTypes::Photo*>(&::DataTypes::Photo::default_instance());
}

Entity::Entity(const Entity& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Services.Entity)
}

void Entity::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  clear_has_value_type();
}

Entity::~Entity() {
  // @@protoc_insertion_point(destructor:Services.Entity)
  SharedDtor();
}

void Entity::SharedDtor() {
  if (has_value_type()) {
    clear_value_type();
  }
  if (this != default_instance_) {
  }
}

void Entity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Entity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Entity_descriptor_;
}

const Entity& Entity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_services_2fdatabase_5fservice_2eproto();
  return *default_instance_;
}

Entity* Entity::default_instance_ = NULL;

Entity* Entity::New(::google::protobuf::Arena* arena) const {
  Entity* n = new Entity;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Entity::clear_value_type() {
// @@protoc_insertion_point(one_of_clear_start:Services.Entity)
  switch(value_type_case()) {
    case kCard: {
      delete value_type_.card_;
      break;
    }
    case kPerson: {
      delete value_type_.person_;
      break;
    }
    case kVisitRecord: {
      delete value_type_.visit_record_;
      break;
    }
    case kLocation: {
      delete value_type_.location_;
      break;
    }
    case kPhoto: {
      delete value_type_.photo_;
      break;
    }
    case VALUE_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_TYPE_NOT_SET;
}


void Entity::Clear() {
// @@protoc_insertion_point(message_clear_start:Services.Entity)
  clear_value_type();
}

bool Entity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Services.Entity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DataTypes.Card card = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_card()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_person;
        break;
      }

      // optional .DataTypes.Person person = 2;
      case 2: {
        if (tag == 18) {
         parse_person:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_person()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_visit_record;
        break;
      }

      // optional .DataTypes.VisitRecord visit_record = 3;
      case 3: {
        if (tag == 26) {
         parse_visit_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_visit_record()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_location;
        break;
      }

      // optional .DataTypes.Location location = 4;
      case 4: {
        if (tag == 34) {
         parse_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Photo;
        break;
      }

      // optional .DataTypes.Photo Photo = 5;
      case 5: {
        if (tag == 42) {
         parse_Photo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_photo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Services.Entity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Services.Entity)
  return false;
#undef DO_
}

void Entity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Services.Entity)
  // optional .DataTypes.Card card = 1;
  if (has_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *value_type_.card_, output);
  }

  // optional .DataTypes.Person person = 2;
  if (has_person()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *value_type_.person_, output);
  }

  // optional .DataTypes.VisitRecord visit_record = 3;
  if (has_visit_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *value_type_.visit_record_, output);
  }

  // optional .DataTypes.Location location = 4;
  if (has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *value_type_.location_, output);
  }

  // optional .DataTypes.Photo Photo = 5;
  if (has_photo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *value_type_.photo_, output);
  }

  // @@protoc_insertion_point(serialize_end:Services.Entity)
}

::google::protobuf::uint8* Entity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Services.Entity)
  // optional .DataTypes.Card card = 1;
  if (has_card()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *value_type_.card_, target);
  }

  // optional .DataTypes.Person person = 2;
  if (has_person()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *value_type_.person_, target);
  }

  // optional .DataTypes.VisitRecord visit_record = 3;
  if (has_visit_record()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *value_type_.visit_record_, target);
  }

  // optional .DataTypes.Location location = 4;
  if (has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *value_type_.location_, target);
  }

  // optional .DataTypes.Photo Photo = 5;
  if (has_photo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *value_type_.photo_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Services.Entity)
  return target;
}

int Entity::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Services.Entity)
  int total_size = 0;

  switch (value_type_case()) {
    // optional .DataTypes.Card card = 1;
    case kCard: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_type_.card_);
      break;
    }
    // optional .DataTypes.Person person = 2;
    case kPerson: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_type_.person_);
      break;
    }
    // optional .DataTypes.VisitRecord visit_record = 3;
    case kVisitRecord: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_type_.visit_record_);
      break;
    }
    // optional .DataTypes.Location location = 4;
    case kLocation: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_type_.location_);
      break;
    }
    // optional .DataTypes.Photo Photo = 5;
    case kPhoto: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_type_.photo_);
      break;
    }
    case VALUE_TYPE_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Entity::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Services.Entity)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Entity* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Entity>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Services.Entity)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Services.Entity)
    MergeFrom(*source);
  }
}

void Entity::MergeFrom(const Entity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Services.Entity)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  switch (from.value_type_case()) {
    case kCard: {
      mutable_card()->::DataTypes::Card::MergeFrom(from.card());
      break;
    }
    case kPerson: {
      mutable_person()->::DataTypes::Person::MergeFrom(from.person());
      break;
    }
    case kVisitRecord: {
      mutable_visit_record()->::DataTypes::VisitRecord::MergeFrom(from.visit_record());
      break;
    }
    case kLocation: {
      mutable_location()->::DataTypes::Location::MergeFrom(from.location());
      break;
    }
    case kPhoto: {
      mutable_photo()->::DataTypes::Photo::MergeFrom(from.photo());
      break;
    }
    case VALUE_TYPE_NOT_SET: {
      break;
    }
  }
}

void Entity::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Services.Entity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Entity::CopyFrom(const Entity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Services.Entity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Entity::IsInitialized() const {

  return true;
}

void Entity::Swap(Entity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Entity::InternalSwap(Entity* other) {
  std::swap(value_type_, other->value_type_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Entity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Entity_descriptor_;
  metadata.reflection = Entity_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Entity

// optional .DataTypes.Card card = 1;
bool Entity::has_card() const {
  return value_type_case() == kCard;
}
void Entity::set_has_card() {
  _oneof_case_[0] = kCard;
}
void Entity::clear_card() {
  if (has_card()) {
    delete value_type_.card_;
    clear_has_value_type();
  }
}
 const ::DataTypes::Card& Entity::card() const {
  // @@protoc_insertion_point(field_get:Services.Entity.card)
  return has_card()
      ? *value_type_.card_
      : ::DataTypes::Card::default_instance();
}
::DataTypes::Card* Entity::mutable_card() {
  if (!has_card()) {
    clear_value_type();
    set_has_card();
    value_type_.card_ = new ::DataTypes::Card;
  }
  // @@protoc_insertion_point(field_mutable:Services.Entity.card)
  return value_type_.card_;
}
::DataTypes::Card* Entity::release_card() {
  // @@protoc_insertion_point(field_release:Services.Entity.card)
  if (has_card()) {
    clear_has_value_type();
    ::DataTypes::Card* temp = value_type_.card_;
    value_type_.card_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Entity::set_allocated_card(::DataTypes::Card* card) {
  clear_value_type();
  if (card) {
    set_has_card();
    value_type_.card_ = card;
  }
  // @@protoc_insertion_point(field_set_allocated:Services.Entity.card)
}

// optional .DataTypes.Person person = 2;
bool Entity::has_person() const {
  return value_type_case() == kPerson;
}
void Entity::set_has_person() {
  _oneof_case_[0] = kPerson;
}
void Entity::clear_person() {
  if (has_person()) {
    delete value_type_.person_;
    clear_has_value_type();
  }
}
 const ::DataTypes::Person& Entity::person() const {
  // @@protoc_insertion_point(field_get:Services.Entity.person)
  return has_person()
      ? *value_type_.person_
      : ::DataTypes::Person::default_instance();
}
::DataTypes::Person* Entity::mutable_person() {
  if (!has_person()) {
    clear_value_type();
    set_has_person();
    value_type_.person_ = new ::DataTypes::Person;
  }
  // @@protoc_insertion_point(field_mutable:Services.Entity.person)
  return value_type_.person_;
}
::DataTypes::Person* Entity::release_person() {
  // @@protoc_insertion_point(field_release:Services.Entity.person)
  if (has_person()) {
    clear_has_value_type();
    ::DataTypes::Person* temp = value_type_.person_;
    value_type_.person_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Entity::set_allocated_person(::DataTypes::Person* person) {
  clear_value_type();
  if (person) {
    set_has_person();
    value_type_.person_ = person;
  }
  // @@protoc_insertion_point(field_set_allocated:Services.Entity.person)
}

// optional .DataTypes.VisitRecord visit_record = 3;
bool Entity::has_visit_record() const {
  return value_type_case() == kVisitRecord;
}
void Entity::set_has_visit_record() {
  _oneof_case_[0] = kVisitRecord;
}
void Entity::clear_visit_record() {
  if (has_visit_record()) {
    delete value_type_.visit_record_;
    clear_has_value_type();
  }
}
 const ::DataTypes::VisitRecord& Entity::visit_record() const {
  // @@protoc_insertion_point(field_get:Services.Entity.visit_record)
  return has_visit_record()
      ? *value_type_.visit_record_
      : ::DataTypes::VisitRecord::default_instance();
}
::DataTypes::VisitRecord* Entity::mutable_visit_record() {
  if (!has_visit_record()) {
    clear_value_type();
    set_has_visit_record();
    value_type_.visit_record_ = new ::DataTypes::VisitRecord;
  }
  // @@protoc_insertion_point(field_mutable:Services.Entity.visit_record)
  return value_type_.visit_record_;
}
::DataTypes::VisitRecord* Entity::release_visit_record() {
  // @@protoc_insertion_point(field_release:Services.Entity.visit_record)
  if (has_visit_record()) {
    clear_has_value_type();
    ::DataTypes::VisitRecord* temp = value_type_.visit_record_;
    value_type_.visit_record_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Entity::set_allocated_visit_record(::DataTypes::VisitRecord* visit_record) {
  clear_value_type();
  if (visit_record) {
    set_has_visit_record();
    value_type_.visit_record_ = visit_record;
  }
  // @@protoc_insertion_point(field_set_allocated:Services.Entity.visit_record)
}

// optional .DataTypes.Location location = 4;
bool Entity::has_location() const {
  return value_type_case() == kLocation;
}
void Entity::set_has_location() {
  _oneof_case_[0] = kLocation;
}
void Entity::clear_location() {
  if (has_location()) {
    delete value_type_.location_;
    clear_has_value_type();
  }
}
 const ::DataTypes::Location& Entity::location() const {
  // @@protoc_insertion_point(field_get:Services.Entity.location)
  return has_location()
      ? *value_type_.location_
      : ::DataTypes::Location::default_instance();
}
::DataTypes::Location* Entity::mutable_location() {
  if (!has_location()) {
    clear_value_type();
    set_has_location();
    value_type_.location_ = new ::DataTypes::Location;
  }
  // @@protoc_insertion_point(field_mutable:Services.Entity.location)
  return value_type_.location_;
}
::DataTypes::Location* Entity::release_location() {
  // @@protoc_insertion_point(field_release:Services.Entity.location)
  if (has_location()) {
    clear_has_value_type();
    ::DataTypes::Location* temp = value_type_.location_;
    value_type_.location_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Entity::set_allocated_location(::DataTypes::Location* location) {
  clear_value_type();
  if (location) {
    set_has_location();
    value_type_.location_ = location;
  }
  // @@protoc_insertion_point(field_set_allocated:Services.Entity.location)
}

// optional .DataTypes.Photo Photo = 5;
bool Entity::has_photo() const {
  return value_type_case() == kPhoto;
}
void Entity::set_has_photo() {
  _oneof_case_[0] = kPhoto;
}
void Entity::clear_photo() {
  if (has_photo()) {
    delete value_type_.photo_;
    clear_has_value_type();
  }
}
 const ::DataTypes::Photo& Entity::photo() const {
  // @@protoc_insertion_point(field_get:Services.Entity.Photo)
  return has_photo()
      ? *value_type_.photo_
      : ::DataTypes::Photo::default_instance();
}
::DataTypes::Photo* Entity::mutable_photo() {
  if (!has_photo()) {
    clear_value_type();
    set_has_photo();
    value_type_.photo_ = new ::DataTypes::Photo;
  }
  // @@protoc_insertion_point(field_mutable:Services.Entity.Photo)
  return value_type_.photo_;
}
::DataTypes::Photo* Entity::release_photo() {
  // @@protoc_insertion_point(field_release:Services.Entity.Photo)
  if (has_photo()) {
    clear_has_value_type();
    ::DataTypes::Photo* temp = value_type_.photo_;
    value_type_.photo_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Entity::set_allocated_photo(::DataTypes::Photo* photo) {
  clear_value_type();
  if (photo) {
    set_has_photo();
    value_type_.photo_ = photo;
  }
  // @@protoc_insertion_point(field_set_allocated:Services.Entity.Photo)
}

bool Entity::has_value_type() const {
  return value_type_case() != VALUE_TYPE_NOT_SET;
}
void Entity::clear_has_value_type() {
  _oneof_case_[0] = VALUE_TYPE_NOT_SET;
}
Entity::ValueTypeCase Entity::value_type_case() const {
  return Entity::ValueTypeCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Entities::kItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Entities::Entities()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Services.Entities)
}

void Entities::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Entities::Entities(const Entities& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Services.Entities)
}

void Entities::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

Entities::~Entities() {
  // @@protoc_insertion_point(destructor:Services.Entities)
  SharedDtor();
}

void Entities::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Entities::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Entities::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Entities_descriptor_;
}

const Entities& Entities::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_services_2fdatabase_5fservice_2eproto();
  return *default_instance_;
}

Entities* Entities::default_instance_ = NULL;

Entities* Entities::New(::google::protobuf::Arena* arena) const {
  Entities* n = new Entities;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Entities::Clear() {
// @@protoc_insertion_point(message_clear_start:Services.Entities)
  items_.Clear();
}

bool Entities::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Services.Entities)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Services.Entity items = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_items;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Services.Entities)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Services.Entities)
  return false;
#undef DO_
}

void Entities::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Services.Entities)
  // repeated .Services.Entity items = 1;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  // @@protoc_insertion_point(serialize_end:Services.Entities)
}

::google::protobuf::uint8* Entities::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Services.Entities)
  // repeated .Services.Entity items = 1;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Services.Entities)
  return target;
}

int Entities::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Services.Entities)
  int total_size = 0;

  // repeated .Services.Entity items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Entities::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Services.Entities)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Entities* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Entities>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Services.Entities)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Services.Entities)
    MergeFrom(*source);
  }
}

void Entities::MergeFrom(const Entities& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Services.Entities)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  items_.MergeFrom(from.items_);
}

void Entities::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Services.Entities)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Entities::CopyFrom(const Entities& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Services.Entities)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Entities::IsInitialized() const {

  return true;
}

void Entities::Swap(Entities* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Entities::InternalSwap(Entities* other) {
  items_.UnsafeArenaSwap(&other->items_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Entities::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Entities_descriptor_;
  metadata.reflection = Entities_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Entities

// repeated .Services.Entity items = 1;
int Entities::items_size() const {
  return items_.size();
}
void Entities::clear_items() {
  items_.Clear();
}
const ::Services::Entity& Entities::items(int index) const {
  // @@protoc_insertion_point(field_get:Services.Entities.items)
  return items_.Get(index);
}
::Services::Entity* Entities::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:Services.Entities.items)
  return items_.Mutable(index);
}
::Services::Entity* Entities::add_items() {
  // @@protoc_insertion_point(field_add:Services.Entities.items)
  return items_.Add();
}
::google::protobuf::RepeatedPtrField< ::Services::Entity >*
Entities::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:Services.Entities.items)
  return &items_;
}
const ::google::protobuf::RepeatedPtrField< ::Services::Entity >&
Entities::items() const {
  // @@protoc_insertion_point(field_list:Services.Entities.items)
  return items_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Services

// @@protoc_insertion_point(global_scope)
