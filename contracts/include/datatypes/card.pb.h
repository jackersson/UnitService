// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datatypes/card.proto

#ifndef PROTOBUF_datatypes_2fcard_2eproto__INCLUDED
#define PROTOBUF_datatypes_2fcard_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "datatypes/data.pb.h"
// @@protoc_insertion_point(includes)

namespace DataTypes {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_datatypes_2fcard_2eproto();
void protobuf_AssignDesc_datatypes_2fcard_2eproto();
void protobuf_ShutdownFile_datatypes_2fcard_2eproto();

class Card;
class Cards;

// ===================================================================

class Card : public ::google::protobuf::Message {
 public:
  Card();
  virtual ~Card();

  Card(const Card& from);

  inline Card& operator=(const Card& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Card& default_instance();

  void Swap(Card* other);

  // implements Message ----------------------------------------------

  inline Card* New() const { return New(NULL); }

  Card* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Card& from);
  void MergeFrom(const Card& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Card* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .DataTypes.Key unique_identifier = 1;
  bool has_unique_identifier() const;
  void clear_unique_identifier();
  static const int kUniqueIdentifierFieldNumber = 1;
  const ::DataTypes::Key& unique_identifier() const;
  ::DataTypes::Key* mutable_unique_identifier();
  ::DataTypes::Key* release_unique_identifier();
  void set_allocated_unique_identifier(::DataTypes::Key* unique_identifier);

  // optional .DataTypes.Key owner_id = 2;
  bool has_owner_id() const;
  void clear_owner_id();
  static const int kOwnerIdFieldNumber = 2;
  const ::DataTypes::Key& owner_id() const;
  ::DataTypes::Key* mutable_owner_id();
  ::DataTypes::Key* release_owner_id();
  void set_allocated_owner_id(::DataTypes::Key* owner_id);

  // @@protoc_insertion_point(class_scope:DataTypes.Card)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::DataTypes::Key* unique_identifier_;
  ::DataTypes::Key* owner_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_datatypes_2fcard_2eproto();
  friend void protobuf_AssignDesc_datatypes_2fcard_2eproto();
  friend void protobuf_ShutdownFile_datatypes_2fcard_2eproto();

  void InitAsDefaultInstance();
  static Card* default_instance_;
};
// -------------------------------------------------------------------

class Cards : public ::google::protobuf::Message {
 public:
  Cards();
  virtual ~Cards();

  Cards(const Cards& from);

  inline Cards& operator=(const Cards& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Cards& default_instance();

  void Swap(Cards* other);

  // implements Message ----------------------------------------------

  inline Cards* New() const { return New(NULL); }

  Cards* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Cards& from);
  void MergeFrom(const Cards& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Cards* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .DataTypes.Card items = 1;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 1;
  const ::DataTypes::Card& items(int index) const;
  ::DataTypes::Card* mutable_items(int index);
  ::DataTypes::Card* add_items();
  ::google::protobuf::RepeatedPtrField< ::DataTypes::Card >*
      mutable_items();
  const ::google::protobuf::RepeatedPtrField< ::DataTypes::Card >&
      items() const;

  // optional int64 count = 2;
  void clear_count();
  static const int kCountFieldNumber = 2;
  ::google::protobuf::int64 count() const;
  void set_count(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:DataTypes.Cards)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::DataTypes::Card > items_;
  ::google::protobuf::int64 count_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_datatypes_2fcard_2eproto();
  friend void protobuf_AssignDesc_datatypes_2fcard_2eproto();
  friend void protobuf_ShutdownFile_datatypes_2fcard_2eproto();

  void InitAsDefaultInstance();
  static Cards* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Card

// optional .DataTypes.Key unique_identifier = 1;
inline bool Card::has_unique_identifier() const {
  return !_is_default_instance_ && unique_identifier_ != NULL;
}
inline void Card::clear_unique_identifier() {
  if (GetArenaNoVirtual() == NULL && unique_identifier_ != NULL) delete unique_identifier_;
  unique_identifier_ = NULL;
}
inline const ::DataTypes::Key& Card::unique_identifier() const {
  // @@protoc_insertion_point(field_get:DataTypes.Card.unique_identifier)
  return unique_identifier_ != NULL ? *unique_identifier_ : *default_instance_->unique_identifier_;
}
inline ::DataTypes::Key* Card::mutable_unique_identifier() {
  
  if (unique_identifier_ == NULL) {
    unique_identifier_ = new ::DataTypes::Key;
  }
  // @@protoc_insertion_point(field_mutable:DataTypes.Card.unique_identifier)
  return unique_identifier_;
}
inline ::DataTypes::Key* Card::release_unique_identifier() {
  // @@protoc_insertion_point(field_release:DataTypes.Card.unique_identifier)
  
  ::DataTypes::Key* temp = unique_identifier_;
  unique_identifier_ = NULL;
  return temp;
}
inline void Card::set_allocated_unique_identifier(::DataTypes::Key* unique_identifier) {
  delete unique_identifier_;
  unique_identifier_ = unique_identifier;
  if (unique_identifier) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:DataTypes.Card.unique_identifier)
}

// optional .DataTypes.Key owner_id = 2;
inline bool Card::has_owner_id() const {
  return !_is_default_instance_ && owner_id_ != NULL;
}
inline void Card::clear_owner_id() {
  if (GetArenaNoVirtual() == NULL && owner_id_ != NULL) delete owner_id_;
  owner_id_ = NULL;
}
inline const ::DataTypes::Key& Card::owner_id() const {
  // @@protoc_insertion_point(field_get:DataTypes.Card.owner_id)
  return owner_id_ != NULL ? *owner_id_ : *default_instance_->owner_id_;
}
inline ::DataTypes::Key* Card::mutable_owner_id() {
  
  if (owner_id_ == NULL) {
    owner_id_ = new ::DataTypes::Key;
  }
  // @@protoc_insertion_point(field_mutable:DataTypes.Card.owner_id)
  return owner_id_;
}
inline ::DataTypes::Key* Card::release_owner_id() {
  // @@protoc_insertion_point(field_release:DataTypes.Card.owner_id)
  
  ::DataTypes::Key* temp = owner_id_;
  owner_id_ = NULL;
  return temp;
}
inline void Card::set_allocated_owner_id(::DataTypes::Key* owner_id) {
  delete owner_id_;
  owner_id_ = owner_id;
  if (owner_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:DataTypes.Card.owner_id)
}

// -------------------------------------------------------------------

// Cards

// repeated .DataTypes.Card items = 1;
inline int Cards::items_size() const {
  return items_.size();
}
inline void Cards::clear_items() {
  items_.Clear();
}
inline const ::DataTypes::Card& Cards::items(int index) const {
  // @@protoc_insertion_point(field_get:DataTypes.Cards.items)
  return items_.Get(index);
}
inline ::DataTypes::Card* Cards::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:DataTypes.Cards.items)
  return items_.Mutable(index);
}
inline ::DataTypes::Card* Cards::add_items() {
  // @@protoc_insertion_point(field_add:DataTypes.Cards.items)
  return items_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::DataTypes::Card >*
Cards::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:DataTypes.Cards.items)
  return &items_;
}
inline const ::google::protobuf::RepeatedPtrField< ::DataTypes::Card >&
Cards::items() const {
  // @@protoc_insertion_point(field_list:DataTypes.Cards.items)
  return items_;
}

// optional int64 count = 2;
inline void Cards::clear_count() {
  count_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Cards::count() const {
  // @@protoc_insertion_point(field_get:DataTypes.Cards.count)
  return count_;
}
inline void Cards::set_count(::google::protobuf::int64 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:DataTypes.Cards.count)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace DataTypes

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_datatypes_2fcard_2eproto__INCLUDED
