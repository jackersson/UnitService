// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datatypes/biometrics.proto

#ifndef PROTOBUF_datatypes_2fbiometrics_2eproto__INCLUDED
#define PROTOBUF_datatypes_2fbiometrics_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "datatypes/geometry.pb.h"
#include "datatypes/key.pb.h"
// @@protoc_insertion_point(includes)

namespace DataTypes {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_datatypes_2fbiometrics_2eproto();
void protobuf_AssignDesc_datatypes_2fbiometrics_2eproto();
void protobuf_ShutdownFile_datatypes_2fbiometrics_2eproto();

class FaceCharacteristic;
class Faces;
class FrameBytes;
class Match;
class Matches;

enum BioActionType {
  NoneActionType = 0,
  Enroll = 1,
  Identify = 2,
  Verify = 3,
  BioActionType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  BioActionType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool BioActionType_IsValid(int value);
const BioActionType BioActionType_MIN = NoneActionType;
const BioActionType BioActionType_MAX = Verify;
const int BioActionType_ARRAYSIZE = BioActionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* BioActionType_descriptor();
inline const ::std::string& BioActionType_Name(BioActionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    BioActionType_descriptor(), value);
}
inline bool BioActionType_Parse(
    const ::std::string& name, BioActionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BioActionType>(
    BioActionType_descriptor(), name, value);
}
enum BiometricType {
  UnspecifiedBio = 0,
  Facial = 1,
  Fingerprint = 2,
  Iris = 3,
  All = 4,
  BiometricType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  BiometricType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool BiometricType_IsValid(int value);
const BiometricType BiometricType_MIN = UnspecifiedBio;
const BiometricType BiometricType_MAX = All;
const int BiometricType_ARRAYSIZE = BiometricType_MAX + 1;

const ::google::protobuf::EnumDescriptor* BiometricType_descriptor();
inline const ::std::string& BiometricType_Name(BiometricType value) {
  return ::google::protobuf::internal::NameOfEnum(
    BiometricType_descriptor(), value);
}
inline bool BiometricType_Parse(
    const ::std::string& name, BiometricType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BiometricType>(
    BiometricType_descriptor(), name, value);
}
enum EyeType {
  Unspecified_Eye = 0,
  Left = 1,
  Right = 2,
  Both = 3,
  EyeType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EyeType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool EyeType_IsValid(int value);
const EyeType EyeType_MIN = Unspecified_Eye;
const EyeType EyeType_MAX = Both;
const int EyeType_ARRAYSIZE = EyeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EyeType_descriptor();
inline const ::std::string& EyeType_Name(EyeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EyeType_descriptor(), value);
}
inline bool EyeType_Parse(
    const ::std::string& name, EyeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EyeType>(
    EyeType_descriptor(), name, value);
}
enum Finger {
  Unspecified_Finger = 0,
  RightThumb = 1,
  LeftThumb = 2,
  RightIndex = 3,
  LeftIndex = 4,
  RightMiddle = 5,
  LeftMiddle = 6,
  RightRing = 7,
  LeftRing = 8,
  RightLittle = 9,
  LeftLittle = 10,
  Finger_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Finger_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Finger_IsValid(int value);
const Finger Finger_MIN = Unspecified_Finger;
const Finger Finger_MAX = LeftLittle;
const int Finger_ARRAYSIZE = Finger_MAX + 1;

const ::google::protobuf::EnumDescriptor* Finger_descriptor();
inline const ::std::string& Finger_Name(Finger value) {
  return ::google::protobuf::internal::NameOfEnum(
    Finger_descriptor(), value);
}
inline bool Finger_Parse(
    const ::std::string& name, Finger* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Finger>(
    Finger_descriptor(), name, value);
}
enum FacialIsoComplianceTemplate {
  Unspecified_IsoTemplate = 0,
  OnlyOneFaceVisible = 1,
  goodVerticalFacePosition = 2,
  horizontallyCenteredFace = 3,
  widthOfHead = 4,
  lengthOfHead = 5,
  widthOfHeadBestPractice = 6,
  lengthOfHeadBestPractice = 7,
  resolution = 8,
  resolutionBestPractice = 9,
  imageWidthToHeightBestPractice = 10,
  goodExposure = 11,
  goodGrayScaleProfile = 12,
  hasNaturalSkinColour = 13,
  noHotSpots = 14,
  isBackgroundUniformBestPractice = 15,
  isFrontal = 16,
  isFrontalBestPractice = 17,
  isLightingUniform = 18,
  eyesOpenBestPractice = 19,
  eyesGazeFrontalBestPractice = 20,
  eyesNotRedBestPractice = 21,
  noTintedGlasses = 22,
  isSharp = 23,
  mouthClosedBestPractice = 24,
  FacialIsoComplianceTemplate_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  FacialIsoComplianceTemplate_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool FacialIsoComplianceTemplate_IsValid(int value);
const FacialIsoComplianceTemplate FacialIsoComplianceTemplate_MIN = Unspecified_IsoTemplate;
const FacialIsoComplianceTemplate FacialIsoComplianceTemplate_MAX = mouthClosedBestPractice;
const int FacialIsoComplianceTemplate_ARRAYSIZE = FacialIsoComplianceTemplate_MAX + 1;

const ::google::protobuf::EnumDescriptor* FacialIsoComplianceTemplate_descriptor();
inline const ::std::string& FacialIsoComplianceTemplate_Name(FacialIsoComplianceTemplate value) {
  return ::google::protobuf::internal::NameOfEnum(
    FacialIsoComplianceTemplate_descriptor(), value);
}
inline bool FacialIsoComplianceTemplate_Parse(
    const ::std::string& name, FacialIsoComplianceTemplate* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FacialIsoComplianceTemplate>(
    FacialIsoComplianceTemplate_descriptor(), name, value);
}
// ===================================================================

class Faces : public ::google::protobuf::Message {
 public:
  Faces();
  virtual ~Faces();

  Faces(const Faces& from);

  inline Faces& operator=(const Faces& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faces& default_instance();

  void Swap(Faces* other);

  // implements Message ----------------------------------------------

  inline Faces* New() const { return New(NULL); }

  Faces* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faces& from);
  void MergeFrom(const Faces& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Faces* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .DataTypes.FaceCharacteristic Faces = 1;
  int faces_size() const;
  void clear_faces();
  static const int kFacesFieldNumber = 1;
  const ::DataTypes::FaceCharacteristic& faces(int index) const;
  ::DataTypes::FaceCharacteristic* mutable_faces(int index);
  ::DataTypes::FaceCharacteristic* add_faces();
  ::google::protobuf::RepeatedPtrField< ::DataTypes::FaceCharacteristic >*
      mutable_faces();
  const ::google::protobuf::RepeatedPtrField< ::DataTypes::FaceCharacteristic >&
      faces() const;

  // @@protoc_insertion_point(class_scope:DataTypes.Faces)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::DataTypes::FaceCharacteristic > faces_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_datatypes_2fbiometrics_2eproto();
  friend void protobuf_AssignDesc_datatypes_2fbiometrics_2eproto();
  friend void protobuf_ShutdownFile_datatypes_2fbiometrics_2eproto();

  void InitAsDefaultInstance();
  static Faces* default_instance_;
};
// -------------------------------------------------------------------

class FaceCharacteristic : public ::google::protobuf::Message {
 public:
  FaceCharacteristic();
  virtual ~FaceCharacteristic();

  FaceCharacteristic(const FaceCharacteristic& from);

  inline FaceCharacteristic& operator=(const FaceCharacteristic& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FaceCharacteristic& default_instance();

  void Swap(FaceCharacteristic* other);

  // implements Message ----------------------------------------------

  inline FaceCharacteristic* New() const { return New(NULL); }

  FaceCharacteristic* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FaceCharacteristic& from);
  void MergeFrom(const FaceCharacteristic& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FaceCharacteristic* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .DataTypes.Key id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::DataTypes::Key& id() const;
  ::DataTypes::Key* mutable_id();
  ::DataTypes::Key* release_id();
  void set_allocated_id(::DataTypes::Key* id);

  // optional .DataTypes.Box box = 2;
  bool has_box() const;
  void clear_box();
  static const int kBoxFieldNumber = 2;
  const ::DataTypes::Box& box() const;
  ::DataTypes::Box* mutable_box();
  ::DataTypes::Box* release_box();
  void set_allocated_box(::DataTypes::Box* box);

  // optional float confidence = 3;
  void clear_confidence();
  static const int kConfidenceFieldNumber = 3;
  float confidence() const;
  void set_confidence(float value);

  // optional .DataTypes.Key person_id = 4;
  bool has_person_id() const;
  void clear_person_id();
  static const int kPersonIdFieldNumber = 4;
  const ::DataTypes::Key& person_id() const;
  ::DataTypes::Key* mutable_person_id();
  ::DataTypes::Key* release_person_id();
  void set_allocated_person_id(::DataTypes::Key* person_id);

  // optional .DataTypes.Key photo_id = 5;
  bool has_photo_id() const;
  void clear_photo_id();
  static const int kPhotoIdFieldNumber = 5;
  const ::DataTypes::Key& photo_id() const;
  ::DataTypes::Key* mutable_photo_id();
  ::DataTypes::Key* release_photo_id();
  void set_allocated_photo_id(::DataTypes::Key* photo_id);

  // @@protoc_insertion_point(class_scope:DataTypes.FaceCharacteristic)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::DataTypes::Key* id_;
  ::DataTypes::Box* box_;
  ::DataTypes::Key* person_id_;
  ::DataTypes::Key* photo_id_;
  float confidence_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_datatypes_2fbiometrics_2eproto();
  friend void protobuf_AssignDesc_datatypes_2fbiometrics_2eproto();
  friend void protobuf_ShutdownFile_datatypes_2fbiometrics_2eproto();

  void InitAsDefaultInstance();
  static FaceCharacteristic* default_instance_;
};
// -------------------------------------------------------------------

class FrameBytes : public ::google::protobuf::Message {
 public:
  FrameBytes();
  virtual ~FrameBytes();

  FrameBytes(const FrameBytes& from);

  inline FrameBytes& operator=(const FrameBytes& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FrameBytes& default_instance();

  void Swap(FrameBytes* other);

  // implements Message ----------------------------------------------

  inline FrameBytes* New() const { return New(NULL); }

  FrameBytes* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FrameBytes& from);
  void MergeFrom(const FrameBytes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FrameBytes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes frame_data = 1;
  void clear_frame_data();
  static const int kFrameDataFieldNumber = 1;
  const ::std::string& frame_data() const;
  void set_frame_data(const ::std::string& value);
  void set_frame_data(const char* value);
  void set_frame_data(const void* value, size_t size);
  ::std::string* mutable_frame_data();
  ::std::string* release_frame_data();
  void set_allocated_frame_data(::std::string* frame_data);

  // repeated .DataTypes.FaceCharacteristic faces = 2;
  int faces_size() const;
  void clear_faces();
  static const int kFacesFieldNumber = 2;
  const ::DataTypes::FaceCharacteristic& faces(int index) const;
  ::DataTypes::FaceCharacteristic* mutable_faces(int index);
  ::DataTypes::FaceCharacteristic* add_faces();
  ::google::protobuf::RepeatedPtrField< ::DataTypes::FaceCharacteristic >*
      mutable_faces();
  const ::google::protobuf::RepeatedPtrField< ::DataTypes::FaceCharacteristic >&
      faces() const;

  // @@protoc_insertion_point(class_scope:DataTypes.FrameBytes)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr frame_data_;
  ::google::protobuf::RepeatedPtrField< ::DataTypes::FaceCharacteristic > faces_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_datatypes_2fbiometrics_2eproto();
  friend void protobuf_AssignDesc_datatypes_2fbiometrics_2eproto();
  friend void protobuf_ShutdownFile_datatypes_2fbiometrics_2eproto();

  void InitAsDefaultInstance();
  static FrameBytes* default_instance_;
};
// -------------------------------------------------------------------

class Match : public ::google::protobuf::Message {
 public:
  Match();
  virtual ~Match();

  Match(const Match& from);

  inline Match& operator=(const Match& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Match& default_instance();

  void Swap(Match* other);

  // implements Message ----------------------------------------------

  inline Match* New() const { return New(NULL); }

  Match* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Match& from);
  void MergeFrom(const Match& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Match* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .DataTypes.Key face_id = 1;
  bool has_face_id() const;
  void clear_face_id();
  static const int kFaceIdFieldNumber = 1;
  const ::DataTypes::Key& face_id() const;
  ::DataTypes::Key* mutable_face_id();
  ::DataTypes::Key* release_face_id();
  void set_allocated_face_id(::DataTypes::Key* face_id);

  // optional float match = 2;
  void clear_match();
  static const int kMatchFieldNumber = 2;
  float match() const;
  void set_match(float value);

  // @@protoc_insertion_point(class_scope:DataTypes.Match)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::DataTypes::Key* face_id_;
  float match_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_datatypes_2fbiometrics_2eproto();
  friend void protobuf_AssignDesc_datatypes_2fbiometrics_2eproto();
  friend void protobuf_ShutdownFile_datatypes_2fbiometrics_2eproto();

  void InitAsDefaultInstance();
  static Match* default_instance_;
};
// -------------------------------------------------------------------

class Matches : public ::google::protobuf::Message {
 public:
  Matches();
  virtual ~Matches();

  Matches(const Matches& from);

  inline Matches& operator=(const Matches& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Matches& default_instance();

  void Swap(Matches* other);

  // implements Message ----------------------------------------------

  inline Matches* New() const { return New(NULL); }

  Matches* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Matches& from);
  void MergeFrom(const Matches& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Matches* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .DataTypes.Key face_id = 1;
  bool has_face_id() const;
  void clear_face_id();
  static const int kFaceIdFieldNumber = 1;
  const ::DataTypes::Key& face_id() const;
  ::DataTypes::Key* mutable_face_id();
  ::DataTypes::Key* release_face_id();
  void set_allocated_face_id(::DataTypes::Key* face_id);

  // repeated .DataTypes.Match matches = 2;
  int matches_size() const;
  void clear_matches();
  static const int kMatchesFieldNumber = 2;
  const ::DataTypes::Match& matches(int index) const;
  ::DataTypes::Match* mutable_matches(int index);
  ::DataTypes::Match* add_matches();
  ::google::protobuf::RepeatedPtrField< ::DataTypes::Match >*
      mutable_matches();
  const ::google::protobuf::RepeatedPtrField< ::DataTypes::Match >&
      matches() const;

  // @@protoc_insertion_point(class_scope:DataTypes.Matches)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::DataTypes::Key* face_id_;
  ::google::protobuf::RepeatedPtrField< ::DataTypes::Match > matches_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_datatypes_2fbiometrics_2eproto();
  friend void protobuf_AssignDesc_datatypes_2fbiometrics_2eproto();
  friend void protobuf_ShutdownFile_datatypes_2fbiometrics_2eproto();

  void InitAsDefaultInstance();
  static Matches* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Faces

// repeated .DataTypes.FaceCharacteristic Faces = 1;
inline int Faces::faces_size() const {
  return faces_.size();
}
inline void Faces::clear_faces() {
  faces_.Clear();
}
inline const ::DataTypes::FaceCharacteristic& Faces::faces(int index) const {
  // @@protoc_insertion_point(field_get:DataTypes.Faces.Faces)
  return faces_.Get(index);
}
inline ::DataTypes::FaceCharacteristic* Faces::mutable_faces(int index) {
  // @@protoc_insertion_point(field_mutable:DataTypes.Faces.Faces)
  return faces_.Mutable(index);
}
inline ::DataTypes::FaceCharacteristic* Faces::add_faces() {
  // @@protoc_insertion_point(field_add:DataTypes.Faces.Faces)
  return faces_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::DataTypes::FaceCharacteristic >*
Faces::mutable_faces() {
  // @@protoc_insertion_point(field_mutable_list:DataTypes.Faces.Faces)
  return &faces_;
}
inline const ::google::protobuf::RepeatedPtrField< ::DataTypes::FaceCharacteristic >&
Faces::faces() const {
  // @@protoc_insertion_point(field_list:DataTypes.Faces.Faces)
  return faces_;
}

// -------------------------------------------------------------------

// FaceCharacteristic

// optional .DataTypes.Key id = 1;
inline bool FaceCharacteristic::has_id() const {
  return !_is_default_instance_ && id_ != NULL;
}
inline void FaceCharacteristic::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) delete id_;
  id_ = NULL;
}
inline const ::DataTypes::Key& FaceCharacteristic::id() const {
  // @@protoc_insertion_point(field_get:DataTypes.FaceCharacteristic.id)
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
inline ::DataTypes::Key* FaceCharacteristic::mutable_id() {
  
  if (id_ == NULL) {
    id_ = new ::DataTypes::Key;
  }
  // @@protoc_insertion_point(field_mutable:DataTypes.FaceCharacteristic.id)
  return id_;
}
inline ::DataTypes::Key* FaceCharacteristic::release_id() {
  // @@protoc_insertion_point(field_release:DataTypes.FaceCharacteristic.id)
  
  ::DataTypes::Key* temp = id_;
  id_ = NULL;
  return temp;
}
inline void FaceCharacteristic::set_allocated_id(::DataTypes::Key* id) {
  delete id_;
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:DataTypes.FaceCharacteristic.id)
}

// optional .DataTypes.Box box = 2;
inline bool FaceCharacteristic::has_box() const {
  return !_is_default_instance_ && box_ != NULL;
}
inline void FaceCharacteristic::clear_box() {
  if (GetArenaNoVirtual() == NULL && box_ != NULL) delete box_;
  box_ = NULL;
}
inline const ::DataTypes::Box& FaceCharacteristic::box() const {
  // @@protoc_insertion_point(field_get:DataTypes.FaceCharacteristic.box)
  return box_ != NULL ? *box_ : *default_instance_->box_;
}
inline ::DataTypes::Box* FaceCharacteristic::mutable_box() {
  
  if (box_ == NULL) {
    box_ = new ::DataTypes::Box;
  }
  // @@protoc_insertion_point(field_mutable:DataTypes.FaceCharacteristic.box)
  return box_;
}
inline ::DataTypes::Box* FaceCharacteristic::release_box() {
  // @@protoc_insertion_point(field_release:DataTypes.FaceCharacteristic.box)
  
  ::DataTypes::Box* temp = box_;
  box_ = NULL;
  return temp;
}
inline void FaceCharacteristic::set_allocated_box(::DataTypes::Box* box) {
  delete box_;
  box_ = box;
  if (box) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:DataTypes.FaceCharacteristic.box)
}

// optional float confidence = 3;
inline void FaceCharacteristic::clear_confidence() {
  confidence_ = 0;
}
inline float FaceCharacteristic::confidence() const {
  // @@protoc_insertion_point(field_get:DataTypes.FaceCharacteristic.confidence)
  return confidence_;
}
inline void FaceCharacteristic::set_confidence(float value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:DataTypes.FaceCharacteristic.confidence)
}

// optional .DataTypes.Key person_id = 4;
inline bool FaceCharacteristic::has_person_id() const {
  return !_is_default_instance_ && person_id_ != NULL;
}
inline void FaceCharacteristic::clear_person_id() {
  if (GetArenaNoVirtual() == NULL && person_id_ != NULL) delete person_id_;
  person_id_ = NULL;
}
inline const ::DataTypes::Key& FaceCharacteristic::person_id() const {
  // @@protoc_insertion_point(field_get:DataTypes.FaceCharacteristic.person_id)
  return person_id_ != NULL ? *person_id_ : *default_instance_->person_id_;
}
inline ::DataTypes::Key* FaceCharacteristic::mutable_person_id() {
  
  if (person_id_ == NULL) {
    person_id_ = new ::DataTypes::Key;
  }
  // @@protoc_insertion_point(field_mutable:DataTypes.FaceCharacteristic.person_id)
  return person_id_;
}
inline ::DataTypes::Key* FaceCharacteristic::release_person_id() {
  // @@protoc_insertion_point(field_release:DataTypes.FaceCharacteristic.person_id)
  
  ::DataTypes::Key* temp = person_id_;
  person_id_ = NULL;
  return temp;
}
inline void FaceCharacteristic::set_allocated_person_id(::DataTypes::Key* person_id) {
  delete person_id_;
  person_id_ = person_id;
  if (person_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:DataTypes.FaceCharacteristic.person_id)
}

// optional .DataTypes.Key photo_id = 5;
inline bool FaceCharacteristic::has_photo_id() const {
  return !_is_default_instance_ && photo_id_ != NULL;
}
inline void FaceCharacteristic::clear_photo_id() {
  if (GetArenaNoVirtual() == NULL && photo_id_ != NULL) delete photo_id_;
  photo_id_ = NULL;
}
inline const ::DataTypes::Key& FaceCharacteristic::photo_id() const {
  // @@protoc_insertion_point(field_get:DataTypes.FaceCharacteristic.photo_id)
  return photo_id_ != NULL ? *photo_id_ : *default_instance_->photo_id_;
}
inline ::DataTypes::Key* FaceCharacteristic::mutable_photo_id() {
  
  if (photo_id_ == NULL) {
    photo_id_ = new ::DataTypes::Key;
  }
  // @@protoc_insertion_point(field_mutable:DataTypes.FaceCharacteristic.photo_id)
  return photo_id_;
}
inline ::DataTypes::Key* FaceCharacteristic::release_photo_id() {
  // @@protoc_insertion_point(field_release:DataTypes.FaceCharacteristic.photo_id)
  
  ::DataTypes::Key* temp = photo_id_;
  photo_id_ = NULL;
  return temp;
}
inline void FaceCharacteristic::set_allocated_photo_id(::DataTypes::Key* photo_id) {
  delete photo_id_;
  photo_id_ = photo_id;
  if (photo_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:DataTypes.FaceCharacteristic.photo_id)
}

// -------------------------------------------------------------------

// FrameBytes

// optional bytes frame_data = 1;
inline void FrameBytes::clear_frame_data() {
  frame_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FrameBytes::frame_data() const {
  // @@protoc_insertion_point(field_get:DataTypes.FrameBytes.frame_data)
  return frame_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FrameBytes::set_frame_data(const ::std::string& value) {
  
  frame_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DataTypes.FrameBytes.frame_data)
}
inline void FrameBytes::set_frame_data(const char* value) {
  
  frame_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DataTypes.FrameBytes.frame_data)
}
inline void FrameBytes::set_frame_data(const void* value, size_t size) {
  
  frame_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DataTypes.FrameBytes.frame_data)
}
inline ::std::string* FrameBytes::mutable_frame_data() {
  
  // @@protoc_insertion_point(field_mutable:DataTypes.FrameBytes.frame_data)
  return frame_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FrameBytes::release_frame_data() {
  // @@protoc_insertion_point(field_release:DataTypes.FrameBytes.frame_data)
  
  return frame_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FrameBytes::set_allocated_frame_data(::std::string* frame_data) {
  if (frame_data != NULL) {
    
  } else {
    
  }
  frame_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), frame_data);
  // @@protoc_insertion_point(field_set_allocated:DataTypes.FrameBytes.frame_data)
}

// repeated .DataTypes.FaceCharacteristic faces = 2;
inline int FrameBytes::faces_size() const {
  return faces_.size();
}
inline void FrameBytes::clear_faces() {
  faces_.Clear();
}
inline const ::DataTypes::FaceCharacteristic& FrameBytes::faces(int index) const {
  // @@protoc_insertion_point(field_get:DataTypes.FrameBytes.faces)
  return faces_.Get(index);
}
inline ::DataTypes::FaceCharacteristic* FrameBytes::mutable_faces(int index) {
  // @@protoc_insertion_point(field_mutable:DataTypes.FrameBytes.faces)
  return faces_.Mutable(index);
}
inline ::DataTypes::FaceCharacteristic* FrameBytes::add_faces() {
  // @@protoc_insertion_point(field_add:DataTypes.FrameBytes.faces)
  return faces_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::DataTypes::FaceCharacteristic >*
FrameBytes::mutable_faces() {
  // @@protoc_insertion_point(field_mutable_list:DataTypes.FrameBytes.faces)
  return &faces_;
}
inline const ::google::protobuf::RepeatedPtrField< ::DataTypes::FaceCharacteristic >&
FrameBytes::faces() const {
  // @@protoc_insertion_point(field_list:DataTypes.FrameBytes.faces)
  return faces_;
}

// -------------------------------------------------------------------

// Match

// optional .DataTypes.Key face_id = 1;
inline bool Match::has_face_id() const {
  return !_is_default_instance_ && face_id_ != NULL;
}
inline void Match::clear_face_id() {
  if (GetArenaNoVirtual() == NULL && face_id_ != NULL) delete face_id_;
  face_id_ = NULL;
}
inline const ::DataTypes::Key& Match::face_id() const {
  // @@protoc_insertion_point(field_get:DataTypes.Match.face_id)
  return face_id_ != NULL ? *face_id_ : *default_instance_->face_id_;
}
inline ::DataTypes::Key* Match::mutable_face_id() {
  
  if (face_id_ == NULL) {
    face_id_ = new ::DataTypes::Key;
  }
  // @@protoc_insertion_point(field_mutable:DataTypes.Match.face_id)
  return face_id_;
}
inline ::DataTypes::Key* Match::release_face_id() {
  // @@protoc_insertion_point(field_release:DataTypes.Match.face_id)
  
  ::DataTypes::Key* temp = face_id_;
  face_id_ = NULL;
  return temp;
}
inline void Match::set_allocated_face_id(::DataTypes::Key* face_id) {
  delete face_id_;
  face_id_ = face_id;
  if (face_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:DataTypes.Match.face_id)
}

// optional float match = 2;
inline void Match::clear_match() {
  match_ = 0;
}
inline float Match::match() const {
  // @@protoc_insertion_point(field_get:DataTypes.Match.match)
  return match_;
}
inline void Match::set_match(float value) {
  
  match_ = value;
  // @@protoc_insertion_point(field_set:DataTypes.Match.match)
}

// -------------------------------------------------------------------

// Matches

// optional .DataTypes.Key face_id = 1;
inline bool Matches::has_face_id() const {
  return !_is_default_instance_ && face_id_ != NULL;
}
inline void Matches::clear_face_id() {
  if (GetArenaNoVirtual() == NULL && face_id_ != NULL) delete face_id_;
  face_id_ = NULL;
}
inline const ::DataTypes::Key& Matches::face_id() const {
  // @@protoc_insertion_point(field_get:DataTypes.Matches.face_id)
  return face_id_ != NULL ? *face_id_ : *default_instance_->face_id_;
}
inline ::DataTypes::Key* Matches::mutable_face_id() {
  
  if (face_id_ == NULL) {
    face_id_ = new ::DataTypes::Key;
  }
  // @@protoc_insertion_point(field_mutable:DataTypes.Matches.face_id)
  return face_id_;
}
inline ::DataTypes::Key* Matches::release_face_id() {
  // @@protoc_insertion_point(field_release:DataTypes.Matches.face_id)
  
  ::DataTypes::Key* temp = face_id_;
  face_id_ = NULL;
  return temp;
}
inline void Matches::set_allocated_face_id(::DataTypes::Key* face_id) {
  delete face_id_;
  face_id_ = face_id;
  if (face_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:DataTypes.Matches.face_id)
}

// repeated .DataTypes.Match matches = 2;
inline int Matches::matches_size() const {
  return matches_.size();
}
inline void Matches::clear_matches() {
  matches_.Clear();
}
inline const ::DataTypes::Match& Matches::matches(int index) const {
  // @@protoc_insertion_point(field_get:DataTypes.Matches.matches)
  return matches_.Get(index);
}
inline ::DataTypes::Match* Matches::mutable_matches(int index) {
  // @@protoc_insertion_point(field_mutable:DataTypes.Matches.matches)
  return matches_.Mutable(index);
}
inline ::DataTypes::Match* Matches::add_matches() {
  // @@protoc_insertion_point(field_add:DataTypes.Matches.matches)
  return matches_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::DataTypes::Match >*
Matches::mutable_matches() {
  // @@protoc_insertion_point(field_mutable_list:DataTypes.Matches.matches)
  return &matches_;
}
inline const ::google::protobuf::RepeatedPtrField< ::DataTypes::Match >&
Matches::matches() const {
  // @@protoc_insertion_point(field_list:DataTypes.Matches.matches)
  return matches_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace DataTypes

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::DataTypes::BioActionType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DataTypes::BioActionType>() {
  return ::DataTypes::BioActionType_descriptor();
}
template <> struct is_proto_enum< ::DataTypes::BiometricType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DataTypes::BiometricType>() {
  return ::DataTypes::BiometricType_descriptor();
}
template <> struct is_proto_enum< ::DataTypes::EyeType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DataTypes::EyeType>() {
  return ::DataTypes::EyeType_descriptor();
}
template <> struct is_proto_enum< ::DataTypes::Finger> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DataTypes::Finger>() {
  return ::DataTypes::Finger_descriptor();
}
template <> struct is_proto_enum< ::DataTypes::FacialIsoComplianceTemplate> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DataTypes::FacialIsoComplianceTemplate>() {
  return ::DataTypes::FacialIsoComplianceTemplate_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_datatypes_2fbiometrics_2eproto__INCLUDED
