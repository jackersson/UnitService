// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datatypes/photo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "datatypes/photo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace DataTypes {

namespace {

const ::google::protobuf::Descriptor* Photo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Photo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Purpose_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_datatypes_2fphoto_2eproto() {
  protobuf_AddDesc_datatypes_2fphoto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "datatypes/photo.proto");
  GOOGLE_CHECK(file != NULL);
  Photo_descriptor_ = file->message_type(0);
  static const int Photo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Photo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Photo, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Photo, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Photo, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Photo, purpose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Photo, biometric_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Photo, owner_id_),
  };
  Photo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Photo_descriptor_,
      Photo::default_instance_,
      Photo_offsets_,
      -1,
      -1,
      -1,
      sizeof(Photo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Photo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Photo, _is_default_instance_));
  Purpose_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_datatypes_2fphoto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Photo_descriptor_, &Photo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_datatypes_2fphoto_2eproto() {
  delete Photo::default_instance_;
  delete Photo_reflection_;
}

void protobuf_AddDesc_datatypes_2fphoto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DataTypes::protobuf_AddDesc_datatypes_2fbiometrics_2eproto();
  ::DataTypes::protobuf_AddDesc_datatypes_2fkey_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025datatypes/photo.proto\022\tDataTypes\032\032data"
    "types/biometrics.proto\032\023datatypes/key.pr"
    "oto\"\310\001\n\005Photo\022\032\n\002id\030\001 \001(\0132\016.DataTypes.Ke"
    "y\022\013\n\003url\030\002 \001(\t\022\r\n\005width\030\003 \001(\005\022\016\n\006height\030"
    "\004 \001(\005\022#\n\007purpose\030\005 \001(\0162\022.DataTypes.Purpo"
    "se\0220\n\016biometric_type\030\006 \001(\0162\030.DataTypes.B"
    "iometricType\022 \n\010owner_id\030\007 \001(\0132\016.DataTyp"
    "es.Key*9\n\007Purpose\022\017\n\013NonePurpose\020\000\022\r\n\tTh"
    "umbnail\020\001\022\016\n\nPopulation\020\002BJ\n\007ex.grpcZ9gi"
    "thub.com/Enebra/ServiceCoordinator/grpc/"
    "datatypes/photo\242\002\003RTGb\006proto3", 429);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "datatypes/photo.proto", &protobuf_RegisterTypes);
  Photo::default_instance_ = new Photo();
  Photo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_datatypes_2fphoto_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_datatypes_2fphoto_2eproto {
  StaticDescriptorInitializer_datatypes_2fphoto_2eproto() {
    protobuf_AddDesc_datatypes_2fphoto_2eproto();
  }
} static_descriptor_initializer_datatypes_2fphoto_2eproto_;
const ::google::protobuf::EnumDescriptor* Purpose_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Purpose_descriptor_;
}
bool Purpose_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Photo::kIdFieldNumber;
const int Photo::kUrlFieldNumber;
const int Photo::kWidthFieldNumber;
const int Photo::kHeightFieldNumber;
const int Photo::kPurposeFieldNumber;
const int Photo::kBiometricTypeFieldNumber;
const int Photo::kOwnerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Photo::Photo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DataTypes.Photo)
}

void Photo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  id_ = const_cast< ::DataTypes::Key*>(&::DataTypes::Key::default_instance());
  owner_id_ = const_cast< ::DataTypes::Key*>(&::DataTypes::Key::default_instance());
}

Photo::Photo(const Photo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DataTypes.Photo)
}

void Photo::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = NULL;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  width_ = 0;
  height_ = 0;
  purpose_ = 0;
  biometric_type_ = 0;
  owner_id_ = NULL;
}

Photo::~Photo() {
  // @@protoc_insertion_point(destructor:DataTypes.Photo)
  SharedDtor();
}

void Photo::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete id_;
    delete owner_id_;
  }
}

void Photo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Photo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Photo_descriptor_;
}

const Photo& Photo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datatypes_2fphoto_2eproto();
  return *default_instance_;
}

Photo* Photo::default_instance_ = NULL;

Photo* Photo::New(::google::protobuf::Arena* arena) const {
  Photo* n = new Photo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Photo::Clear() {
// @@protoc_insertion_point(message_clear_start:DataTypes.Photo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Photo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Photo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(width_, biometric_type_);
  if (GetArenaNoVirtual() == NULL && id_ != NULL) delete id_;
  id_ = NULL;
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && owner_id_ != NULL) delete owner_id_;
  owner_id_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool Photo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DataTypes.Photo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DataTypes.Key id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_url;
        break;
      }

      // optional string url = 2;
      case 2: {
        if (tag == 18) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DataTypes.Photo.url"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_width;
        break;
      }

      // optional int32 width = 3;
      case 3: {
        if (tag == 24) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_height;
        break;
      }

      // optional int32 height = 4;
      case 4: {
        if (tag == 32) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_purpose;
        break;
      }

      // optional .DataTypes.Purpose purpose = 5;
      case 5: {
        if (tag == 40) {
         parse_purpose:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_purpose(static_cast< ::DataTypes::Purpose >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_biometric_type;
        break;
      }

      // optional .DataTypes.BiometricType biometric_type = 6;
      case 6: {
        if (tag == 48) {
         parse_biometric_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_biometric_type(static_cast< ::DataTypes::BiometricType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_owner_id;
        break;
      }

      // optional .DataTypes.Key owner_id = 7;
      case 7: {
        if (tag == 58) {
         parse_owner_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_owner_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DataTypes.Photo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DataTypes.Photo)
  return false;
#undef DO_
}

void Photo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DataTypes.Photo)
  // optional .DataTypes.Key id = 1;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  // optional string url = 2;
  if (this->url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DataTypes.Photo.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url(), output);
  }

  // optional int32 width = 3;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->width(), output);
  }

  // optional int32 height = 4;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->height(), output);
  }

  // optional .DataTypes.Purpose purpose = 5;
  if (this->purpose() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->purpose(), output);
  }

  // optional .DataTypes.BiometricType biometric_type = 6;
  if (this->biometric_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->biometric_type(), output);
  }

  // optional .DataTypes.Key owner_id = 7;
  if (this->has_owner_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->owner_id_, output);
  }

  // @@protoc_insertion_point(serialize_end:DataTypes.Photo)
}

::google::protobuf::uint8* Photo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DataTypes.Photo)
  // optional .DataTypes.Key id = 1;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->id_, target);
  }

  // optional string url = 2;
  if (this->url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DataTypes.Photo.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }

  // optional int32 width = 3;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->width(), target);
  }

  // optional int32 height = 4;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->height(), target);
  }

  // optional .DataTypes.Purpose purpose = 5;
  if (this->purpose() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->purpose(), target);
  }

  // optional .DataTypes.BiometricType biometric_type = 6;
  if (this->biometric_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->biometric_type(), target);
  }

  // optional .DataTypes.Key owner_id = 7;
  if (this->has_owner_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, *this->owner_id_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:DataTypes.Photo)
  return target;
}

int Photo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:DataTypes.Photo)
  int total_size = 0;

  // optional .DataTypes.Key id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->id_);
  }

  // optional string url = 2;
  if (this->url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  // optional int32 width = 3;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());
  }

  // optional int32 height = 4;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());
  }

  // optional .DataTypes.Purpose purpose = 5;
  if (this->purpose() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->purpose());
  }

  // optional .DataTypes.BiometricType biometric_type = 6;
  if (this->biometric_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->biometric_type());
  }

  // optional .DataTypes.Key owner_id = 7;
  if (this->has_owner_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->owner_id_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Photo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DataTypes.Photo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Photo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Photo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DataTypes.Photo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DataTypes.Photo)
    MergeFrom(*source);
  }
}

void Photo::MergeFrom(const Photo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DataTypes.Photo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_id()) {
    mutable_id()->::DataTypes::Key::MergeFrom(from.id());
  }
  if (from.url().size() > 0) {

    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.purpose() != 0) {
    set_purpose(from.purpose());
  }
  if (from.biometric_type() != 0) {
    set_biometric_type(from.biometric_type());
  }
  if (from.has_owner_id()) {
    mutable_owner_id()->::DataTypes::Key::MergeFrom(from.owner_id());
  }
}

void Photo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DataTypes.Photo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Photo::CopyFrom(const Photo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DataTypes.Photo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Photo::IsInitialized() const {

  return true;
}

void Photo::Swap(Photo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Photo::InternalSwap(Photo* other) {
  std::swap(id_, other->id_);
  url_.Swap(&other->url_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(purpose_, other->purpose_);
  std::swap(biometric_type_, other->biometric_type_);
  std::swap(owner_id_, other->owner_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Photo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Photo_descriptor_;
  metadata.reflection = Photo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Photo

// optional .DataTypes.Key id = 1;
bool Photo::has_id() const {
  return !_is_default_instance_ && id_ != NULL;
}
void Photo::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) delete id_;
  id_ = NULL;
}
const ::DataTypes::Key& Photo::id() const {
  // @@protoc_insertion_point(field_get:DataTypes.Photo.id)
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
::DataTypes::Key* Photo::mutable_id() {
  
  if (id_ == NULL) {
    id_ = new ::DataTypes::Key;
  }
  // @@protoc_insertion_point(field_mutable:DataTypes.Photo.id)
  return id_;
}
::DataTypes::Key* Photo::release_id() {
  // @@protoc_insertion_point(field_release:DataTypes.Photo.id)
  
  ::DataTypes::Key* temp = id_;
  id_ = NULL;
  return temp;
}
void Photo::set_allocated_id(::DataTypes::Key* id) {
  delete id_;
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:DataTypes.Photo.id)
}

// optional string url = 2;
void Photo::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Photo::url() const {
  // @@protoc_insertion_point(field_get:DataTypes.Photo.url)
  return url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Photo::set_url(const ::std::string& value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DataTypes.Photo.url)
}
 void Photo::set_url(const char* value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DataTypes.Photo.url)
}
 void Photo::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DataTypes.Photo.url)
}
 ::std::string* Photo::mutable_url() {
  
  // @@protoc_insertion_point(field_mutable:DataTypes.Photo.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Photo::release_url() {
  // @@protoc_insertion_point(field_release:DataTypes.Photo.url)
  
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Photo::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:DataTypes.Photo.url)
}

// optional int32 width = 3;
void Photo::clear_width() {
  width_ = 0;
}
 ::google::protobuf::int32 Photo::width() const {
  // @@protoc_insertion_point(field_get:DataTypes.Photo.width)
  return width_;
}
 void Photo::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:DataTypes.Photo.width)
}

// optional int32 height = 4;
void Photo::clear_height() {
  height_ = 0;
}
 ::google::protobuf::int32 Photo::height() const {
  // @@protoc_insertion_point(field_get:DataTypes.Photo.height)
  return height_;
}
 void Photo::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:DataTypes.Photo.height)
}

// optional .DataTypes.Purpose purpose = 5;
void Photo::clear_purpose() {
  purpose_ = 0;
}
 ::DataTypes::Purpose Photo::purpose() const {
  // @@protoc_insertion_point(field_get:DataTypes.Photo.purpose)
  return static_cast< ::DataTypes::Purpose >(purpose_);
}
 void Photo::set_purpose(::DataTypes::Purpose value) {
  
  purpose_ = value;
  // @@protoc_insertion_point(field_set:DataTypes.Photo.purpose)
}

// optional .DataTypes.BiometricType biometric_type = 6;
void Photo::clear_biometric_type() {
  biometric_type_ = 0;
}
 ::DataTypes::BiometricType Photo::biometric_type() const {
  // @@protoc_insertion_point(field_get:DataTypes.Photo.biometric_type)
  return static_cast< ::DataTypes::BiometricType >(biometric_type_);
}
 void Photo::set_biometric_type(::DataTypes::BiometricType value) {
  
  biometric_type_ = value;
  // @@protoc_insertion_point(field_set:DataTypes.Photo.biometric_type)
}

// optional .DataTypes.Key owner_id = 7;
bool Photo::has_owner_id() const {
  return !_is_default_instance_ && owner_id_ != NULL;
}
void Photo::clear_owner_id() {
  if (GetArenaNoVirtual() == NULL && owner_id_ != NULL) delete owner_id_;
  owner_id_ = NULL;
}
const ::DataTypes::Key& Photo::owner_id() const {
  // @@protoc_insertion_point(field_get:DataTypes.Photo.owner_id)
  return owner_id_ != NULL ? *owner_id_ : *default_instance_->owner_id_;
}
::DataTypes::Key* Photo::mutable_owner_id() {
  
  if (owner_id_ == NULL) {
    owner_id_ = new ::DataTypes::Key;
  }
  // @@protoc_insertion_point(field_mutable:DataTypes.Photo.owner_id)
  return owner_id_;
}
::DataTypes::Key* Photo::release_owner_id() {
  // @@protoc_insertion_point(field_release:DataTypes.Photo.owner_id)
  
  ::DataTypes::Key* temp = owner_id_;
  owner_id_ = NULL;
  return temp;
}
void Photo::set_allocated_owner_id(::DataTypes::Key* owner_id) {
  delete owner_id_;
  owner_id_ = owner_id;
  if (owner_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:DataTypes.Photo.owner_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace DataTypes

// @@protoc_insertion_point(global_scope)
