// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datatypes/person.proto

#ifndef PROTOBUF_datatypes_2fperson_2eproto__INCLUDED
#define PROTOBUF_datatypes_2fperson_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "datatypes/card.pb.h"
#include "datatypes/photo.pb.h"
#include "datatypes/key.pb.h"
// @@protoc_insertion_point(includes)

namespace DataTypes {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_datatypes_2fperson_2eproto();
void protobuf_AssignDesc_datatypes_2fperson_2eproto();
void protobuf_ShutdownFile_datatypes_2fperson_2eproto();

class Person;

enum Gender {
  Gender_Unspecified = 0,
  Male = 1,
  Female = 2,
  Gender_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Gender_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Gender_IsValid(int value);
const Gender Gender_MIN = Gender_Unspecified;
const Gender Gender_MAX = Female;
const int Gender_ARRAYSIZE = Gender_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gender_descriptor();
inline const ::std::string& Gender_Name(Gender value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gender_descriptor(), value);
}
inline bool Gender_Parse(
    const ::std::string& name, Gender* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gender>(
    Gender_descriptor(), name, value);
}
enum Rights {
  Rights_Unspecified = 0,
  Custom = 1,
  Operator = 2,
  Manager = 3,
  Supervisor = 4,
  Rights_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Rights_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Rights_IsValid(int value);
const Rights Rights_MIN = Rights_Unspecified;
const Rights Rights_MAX = Supervisor;
const int Rights_ARRAYSIZE = Rights_MAX + 1;

const ::google::protobuf::EnumDescriptor* Rights_descriptor();
inline const ::std::string& Rights_Name(Rights value) {
  return ::google::protobuf::internal::NameOfEnum(
    Rights_descriptor(), value);
}
inline bool Rights_Parse(
    const ::std::string& name, Rights* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Rights>(
    Rights_descriptor(), name, value);
}
// ===================================================================

class Person : public ::google::protobuf::Message {
 public:
  Person();
  virtual ~Person();

  Person(const Person& from);

  inline Person& operator=(const Person& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Person& default_instance();

  void Swap(Person* other);

  // implements Message ----------------------------------------------

  inline Person* New() const { return New(NULL); }

  Person* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Person& from);
  void MergeFrom(const Person& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Person* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .DataTypes.Key id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::DataTypes::Key& id() const;
  ::DataTypes::Key* mutable_id();
  ::DataTypes::Key* release_id();
  void set_allocated_id(::DataTypes::Key* id);

  // optional string first_name = 2;
  void clear_first_name();
  static const int kFirstNameFieldNumber = 2;
  const ::std::string& first_name() const;
  void set_first_name(const ::std::string& value);
  void set_first_name(const char* value);
  void set_first_name(const char* value, size_t size);
  ::std::string* mutable_first_name();
  ::std::string* release_first_name();
  void set_allocated_first_name(::std::string* first_name);

  // optional string last_name = 3;
  void clear_last_name();
  static const int kLastNameFieldNumber = 3;
  const ::std::string& last_name() const;
  void set_last_name(const ::std::string& value);
  void set_last_name(const char* value);
  void set_last_name(const char* value, size_t size);
  ::std::string* mutable_last_name();
  ::std::string* release_last_name();
  void set_allocated_last_name(::std::string* last_name);

  // repeated .DataTypes.Photo photos = 4;
  int photos_size() const;
  void clear_photos();
  static const int kPhotosFieldNumber = 4;
  const ::DataTypes::Photo& photos(int index) const;
  ::DataTypes::Photo* mutable_photos(int index);
  ::DataTypes::Photo* add_photos();
  ::google::protobuf::RepeatedPtrField< ::DataTypes::Photo >*
      mutable_photos();
  const ::google::protobuf::RepeatedPtrField< ::DataTypes::Photo >&
      photos() const;

  // repeated .DataTypes.Card cards = 5;
  int cards_size() const;
  void clear_cards();
  static const int kCardsFieldNumber = 5;
  const ::DataTypes::Card& cards(int index) const;
  ::DataTypes::Card* mutable_cards(int index);
  ::DataTypes::Card* add_cards();
  ::google::protobuf::RepeatedPtrField< ::DataTypes::Card >*
      mutable_cards();
  const ::google::protobuf::RepeatedPtrField< ::DataTypes::Card >&
      cards() const;

  // @@protoc_insertion_point(class_scope:DataTypes.Person)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::DataTypes::Key* id_;
  ::google::protobuf::internal::ArenaStringPtr first_name_;
  ::google::protobuf::internal::ArenaStringPtr last_name_;
  ::google::protobuf::RepeatedPtrField< ::DataTypes::Photo > photos_;
  ::google::protobuf::RepeatedPtrField< ::DataTypes::Card > cards_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_datatypes_2fperson_2eproto();
  friend void protobuf_AssignDesc_datatypes_2fperson_2eproto();
  friend void protobuf_ShutdownFile_datatypes_2fperson_2eproto();

  void InitAsDefaultInstance();
  static Person* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Person

// optional .DataTypes.Key id = 1;
inline bool Person::has_id() const {
  return !_is_default_instance_ && id_ != NULL;
}
inline void Person::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) delete id_;
  id_ = NULL;
}
inline const ::DataTypes::Key& Person::id() const {
  // @@protoc_insertion_point(field_get:DataTypes.Person.id)
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
inline ::DataTypes::Key* Person::mutable_id() {
  
  if (id_ == NULL) {
    id_ = new ::DataTypes::Key;
  }
  // @@protoc_insertion_point(field_mutable:DataTypes.Person.id)
  return id_;
}
inline ::DataTypes::Key* Person::release_id() {
  // @@protoc_insertion_point(field_release:DataTypes.Person.id)
  
  ::DataTypes::Key* temp = id_;
  id_ = NULL;
  return temp;
}
inline void Person::set_allocated_id(::DataTypes::Key* id) {
  delete id_;
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:DataTypes.Person.id)
}

// optional string first_name = 2;
inline void Person::clear_first_name() {
  first_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Person::first_name() const {
  // @@protoc_insertion_point(field_get:DataTypes.Person.first_name)
  return first_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Person::set_first_name(const ::std::string& value) {
  
  first_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DataTypes.Person.first_name)
}
inline void Person::set_first_name(const char* value) {
  
  first_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DataTypes.Person.first_name)
}
inline void Person::set_first_name(const char* value, size_t size) {
  
  first_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DataTypes.Person.first_name)
}
inline ::std::string* Person::mutable_first_name() {
  
  // @@protoc_insertion_point(field_mutable:DataTypes.Person.first_name)
  return first_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Person::release_first_name() {
  // @@protoc_insertion_point(field_release:DataTypes.Person.first_name)
  
  return first_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Person::set_allocated_first_name(::std::string* first_name) {
  if (first_name != NULL) {
    
  } else {
    
  }
  first_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), first_name);
  // @@protoc_insertion_point(field_set_allocated:DataTypes.Person.first_name)
}

// optional string last_name = 3;
inline void Person::clear_last_name() {
  last_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Person::last_name() const {
  // @@protoc_insertion_point(field_get:DataTypes.Person.last_name)
  return last_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Person::set_last_name(const ::std::string& value) {
  
  last_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DataTypes.Person.last_name)
}
inline void Person::set_last_name(const char* value) {
  
  last_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DataTypes.Person.last_name)
}
inline void Person::set_last_name(const char* value, size_t size) {
  
  last_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DataTypes.Person.last_name)
}
inline ::std::string* Person::mutable_last_name() {
  
  // @@protoc_insertion_point(field_mutable:DataTypes.Person.last_name)
  return last_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Person::release_last_name() {
  // @@protoc_insertion_point(field_release:DataTypes.Person.last_name)
  
  return last_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Person::set_allocated_last_name(::std::string* last_name) {
  if (last_name != NULL) {
    
  } else {
    
  }
  last_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), last_name);
  // @@protoc_insertion_point(field_set_allocated:DataTypes.Person.last_name)
}

// repeated .DataTypes.Photo photos = 4;
inline int Person::photos_size() const {
  return photos_.size();
}
inline void Person::clear_photos() {
  photos_.Clear();
}
inline const ::DataTypes::Photo& Person::photos(int index) const {
  // @@protoc_insertion_point(field_get:DataTypes.Person.photos)
  return photos_.Get(index);
}
inline ::DataTypes::Photo* Person::mutable_photos(int index) {
  // @@protoc_insertion_point(field_mutable:DataTypes.Person.photos)
  return photos_.Mutable(index);
}
inline ::DataTypes::Photo* Person::add_photos() {
  // @@protoc_insertion_point(field_add:DataTypes.Person.photos)
  return photos_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::DataTypes::Photo >*
Person::mutable_photos() {
  // @@protoc_insertion_point(field_mutable_list:DataTypes.Person.photos)
  return &photos_;
}
inline const ::google::protobuf::RepeatedPtrField< ::DataTypes::Photo >&
Person::photos() const {
  // @@protoc_insertion_point(field_list:DataTypes.Person.photos)
  return photos_;
}

// repeated .DataTypes.Card cards = 5;
inline int Person::cards_size() const {
  return cards_.size();
}
inline void Person::clear_cards() {
  cards_.Clear();
}
inline const ::DataTypes::Card& Person::cards(int index) const {
  // @@protoc_insertion_point(field_get:DataTypes.Person.cards)
  return cards_.Get(index);
}
inline ::DataTypes::Card* Person::mutable_cards(int index) {
  // @@protoc_insertion_point(field_mutable:DataTypes.Person.cards)
  return cards_.Mutable(index);
}
inline ::DataTypes::Card* Person::add_cards() {
  // @@protoc_insertion_point(field_add:DataTypes.Person.cards)
  return cards_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::DataTypes::Card >*
Person::mutable_cards() {
  // @@protoc_insertion_point(field_mutable_list:DataTypes.Person.cards)
  return &cards_;
}
inline const ::google::protobuf::RepeatedPtrField< ::DataTypes::Card >&
Person::cards() const {
  // @@protoc_insertion_point(field_list:DataTypes.Person.cards)
  return cards_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace DataTypes

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::DataTypes::Gender> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DataTypes::Gender>() {
  return ::DataTypes::Gender_descriptor();
}
template <> struct is_proto_enum< ::DataTypes::Rights> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DataTypes::Rights>() {
  return ::DataTypes::Rights_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_datatypes_2fperson_2eproto__INCLUDED
