// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: services/coordinator_service.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "services/coordinator_service.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Services {

namespace {

const ::google::protobuf::Descriptor* HeartbeatMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeartbeatMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ServiceType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_services_2fcoordinator_5fservice_2eproto() {
  protobuf_AddDesc_services_2fcoordinator_5fservice_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "services/coordinator_service.proto");
  GOOGLE_CHECK(file != NULL);
  HeartbeatMessage_descriptor_ = file->message_type(0);
  static const int HeartbeatMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatMessage, service_id_),
  };
  HeartbeatMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HeartbeatMessage_descriptor_,
      HeartbeatMessage::default_instance_,
      HeartbeatMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(HeartbeatMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatMessage, _is_default_instance_));
  ServiceType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_services_2fcoordinator_5fservice_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HeartbeatMessage_descriptor_, &HeartbeatMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_services_2fcoordinator_5fservice_2eproto() {
  delete HeartbeatMessage::default_instance_;
  delete HeartbeatMessage_reflection_;
}

void protobuf_AddDesc_services_2fcoordinator_5fservice_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fempty_2eproto();
  ::DataTypes::protobuf_AddDesc_datatypes_2funit_2eproto();
  ::DataTypes::protobuf_AddDesc_datatypes_2fdata_2eproto();
  ::DataTypes::protobuf_AddDesc_datatypes_2fdevices_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\"services/coordinator_service.proto\022\010Se"
    "rvices\032\033google/protobuf/empty.proto\032\024dat"
    "atypes/unit.proto\032\024datatypes/data.proto\032"
    "\027datatypes/devices.proto\"&\n\020HeartbeatMes"
    "sage\022\022\n\nservice_id\030\001 \001(\t*\?\n\013ServiceType\022"
    "\r\n\tNone_Type\020\000\022\n\n\006Facial\020\001\022\013\n\007AppUnit\020\002\022"
    "\010\n\004Unit\020\0032\221\004\n\022CoordinatorService\022=\n\007Conn"
    "ect\022\030.DataTypes.ConnectedUnit\032\026.google.p"
    "rotobuf.Empty\"\000\022A\n\tHeartbeat\022\032.Services."
    "HeartbeatMessage\032\026.google.protobuf.Empty"
    "\"\000\0226\n\010GetUnits\022\026.google.protobuf.Empty\032\020"
    ".DataTypes.Units\"\000\022A\n\tSubscribe\022\032.DataTy"
    "pes.SubscriptionMsg\032\026.google.protobuf.Em"
    "pty\"\000\022C\n\013Unsubscribe\022\032.DataTypes.Subscri"
    "ptionMsg\032\026.google.protobuf.Empty\"\000\0229\n\003Ge"
    "t\022\027.DataTypes.MessageBytes\032\027.DataTypes.M"
    "essageBytes\"\000\022<\n\006Commit\022\027.DataTypes.Mess"
    "ageBytes\032\027.DataTypes.MessageBytes\"\000\022@\n\013P"
    "ushUpdates\022\027.DataTypes.DeviceUpdate\032\026.go"
    "ogle.protobuf.Empty\"\000BV\n\007ex.grpcZEgithub"
    ".com/Enebra/ServiceCoordinator/grpc/serv"
    "ices/coordinatorservice\242\002\003RTGb\006proto3", 877);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "services/coordinator_service.proto", &protobuf_RegisterTypes);
  HeartbeatMessage::default_instance_ = new HeartbeatMessage();
  HeartbeatMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_services_2fcoordinator_5fservice_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_services_2fcoordinator_5fservice_2eproto {
  StaticDescriptorInitializer_services_2fcoordinator_5fservice_2eproto() {
    protobuf_AddDesc_services_2fcoordinator_5fservice_2eproto();
  }
} static_descriptor_initializer_services_2fcoordinator_5fservice_2eproto_;
const ::google::protobuf::EnumDescriptor* ServiceType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceType_descriptor_;
}
bool ServiceType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HeartbeatMessage::kServiceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeartbeatMessage::HeartbeatMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Services.HeartbeatMessage)
}

void HeartbeatMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

HeartbeatMessage::HeartbeatMessage(const HeartbeatMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Services.HeartbeatMessage)
}

void HeartbeatMessage::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  service_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

HeartbeatMessage::~HeartbeatMessage() {
  // @@protoc_insertion_point(destructor:Services.HeartbeatMessage)
  SharedDtor();
}

void HeartbeatMessage::SharedDtor() {
  service_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void HeartbeatMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeartbeatMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeartbeatMessage_descriptor_;
}

const HeartbeatMessage& HeartbeatMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_services_2fcoordinator_5fservice_2eproto();
  return *default_instance_;
}

HeartbeatMessage* HeartbeatMessage::default_instance_ = NULL;

HeartbeatMessage* HeartbeatMessage::New(::google::protobuf::Arena* arena) const {
  HeartbeatMessage* n = new HeartbeatMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HeartbeatMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:Services.HeartbeatMessage)
  service_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool HeartbeatMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Services.HeartbeatMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string service_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->service_id().data(), this->service_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Services.HeartbeatMessage.service_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Services.HeartbeatMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Services.HeartbeatMessage)
  return false;
#undef DO_
}

void HeartbeatMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Services.HeartbeatMessage)
  // optional string service_id = 1;
  if (this->service_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_id().data(), this->service_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Services.HeartbeatMessage.service_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->service_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:Services.HeartbeatMessage)
}

::google::protobuf::uint8* HeartbeatMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Services.HeartbeatMessage)
  // optional string service_id = 1;
  if (this->service_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_id().data(), this->service_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Services.HeartbeatMessage.service_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->service_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Services.HeartbeatMessage)
  return target;
}

int HeartbeatMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Services.HeartbeatMessage)
  int total_size = 0;

  // optional string service_id = 1;
  if (this->service_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->service_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartbeatMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Services.HeartbeatMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HeartbeatMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HeartbeatMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Services.HeartbeatMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Services.HeartbeatMessage)
    MergeFrom(*source);
  }
}

void HeartbeatMessage::MergeFrom(const HeartbeatMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Services.HeartbeatMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.service_id().size() > 0) {

    service_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_id_);
  }
}

void HeartbeatMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Services.HeartbeatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartbeatMessage::CopyFrom(const HeartbeatMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Services.HeartbeatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartbeatMessage::IsInitialized() const {

  return true;
}

void HeartbeatMessage::Swap(HeartbeatMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeartbeatMessage::InternalSwap(HeartbeatMessage* other) {
  service_id_.Swap(&other->service_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HeartbeatMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeartbeatMessage_descriptor_;
  metadata.reflection = HeartbeatMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HeartbeatMessage

// optional string service_id = 1;
void HeartbeatMessage::clear_service_id() {
  service_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& HeartbeatMessage::service_id() const {
  // @@protoc_insertion_point(field_get:Services.HeartbeatMessage.service_id)
  return service_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HeartbeatMessage::set_service_id(const ::std::string& value) {
  
  service_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Services.HeartbeatMessage.service_id)
}
 void HeartbeatMessage::set_service_id(const char* value) {
  
  service_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Services.HeartbeatMessage.service_id)
}
 void HeartbeatMessage::set_service_id(const char* value, size_t size) {
  
  service_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Services.HeartbeatMessage.service_id)
}
 ::std::string* HeartbeatMessage::mutable_service_id() {
  
  // @@protoc_insertion_point(field_mutable:Services.HeartbeatMessage.service_id)
  return service_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* HeartbeatMessage::release_service_id() {
  // @@protoc_insertion_point(field_release:Services.HeartbeatMessage.service_id)
  
  return service_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HeartbeatMessage::set_allocated_service_id(::std::string* service_id) {
  if (service_id != NULL) {
    
  } else {
    
  }
  service_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_id);
  // @@protoc_insertion_point(field_set_allocated:Services.HeartbeatMessage.service_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Services

// @@protoc_insertion_point(global_scope)
