// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: services/facial_service.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "services/facial_service.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Services {

namespace {

const ::google::protobuf::Descriptor* BiometricRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BiometricRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BiometricResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BiometricResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BiometricUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BiometricUpdate_reflection_ = NULL;
struct BiometricUpdateOneofInstance {
  const ::DataTypes::Person* person_updates_;
  const ::DataTypes::Group* group_updates_;
}* BiometricUpdate_default_oneof_instance_ = NULL;

}  // namespace


void protobuf_AssignDesc_services_2ffacial_5fservice_2eproto() {
  protobuf_AddDesc_services_2ffacial_5fservice_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "services/facial_service.proto");
  GOOGLE_CHECK(file != NULL);
  BiometricRequest_descriptor_ = file->message_type(0);
  static const int BiometricRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BiometricRequest, photo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BiometricRequest, person_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BiometricRequest, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BiometricRequest, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BiometricRequest, type_),
  };
  BiometricRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BiometricRequest_descriptor_,
      BiometricRequest::default_instance_,
      BiometricRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(BiometricRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BiometricRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BiometricRequest, _is_default_instance_));
  BiometricResponse_descriptor_ = file->message_type(1);
  static const int BiometricResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BiometricResponse, photo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BiometricResponse, person_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BiometricResponse, faces_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BiometricResponse, success_),
  };
  BiometricResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BiometricResponse_descriptor_,
      BiometricResponse::default_instance_,
      BiometricResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(BiometricResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BiometricResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BiometricResponse, _is_default_instance_));
  BiometricUpdate_descriptor_ = file->message_type(2);
  static const int BiometricUpdate_offsets_[3] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(BiometricUpdate_default_oneof_instance_, person_updates_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(BiometricUpdate_default_oneof_instance_, group_updates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BiometricUpdate, update_type_),
  };
  BiometricUpdate_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BiometricUpdate_descriptor_,
      BiometricUpdate::default_instance_,
      BiometricUpdate_offsets_,
      -1,
      -1,
      -1,
      BiometricUpdate_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BiometricUpdate, _oneof_case_[0]),
      sizeof(BiometricUpdate),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BiometricUpdate, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BiometricUpdate, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_services_2ffacial_5fservice_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BiometricRequest_descriptor_, &BiometricRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BiometricResponse_descriptor_, &BiometricResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BiometricUpdate_descriptor_, &BiometricUpdate::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_services_2ffacial_5fservice_2eproto() {
  delete BiometricRequest::default_instance_;
  delete BiometricRequest_reflection_;
  delete BiometricResponse::default_instance_;
  delete BiometricResponse_reflection_;
  delete BiometricUpdate::default_instance_;
  delete BiometricUpdate_default_oneof_instance_;
  delete BiometricUpdate_reflection_;
}

void protobuf_AddDesc_services_2ffacial_5fservice_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DataTypes::protobuf_AddDesc_datatypes_2fperson_2eproto();
  ::DataTypes::protobuf_AddDesc_datatypes_2fphoto_2eproto();
  ::DataTypes::protobuf_AddDesc_datatypes_2fkey_2eproto();
  ::DataTypes::protobuf_AddDesc_datatypes_2fgroup_2eproto();
  ::DataTypes::protobuf_AddDesc_datatypes_2fbiometrics_2eproto();
  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fempty_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\035services/facial_service.proto\022\010Service"
    "s\032\026datatypes/person.proto\032\025datatypes/pho"
    "to.proto\032\023datatypes/key.proto\032\025datatypes"
    "/group.proto\032\032datatypes/biometrics.proto"
    "\032\033google/protobuf/empty.proto\"\304\001\n\020Biomet"
    "ricRequest\022\037\n\005photo\030\001 \001(\0132\020.DataTypes.Ph"
    "oto\022\036\n\006person\030\002 \001(\0132\016.DataTypes.Key\022\035\n\005g"
    "roup\030\003 \001(\0132\016.DataTypes.Key\022(\n\006action\030\004 \001"
    "(\0162\030.DataTypes.BioActionType\022&\n\004type\030\005 \001"
    "(\0162\030.DataTypes.BiometricType\"\206\001\n\021Biometr"
    "icResponse\022\037\n\005photo\030\001 \001(\0132\020.DataTypes.Ph"
    "oto\022\036\n\006person\030\002 \001(\0132\016.DataTypes.Key\022\037\n\005f"
    "aces\030\003 \001(\0132\020.DataTypes.Faces\022\017\n\007success\030"
    "\004 \001(\010\"x\n\017BiometricUpdate\022+\n\016person_updat"
    "es\030\002 \001(\0132\021.DataTypes.PersonH\000\022)\n\rgroup_u"
    "pdates\030\004 \001(\0132\020.DataTypes.GroupH\000B\r\n\013upda"
    "te_type2\235\001\n\026BiometricFacialService\022D\n\007Pr"
    "ocess\022\032.Services.BiometricRequest\032\033.Serv"
    "ices.BiometricResponse\"\000\022=\n\006Update\022\031.Ser"
    "vices.BiometricUpdate\032\026.google.protobuf."
    "Empty\"\000BQ\n\007ex.grpcZ@github.com/Enebra/Se"
    "rviceCoordinator/grpc/services/facialser"
    "vice\242\002\003RTGb\006proto3", 898);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "services/facial_service.proto", &protobuf_RegisterTypes);
  BiometricRequest::default_instance_ = new BiometricRequest();
  BiometricResponse::default_instance_ = new BiometricResponse();
  BiometricUpdate::default_instance_ = new BiometricUpdate();
  BiometricUpdate_default_oneof_instance_ = new BiometricUpdateOneofInstance();
  BiometricRequest::default_instance_->InitAsDefaultInstance();
  BiometricResponse::default_instance_->InitAsDefaultInstance();
  BiometricUpdate::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_services_2ffacial_5fservice_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_services_2ffacial_5fservice_2eproto {
  StaticDescriptorInitializer_services_2ffacial_5fservice_2eproto() {
    protobuf_AddDesc_services_2ffacial_5fservice_2eproto();
  }
} static_descriptor_initializer_services_2ffacial_5fservice_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BiometricRequest::kPhotoFieldNumber;
const int BiometricRequest::kPersonFieldNumber;
const int BiometricRequest::kGroupFieldNumber;
const int BiometricRequest::kActionFieldNumber;
const int BiometricRequest::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BiometricRequest::BiometricRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Services.BiometricRequest)
}

void BiometricRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  photo_ = const_cast< ::DataTypes::Photo*>(&::DataTypes::Photo::default_instance());
  person_ = const_cast< ::DataTypes::Key*>(&::DataTypes::Key::default_instance());
  group_ = const_cast< ::DataTypes::Key*>(&::DataTypes::Key::default_instance());
}

BiometricRequest::BiometricRequest(const BiometricRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Services.BiometricRequest)
}

void BiometricRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  photo_ = NULL;
  person_ = NULL;
  group_ = NULL;
  action_ = 0;
  type_ = 0;
}

BiometricRequest::~BiometricRequest() {
  // @@protoc_insertion_point(destructor:Services.BiometricRequest)
  SharedDtor();
}

void BiometricRequest::SharedDtor() {
  if (this != default_instance_) {
    delete photo_;
    delete person_;
    delete group_;
  }
}

void BiometricRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BiometricRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BiometricRequest_descriptor_;
}

const BiometricRequest& BiometricRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_services_2ffacial_5fservice_2eproto();
  return *default_instance_;
}

BiometricRequest* BiometricRequest::default_instance_ = NULL;

BiometricRequest* BiometricRequest::New(::google::protobuf::Arena* arena) const {
  BiometricRequest* n = new BiometricRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BiometricRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Services.BiometricRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BiometricRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BiometricRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(action_, type_);
  if (GetArenaNoVirtual() == NULL && photo_ != NULL) delete photo_;
  photo_ = NULL;
  if (GetArenaNoVirtual() == NULL && person_ != NULL) delete person_;
  person_ = NULL;
  if (GetArenaNoVirtual() == NULL && group_ != NULL) delete group_;
  group_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool BiometricRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Services.BiometricRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DataTypes.Photo photo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_photo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_person;
        break;
      }

      // optional .DataTypes.Key person = 2;
      case 2: {
        if (tag == 18) {
         parse_person:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_person()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_group;
        break;
      }

      // optional .DataTypes.Key group = 3;
      case 3: {
        if (tag == 26) {
         parse_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_action;
        break;
      }

      // optional .DataTypes.BioActionType action = 4;
      case 4: {
        if (tag == 32) {
         parse_action:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_action(static_cast< ::DataTypes::BioActionType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // optional .DataTypes.BiometricType type = 5;
      case 5: {
        if (tag == 40) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::DataTypes::BiometricType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Services.BiometricRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Services.BiometricRequest)
  return false;
#undef DO_
}

void BiometricRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Services.BiometricRequest)
  // optional .DataTypes.Photo photo = 1;
  if (this->has_photo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->photo_, output);
  }

  // optional .DataTypes.Key person = 2;
  if (this->has_person()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->person_, output);
  }

  // optional .DataTypes.Key group = 3;
  if (this->has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->group_, output);
  }

  // optional .DataTypes.BioActionType action = 4;
  if (this->action() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->action(), output);
  }

  // optional .DataTypes.BiometricType type = 5;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }

  // @@protoc_insertion_point(serialize_end:Services.BiometricRequest)
}

::google::protobuf::uint8* BiometricRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Services.BiometricRequest)
  // optional .DataTypes.Photo photo = 1;
  if (this->has_photo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->photo_, target);
  }

  // optional .DataTypes.Key person = 2;
  if (this->has_person()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->person_, target);
  }

  // optional .DataTypes.Key group = 3;
  if (this->has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->group_, target);
  }

  // optional .DataTypes.BioActionType action = 4;
  if (this->action() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->action(), target);
  }

  // optional .DataTypes.BiometricType type = 5;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Services.BiometricRequest)
  return target;
}

int BiometricRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Services.BiometricRequest)
  int total_size = 0;

  // optional .DataTypes.Photo photo = 1;
  if (this->has_photo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->photo_);
  }

  // optional .DataTypes.Key person = 2;
  if (this->has_person()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->person_);
  }

  // optional .DataTypes.Key group = 3;
  if (this->has_group()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->group_);
  }

  // optional .DataTypes.BioActionType action = 4;
  if (this->action() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
  }

  // optional .DataTypes.BiometricType type = 5;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BiometricRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Services.BiometricRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BiometricRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BiometricRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Services.BiometricRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Services.BiometricRequest)
    MergeFrom(*source);
  }
}

void BiometricRequest::MergeFrom(const BiometricRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Services.BiometricRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_photo()) {
    mutable_photo()->::DataTypes::Photo::MergeFrom(from.photo());
  }
  if (from.has_person()) {
    mutable_person()->::DataTypes::Key::MergeFrom(from.person());
  }
  if (from.has_group()) {
    mutable_group()->::DataTypes::Key::MergeFrom(from.group());
  }
  if (from.action() != 0) {
    set_action(from.action());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void BiometricRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Services.BiometricRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BiometricRequest::CopyFrom(const BiometricRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Services.BiometricRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BiometricRequest::IsInitialized() const {

  return true;
}

void BiometricRequest::Swap(BiometricRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BiometricRequest::InternalSwap(BiometricRequest* other) {
  std::swap(photo_, other->photo_);
  std::swap(person_, other->person_);
  std::swap(group_, other->group_);
  std::swap(action_, other->action_);
  std::swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BiometricRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BiometricRequest_descriptor_;
  metadata.reflection = BiometricRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BiometricRequest

// optional .DataTypes.Photo photo = 1;
bool BiometricRequest::has_photo() const {
  return !_is_default_instance_ && photo_ != NULL;
}
void BiometricRequest::clear_photo() {
  if (GetArenaNoVirtual() == NULL && photo_ != NULL) delete photo_;
  photo_ = NULL;
}
const ::DataTypes::Photo& BiometricRequest::photo() const {
  // @@protoc_insertion_point(field_get:Services.BiometricRequest.photo)
  return photo_ != NULL ? *photo_ : *default_instance_->photo_;
}
::DataTypes::Photo* BiometricRequest::mutable_photo() {
  
  if (photo_ == NULL) {
    photo_ = new ::DataTypes::Photo;
  }
  // @@protoc_insertion_point(field_mutable:Services.BiometricRequest.photo)
  return photo_;
}
::DataTypes::Photo* BiometricRequest::release_photo() {
  // @@protoc_insertion_point(field_release:Services.BiometricRequest.photo)
  
  ::DataTypes::Photo* temp = photo_;
  photo_ = NULL;
  return temp;
}
void BiometricRequest::set_allocated_photo(::DataTypes::Photo* photo) {
  delete photo_;
  photo_ = photo;
  if (photo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Services.BiometricRequest.photo)
}

// optional .DataTypes.Key person = 2;
bool BiometricRequest::has_person() const {
  return !_is_default_instance_ && person_ != NULL;
}
void BiometricRequest::clear_person() {
  if (GetArenaNoVirtual() == NULL && person_ != NULL) delete person_;
  person_ = NULL;
}
const ::DataTypes::Key& BiometricRequest::person() const {
  // @@protoc_insertion_point(field_get:Services.BiometricRequest.person)
  return person_ != NULL ? *person_ : *default_instance_->person_;
}
::DataTypes::Key* BiometricRequest::mutable_person() {
  
  if (person_ == NULL) {
    person_ = new ::DataTypes::Key;
  }
  // @@protoc_insertion_point(field_mutable:Services.BiometricRequest.person)
  return person_;
}
::DataTypes::Key* BiometricRequest::release_person() {
  // @@protoc_insertion_point(field_release:Services.BiometricRequest.person)
  
  ::DataTypes::Key* temp = person_;
  person_ = NULL;
  return temp;
}
void BiometricRequest::set_allocated_person(::DataTypes::Key* person) {
  delete person_;
  person_ = person;
  if (person) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Services.BiometricRequest.person)
}

// optional .DataTypes.Key group = 3;
bool BiometricRequest::has_group() const {
  return !_is_default_instance_ && group_ != NULL;
}
void BiometricRequest::clear_group() {
  if (GetArenaNoVirtual() == NULL && group_ != NULL) delete group_;
  group_ = NULL;
}
const ::DataTypes::Key& BiometricRequest::group() const {
  // @@protoc_insertion_point(field_get:Services.BiometricRequest.group)
  return group_ != NULL ? *group_ : *default_instance_->group_;
}
::DataTypes::Key* BiometricRequest::mutable_group() {
  
  if (group_ == NULL) {
    group_ = new ::DataTypes::Key;
  }
  // @@protoc_insertion_point(field_mutable:Services.BiometricRequest.group)
  return group_;
}
::DataTypes::Key* BiometricRequest::release_group() {
  // @@protoc_insertion_point(field_release:Services.BiometricRequest.group)
  
  ::DataTypes::Key* temp = group_;
  group_ = NULL;
  return temp;
}
void BiometricRequest::set_allocated_group(::DataTypes::Key* group) {
  delete group_;
  group_ = group;
  if (group) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Services.BiometricRequest.group)
}

// optional .DataTypes.BioActionType action = 4;
void BiometricRequest::clear_action() {
  action_ = 0;
}
 ::DataTypes::BioActionType BiometricRequest::action() const {
  // @@protoc_insertion_point(field_get:Services.BiometricRequest.action)
  return static_cast< ::DataTypes::BioActionType >(action_);
}
 void BiometricRequest::set_action(::DataTypes::BioActionType value) {
  
  action_ = value;
  // @@protoc_insertion_point(field_set:Services.BiometricRequest.action)
}

// optional .DataTypes.BiometricType type = 5;
void BiometricRequest::clear_type() {
  type_ = 0;
}
 ::DataTypes::BiometricType BiometricRequest::type() const {
  // @@protoc_insertion_point(field_get:Services.BiometricRequest.type)
  return static_cast< ::DataTypes::BiometricType >(type_);
}
 void BiometricRequest::set_type(::DataTypes::BiometricType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Services.BiometricRequest.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BiometricResponse::kPhotoFieldNumber;
const int BiometricResponse::kPersonFieldNumber;
const int BiometricResponse::kFacesFieldNumber;
const int BiometricResponse::kSuccessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BiometricResponse::BiometricResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Services.BiometricResponse)
}

void BiometricResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  photo_ = const_cast< ::DataTypes::Photo*>(&::DataTypes::Photo::default_instance());
  person_ = const_cast< ::DataTypes::Key*>(&::DataTypes::Key::default_instance());
  faces_ = const_cast< ::DataTypes::Faces*>(&::DataTypes::Faces::default_instance());
}

BiometricResponse::BiometricResponse(const BiometricResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Services.BiometricResponse)
}

void BiometricResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  photo_ = NULL;
  person_ = NULL;
  faces_ = NULL;
  success_ = false;
}

BiometricResponse::~BiometricResponse() {
  // @@protoc_insertion_point(destructor:Services.BiometricResponse)
  SharedDtor();
}

void BiometricResponse::SharedDtor() {
  if (this != default_instance_) {
    delete photo_;
    delete person_;
    delete faces_;
  }
}

void BiometricResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BiometricResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BiometricResponse_descriptor_;
}

const BiometricResponse& BiometricResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_services_2ffacial_5fservice_2eproto();
  return *default_instance_;
}

BiometricResponse* BiometricResponse::default_instance_ = NULL;

BiometricResponse* BiometricResponse::New(::google::protobuf::Arena* arena) const {
  BiometricResponse* n = new BiometricResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BiometricResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Services.BiometricResponse)
  if (GetArenaNoVirtual() == NULL && photo_ != NULL) delete photo_;
  photo_ = NULL;
  if (GetArenaNoVirtual() == NULL && person_ != NULL) delete person_;
  person_ = NULL;
  if (GetArenaNoVirtual() == NULL && faces_ != NULL) delete faces_;
  faces_ = NULL;
  success_ = false;
}

bool BiometricResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Services.BiometricResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DataTypes.Photo photo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_photo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_person;
        break;
      }

      // optional .DataTypes.Key person = 2;
      case 2: {
        if (tag == 18) {
         parse_person:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_person()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_faces;
        break;
      }

      // optional .DataTypes.Faces faces = 3;
      case 3: {
        if (tag == 26) {
         parse_faces:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_faces()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_success;
        break;
      }

      // optional bool success = 4;
      case 4: {
        if (tag == 32) {
         parse_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Services.BiometricResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Services.BiometricResponse)
  return false;
#undef DO_
}

void BiometricResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Services.BiometricResponse)
  // optional .DataTypes.Photo photo = 1;
  if (this->has_photo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->photo_, output);
  }

  // optional .DataTypes.Key person = 2;
  if (this->has_person()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->person_, output);
  }

  // optional .DataTypes.Faces faces = 3;
  if (this->has_faces()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->faces_, output);
  }

  // optional bool success = 4;
  if (this->success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->success(), output);
  }

  // @@protoc_insertion_point(serialize_end:Services.BiometricResponse)
}

::google::protobuf::uint8* BiometricResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Services.BiometricResponse)
  // optional .DataTypes.Photo photo = 1;
  if (this->has_photo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->photo_, target);
  }

  // optional .DataTypes.Key person = 2;
  if (this->has_person()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->person_, target);
  }

  // optional .DataTypes.Faces faces = 3;
  if (this->has_faces()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->faces_, target);
  }

  // optional bool success = 4;
  if (this->success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->success(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Services.BiometricResponse)
  return target;
}

int BiometricResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Services.BiometricResponse)
  int total_size = 0;

  // optional .DataTypes.Photo photo = 1;
  if (this->has_photo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->photo_);
  }

  // optional .DataTypes.Key person = 2;
  if (this->has_person()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->person_);
  }

  // optional .DataTypes.Faces faces = 3;
  if (this->has_faces()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->faces_);
  }

  // optional bool success = 4;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BiometricResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Services.BiometricResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BiometricResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BiometricResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Services.BiometricResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Services.BiometricResponse)
    MergeFrom(*source);
  }
}

void BiometricResponse::MergeFrom(const BiometricResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Services.BiometricResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_photo()) {
    mutable_photo()->::DataTypes::Photo::MergeFrom(from.photo());
  }
  if (from.has_person()) {
    mutable_person()->::DataTypes::Key::MergeFrom(from.person());
  }
  if (from.has_faces()) {
    mutable_faces()->::DataTypes::Faces::MergeFrom(from.faces());
  }
  if (from.success() != 0) {
    set_success(from.success());
  }
}

void BiometricResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Services.BiometricResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BiometricResponse::CopyFrom(const BiometricResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Services.BiometricResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BiometricResponse::IsInitialized() const {

  return true;
}

void BiometricResponse::Swap(BiometricResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BiometricResponse::InternalSwap(BiometricResponse* other) {
  std::swap(photo_, other->photo_);
  std::swap(person_, other->person_);
  std::swap(faces_, other->faces_);
  std::swap(success_, other->success_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BiometricResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BiometricResponse_descriptor_;
  metadata.reflection = BiometricResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BiometricResponse

// optional .DataTypes.Photo photo = 1;
bool BiometricResponse::has_photo() const {
  return !_is_default_instance_ && photo_ != NULL;
}
void BiometricResponse::clear_photo() {
  if (GetArenaNoVirtual() == NULL && photo_ != NULL) delete photo_;
  photo_ = NULL;
}
const ::DataTypes::Photo& BiometricResponse::photo() const {
  // @@protoc_insertion_point(field_get:Services.BiometricResponse.photo)
  return photo_ != NULL ? *photo_ : *default_instance_->photo_;
}
::DataTypes::Photo* BiometricResponse::mutable_photo() {
  
  if (photo_ == NULL) {
    photo_ = new ::DataTypes::Photo;
  }
  // @@protoc_insertion_point(field_mutable:Services.BiometricResponse.photo)
  return photo_;
}
::DataTypes::Photo* BiometricResponse::release_photo() {
  // @@protoc_insertion_point(field_release:Services.BiometricResponse.photo)
  
  ::DataTypes::Photo* temp = photo_;
  photo_ = NULL;
  return temp;
}
void BiometricResponse::set_allocated_photo(::DataTypes::Photo* photo) {
  delete photo_;
  photo_ = photo;
  if (photo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Services.BiometricResponse.photo)
}

// optional .DataTypes.Key person = 2;
bool BiometricResponse::has_person() const {
  return !_is_default_instance_ && person_ != NULL;
}
void BiometricResponse::clear_person() {
  if (GetArenaNoVirtual() == NULL && person_ != NULL) delete person_;
  person_ = NULL;
}
const ::DataTypes::Key& BiometricResponse::person() const {
  // @@protoc_insertion_point(field_get:Services.BiometricResponse.person)
  return person_ != NULL ? *person_ : *default_instance_->person_;
}
::DataTypes::Key* BiometricResponse::mutable_person() {
  
  if (person_ == NULL) {
    person_ = new ::DataTypes::Key;
  }
  // @@protoc_insertion_point(field_mutable:Services.BiometricResponse.person)
  return person_;
}
::DataTypes::Key* BiometricResponse::release_person() {
  // @@protoc_insertion_point(field_release:Services.BiometricResponse.person)
  
  ::DataTypes::Key* temp = person_;
  person_ = NULL;
  return temp;
}
void BiometricResponse::set_allocated_person(::DataTypes::Key* person) {
  delete person_;
  person_ = person;
  if (person) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Services.BiometricResponse.person)
}

// optional .DataTypes.Faces faces = 3;
bool BiometricResponse::has_faces() const {
  return !_is_default_instance_ && faces_ != NULL;
}
void BiometricResponse::clear_faces() {
  if (GetArenaNoVirtual() == NULL && faces_ != NULL) delete faces_;
  faces_ = NULL;
}
const ::DataTypes::Faces& BiometricResponse::faces() const {
  // @@protoc_insertion_point(field_get:Services.BiometricResponse.faces)
  return faces_ != NULL ? *faces_ : *default_instance_->faces_;
}
::DataTypes::Faces* BiometricResponse::mutable_faces() {
  
  if (faces_ == NULL) {
    faces_ = new ::DataTypes::Faces;
  }
  // @@protoc_insertion_point(field_mutable:Services.BiometricResponse.faces)
  return faces_;
}
::DataTypes::Faces* BiometricResponse::release_faces() {
  // @@protoc_insertion_point(field_release:Services.BiometricResponse.faces)
  
  ::DataTypes::Faces* temp = faces_;
  faces_ = NULL;
  return temp;
}
void BiometricResponse::set_allocated_faces(::DataTypes::Faces* faces) {
  delete faces_;
  faces_ = faces;
  if (faces) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Services.BiometricResponse.faces)
}

// optional bool success = 4;
void BiometricResponse::clear_success() {
  success_ = false;
}
 bool BiometricResponse::success() const {
  // @@protoc_insertion_point(field_get:Services.BiometricResponse.success)
  return success_;
}
 void BiometricResponse::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:Services.BiometricResponse.success)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BiometricUpdate::kPersonUpdatesFieldNumber;
const int BiometricUpdate::kGroupUpdatesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BiometricUpdate::BiometricUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Services.BiometricUpdate)
}

void BiometricUpdate::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  BiometricUpdate_default_oneof_instance_->person_updates_ = const_cast< ::DataTypes::Person*>(&::DataTypes::Person::default_instance());
  BiometricUpdate_default_oneof_instance_->group_updates_ = const_cast< ::DataTypes::Group*>(&::DataTypes::Group::default_instance());
}

BiometricUpdate::BiometricUpdate(const BiometricUpdate& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Services.BiometricUpdate)
}

void BiometricUpdate::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  clear_has_update_type();
}

BiometricUpdate::~BiometricUpdate() {
  // @@protoc_insertion_point(destructor:Services.BiometricUpdate)
  SharedDtor();
}

void BiometricUpdate::SharedDtor() {
  if (has_update_type()) {
    clear_update_type();
  }
  if (this != default_instance_) {
  }
}

void BiometricUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BiometricUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BiometricUpdate_descriptor_;
}

const BiometricUpdate& BiometricUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_services_2ffacial_5fservice_2eproto();
  return *default_instance_;
}

BiometricUpdate* BiometricUpdate::default_instance_ = NULL;

BiometricUpdate* BiometricUpdate::New(::google::protobuf::Arena* arena) const {
  BiometricUpdate* n = new BiometricUpdate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BiometricUpdate::clear_update_type() {
// @@protoc_insertion_point(one_of_clear_start:Services.BiometricUpdate)
  switch(update_type_case()) {
    case kPersonUpdates: {
      delete update_type_.person_updates_;
      break;
    }
    case kGroupUpdates: {
      delete update_type_.group_updates_;
      break;
    }
    case UPDATE_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = UPDATE_TYPE_NOT_SET;
}


void BiometricUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:Services.BiometricUpdate)
  clear_update_type();
}

bool BiometricUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Services.BiometricUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DataTypes.Person person_updates = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_person_updates()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_group_updates;
        break;
      }

      // optional .DataTypes.Group group_updates = 4;
      case 4: {
        if (tag == 34) {
         parse_group_updates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_updates()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Services.BiometricUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Services.BiometricUpdate)
  return false;
#undef DO_
}

void BiometricUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Services.BiometricUpdate)
  // optional .DataTypes.Person person_updates = 2;
  if (has_person_updates()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *update_type_.person_updates_, output);
  }

  // optional .DataTypes.Group group_updates = 4;
  if (has_group_updates()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *update_type_.group_updates_, output);
  }

  // @@protoc_insertion_point(serialize_end:Services.BiometricUpdate)
}

::google::protobuf::uint8* BiometricUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Services.BiometricUpdate)
  // optional .DataTypes.Person person_updates = 2;
  if (has_person_updates()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *update_type_.person_updates_, target);
  }

  // optional .DataTypes.Group group_updates = 4;
  if (has_group_updates()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *update_type_.group_updates_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Services.BiometricUpdate)
  return target;
}

int BiometricUpdate::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Services.BiometricUpdate)
  int total_size = 0;

  switch (update_type_case()) {
    // optional .DataTypes.Person person_updates = 2;
    case kPersonUpdates: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *update_type_.person_updates_);
      break;
    }
    // optional .DataTypes.Group group_updates = 4;
    case kGroupUpdates: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *update_type_.group_updates_);
      break;
    }
    case UPDATE_TYPE_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BiometricUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Services.BiometricUpdate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BiometricUpdate* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BiometricUpdate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Services.BiometricUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Services.BiometricUpdate)
    MergeFrom(*source);
  }
}

void BiometricUpdate::MergeFrom(const BiometricUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Services.BiometricUpdate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  switch (from.update_type_case()) {
    case kPersonUpdates: {
      mutable_person_updates()->::DataTypes::Person::MergeFrom(from.person_updates());
      break;
    }
    case kGroupUpdates: {
      mutable_group_updates()->::DataTypes::Group::MergeFrom(from.group_updates());
      break;
    }
    case UPDATE_TYPE_NOT_SET: {
      break;
    }
  }
}

void BiometricUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Services.BiometricUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BiometricUpdate::CopyFrom(const BiometricUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Services.BiometricUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BiometricUpdate::IsInitialized() const {

  return true;
}

void BiometricUpdate::Swap(BiometricUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BiometricUpdate::InternalSwap(BiometricUpdate* other) {
  std::swap(update_type_, other->update_type_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BiometricUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BiometricUpdate_descriptor_;
  metadata.reflection = BiometricUpdate_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BiometricUpdate

// optional .DataTypes.Person person_updates = 2;
bool BiometricUpdate::has_person_updates() const {
  return update_type_case() == kPersonUpdates;
}
void BiometricUpdate::set_has_person_updates() {
  _oneof_case_[0] = kPersonUpdates;
}
void BiometricUpdate::clear_person_updates() {
  if (has_person_updates()) {
    delete update_type_.person_updates_;
    clear_has_update_type();
  }
}
 const ::DataTypes::Person& BiometricUpdate::person_updates() const {
  // @@protoc_insertion_point(field_get:Services.BiometricUpdate.person_updates)
  return has_person_updates()
      ? *update_type_.person_updates_
      : ::DataTypes::Person::default_instance();
}
::DataTypes::Person* BiometricUpdate::mutable_person_updates() {
  if (!has_person_updates()) {
    clear_update_type();
    set_has_person_updates();
    update_type_.person_updates_ = new ::DataTypes::Person;
  }
  // @@protoc_insertion_point(field_mutable:Services.BiometricUpdate.person_updates)
  return update_type_.person_updates_;
}
::DataTypes::Person* BiometricUpdate::release_person_updates() {
  // @@protoc_insertion_point(field_release:Services.BiometricUpdate.person_updates)
  if (has_person_updates()) {
    clear_has_update_type();
    ::DataTypes::Person* temp = update_type_.person_updates_;
    update_type_.person_updates_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void BiometricUpdate::set_allocated_person_updates(::DataTypes::Person* person_updates) {
  clear_update_type();
  if (person_updates) {
    set_has_person_updates();
    update_type_.person_updates_ = person_updates;
  }
  // @@protoc_insertion_point(field_set_allocated:Services.BiometricUpdate.person_updates)
}

// optional .DataTypes.Group group_updates = 4;
bool BiometricUpdate::has_group_updates() const {
  return update_type_case() == kGroupUpdates;
}
void BiometricUpdate::set_has_group_updates() {
  _oneof_case_[0] = kGroupUpdates;
}
void BiometricUpdate::clear_group_updates() {
  if (has_group_updates()) {
    delete update_type_.group_updates_;
    clear_has_update_type();
  }
}
 const ::DataTypes::Group& BiometricUpdate::group_updates() const {
  // @@protoc_insertion_point(field_get:Services.BiometricUpdate.group_updates)
  return has_group_updates()
      ? *update_type_.group_updates_
      : ::DataTypes::Group::default_instance();
}
::DataTypes::Group* BiometricUpdate::mutable_group_updates() {
  if (!has_group_updates()) {
    clear_update_type();
    set_has_group_updates();
    update_type_.group_updates_ = new ::DataTypes::Group;
  }
  // @@protoc_insertion_point(field_mutable:Services.BiometricUpdate.group_updates)
  return update_type_.group_updates_;
}
::DataTypes::Group* BiometricUpdate::release_group_updates() {
  // @@protoc_insertion_point(field_release:Services.BiometricUpdate.group_updates)
  if (has_group_updates()) {
    clear_has_update_type();
    ::DataTypes::Group* temp = update_type_.group_updates_;
    update_type_.group_updates_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void BiometricUpdate::set_allocated_group_updates(::DataTypes::Group* group_updates) {
  clear_update_type();
  if (group_updates) {
    set_has_group_updates();
    update_type_.group_updates_ = group_updates;
  }
  // @@protoc_insertion_point(field_set_allocated:Services.BiometricUpdate.group_updates)
}

bool BiometricUpdate::has_update_type() const {
  return update_type_case() != UPDATE_TYPE_NOT_SET;
}
void BiometricUpdate::clear_has_update_type() {
  _oneof_case_[0] = UPDATE_TYPE_NOT_SET;
}
BiometricUpdate::UpdateTypeCase BiometricUpdate::update_type_case() const {
  return BiometricUpdate::UpdateTypeCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Services

// @@protoc_insertion_point(global_scope)
