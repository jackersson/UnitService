// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datatypes/commands.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "datatypes/commands.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace DataTypes {

namespace {

const ::google::protobuf::Descriptor* CommitRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommitRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommitResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommitResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_datatypes_2fcommands_2eproto() {
  protobuf_AddDesc_datatypes_2fcommands_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "datatypes/commands.proto");
  GOOGLE_CHECK(file != NULL);
  CommitRequest_descriptor_ = file->message_type(0);
  static const int CommitRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitRequest, mutations_),
  };
  CommitRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CommitRequest_descriptor_,
      CommitRequest::default_instance_,
      CommitRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(CommitRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitRequest, _is_default_instance_));
  CommitResponse_descriptor_ = file->message_type(1);
  static const int CommitResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitResponse, mutation_results_),
  };
  CommitResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CommitResponse_descriptor_,
      CommitResponse::default_instance_,
      CommitResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(CommitResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitResponse, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_datatypes_2fcommands_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CommitRequest_descriptor_, &CommitRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CommitResponse_descriptor_, &CommitResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_datatypes_2fcommands_2eproto() {
  delete CommitRequest::default_instance_;
  delete CommitRequest_reflection_;
  delete CommitResponse::default_instance_;
  delete CommitResponse_reflection_;
}

void protobuf_AddDesc_datatypes_2fcommands_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DataTypes::protobuf_AddDesc_datatypes_2fdata_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030datatypes/commands.proto\022\tDataTypes\032\024d"
    "atatypes/data.proto\"7\n\rCommitRequest\022&\n\t"
    "mutations\030\001 \003(\0132\023.DataTypes.Mutation\"E\n\016"
    "CommitResponse\0223\n\020mutation_results\030\001 \003(\013"
    "2\031.DataTypes.MutationResultBM\n\007ex.grpcZ<"
    "github.com/Enebra/ServiceCoordinator/grp"
    "c/datatypes/commands\242\002\003RTGb\006proto3", 274);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "datatypes/commands.proto", &protobuf_RegisterTypes);
  CommitRequest::default_instance_ = new CommitRequest();
  CommitResponse::default_instance_ = new CommitResponse();
  CommitRequest::default_instance_->InitAsDefaultInstance();
  CommitResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_datatypes_2fcommands_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_datatypes_2fcommands_2eproto {
  StaticDescriptorInitializer_datatypes_2fcommands_2eproto() {
    protobuf_AddDesc_datatypes_2fcommands_2eproto();
  }
} static_descriptor_initializer_datatypes_2fcommands_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommitRequest::kMutationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommitRequest::CommitRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DataTypes.CommitRequest)
}

void CommitRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CommitRequest::CommitRequest(const CommitRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DataTypes.CommitRequest)
}

void CommitRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

CommitRequest::~CommitRequest() {
  // @@protoc_insertion_point(destructor:DataTypes.CommitRequest)
  SharedDtor();
}

void CommitRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CommitRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommitRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommitRequest_descriptor_;
}

const CommitRequest& CommitRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datatypes_2fcommands_2eproto();
  return *default_instance_;
}

CommitRequest* CommitRequest::default_instance_ = NULL;

CommitRequest* CommitRequest::New(::google::protobuf::Arena* arena) const {
  CommitRequest* n = new CommitRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CommitRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DataTypes.CommitRequest)
  mutations_.Clear();
}

bool CommitRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DataTypes.CommitRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DataTypes.Mutation mutations = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_mutations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_mutations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_mutations;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DataTypes.CommitRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DataTypes.CommitRequest)
  return false;
#undef DO_
}

void CommitRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DataTypes.CommitRequest)
  // repeated .DataTypes.Mutation mutations = 1;
  for (unsigned int i = 0, n = this->mutations_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mutations(i), output);
  }

  // @@protoc_insertion_point(serialize_end:DataTypes.CommitRequest)
}

::google::protobuf::uint8* CommitRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DataTypes.CommitRequest)
  // repeated .DataTypes.Mutation mutations = 1;
  for (unsigned int i = 0, n = this->mutations_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mutations(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:DataTypes.CommitRequest)
  return target;
}

int CommitRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:DataTypes.CommitRequest)
  int total_size = 0;

  // repeated .DataTypes.Mutation mutations = 1;
  total_size += 1 * this->mutations_size();
  for (int i = 0; i < this->mutations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mutations(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommitRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DataTypes.CommitRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CommitRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CommitRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DataTypes.CommitRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DataTypes.CommitRequest)
    MergeFrom(*source);
  }
}

void CommitRequest::MergeFrom(const CommitRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DataTypes.CommitRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  mutations_.MergeFrom(from.mutations_);
}

void CommitRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DataTypes.CommitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommitRequest::CopyFrom(const CommitRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DataTypes.CommitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommitRequest::IsInitialized() const {

  return true;
}

void CommitRequest::Swap(CommitRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommitRequest::InternalSwap(CommitRequest* other) {
  mutations_.UnsafeArenaSwap(&other->mutations_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CommitRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommitRequest_descriptor_;
  metadata.reflection = CommitRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CommitRequest

// repeated .DataTypes.Mutation mutations = 1;
int CommitRequest::mutations_size() const {
  return mutations_.size();
}
void CommitRequest::clear_mutations() {
  mutations_.Clear();
}
const ::DataTypes::Mutation& CommitRequest::mutations(int index) const {
  // @@protoc_insertion_point(field_get:DataTypes.CommitRequest.mutations)
  return mutations_.Get(index);
}
::DataTypes::Mutation* CommitRequest::mutable_mutations(int index) {
  // @@protoc_insertion_point(field_mutable:DataTypes.CommitRequest.mutations)
  return mutations_.Mutable(index);
}
::DataTypes::Mutation* CommitRequest::add_mutations() {
  // @@protoc_insertion_point(field_add:DataTypes.CommitRequest.mutations)
  return mutations_.Add();
}
::google::protobuf::RepeatedPtrField< ::DataTypes::Mutation >*
CommitRequest::mutable_mutations() {
  // @@protoc_insertion_point(field_mutable_list:DataTypes.CommitRequest.mutations)
  return &mutations_;
}
const ::google::protobuf::RepeatedPtrField< ::DataTypes::Mutation >&
CommitRequest::mutations() const {
  // @@protoc_insertion_point(field_list:DataTypes.CommitRequest.mutations)
  return mutations_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommitResponse::kMutationResultsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommitResponse::CommitResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DataTypes.CommitResponse)
}

void CommitResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CommitResponse::CommitResponse(const CommitResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DataTypes.CommitResponse)
}

void CommitResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

CommitResponse::~CommitResponse() {
  // @@protoc_insertion_point(destructor:DataTypes.CommitResponse)
  SharedDtor();
}

void CommitResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CommitResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommitResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommitResponse_descriptor_;
}

const CommitResponse& CommitResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datatypes_2fcommands_2eproto();
  return *default_instance_;
}

CommitResponse* CommitResponse::default_instance_ = NULL;

CommitResponse* CommitResponse::New(::google::protobuf::Arena* arena) const {
  CommitResponse* n = new CommitResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CommitResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:DataTypes.CommitResponse)
  mutation_results_.Clear();
}

bool CommitResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DataTypes.CommitResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DataTypes.MutationResult mutation_results = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_mutation_results:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_mutation_results()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_mutation_results;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DataTypes.CommitResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DataTypes.CommitResponse)
  return false;
#undef DO_
}

void CommitResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DataTypes.CommitResponse)
  // repeated .DataTypes.MutationResult mutation_results = 1;
  for (unsigned int i = 0, n = this->mutation_results_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mutation_results(i), output);
  }

  // @@protoc_insertion_point(serialize_end:DataTypes.CommitResponse)
}

::google::protobuf::uint8* CommitResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DataTypes.CommitResponse)
  // repeated .DataTypes.MutationResult mutation_results = 1;
  for (unsigned int i = 0, n = this->mutation_results_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mutation_results(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:DataTypes.CommitResponse)
  return target;
}

int CommitResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:DataTypes.CommitResponse)
  int total_size = 0;

  // repeated .DataTypes.MutationResult mutation_results = 1;
  total_size += 1 * this->mutation_results_size();
  for (int i = 0; i < this->mutation_results_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mutation_results(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommitResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DataTypes.CommitResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CommitResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CommitResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DataTypes.CommitResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DataTypes.CommitResponse)
    MergeFrom(*source);
  }
}

void CommitResponse::MergeFrom(const CommitResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DataTypes.CommitResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  mutation_results_.MergeFrom(from.mutation_results_);
}

void CommitResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DataTypes.CommitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommitResponse::CopyFrom(const CommitResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DataTypes.CommitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommitResponse::IsInitialized() const {

  return true;
}

void CommitResponse::Swap(CommitResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommitResponse::InternalSwap(CommitResponse* other) {
  mutation_results_.UnsafeArenaSwap(&other->mutation_results_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CommitResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommitResponse_descriptor_;
  metadata.reflection = CommitResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CommitResponse

// repeated .DataTypes.MutationResult mutation_results = 1;
int CommitResponse::mutation_results_size() const {
  return mutation_results_.size();
}
void CommitResponse::clear_mutation_results() {
  mutation_results_.Clear();
}
const ::DataTypes::MutationResult& CommitResponse::mutation_results(int index) const {
  // @@protoc_insertion_point(field_get:DataTypes.CommitResponse.mutation_results)
  return mutation_results_.Get(index);
}
::DataTypes::MutationResult* CommitResponse::mutable_mutation_results(int index) {
  // @@protoc_insertion_point(field_mutable:DataTypes.CommitResponse.mutation_results)
  return mutation_results_.Mutable(index);
}
::DataTypes::MutationResult* CommitResponse::add_mutation_results() {
  // @@protoc_insertion_point(field_add:DataTypes.CommitResponse.mutation_results)
  return mutation_results_.Add();
}
::google::protobuf::RepeatedPtrField< ::DataTypes::MutationResult >*
CommitResponse::mutable_mutation_results() {
  // @@protoc_insertion_point(field_mutable_list:DataTypes.CommitResponse.mutation_results)
  return &mutation_results_;
}
const ::google::protobuf::RepeatedPtrField< ::DataTypes::MutationResult >&
CommitResponse::mutation_results() const {
  // @@protoc_insertion_point(field_list:DataTypes.CommitResponse.mutation_results)
  return mutation_results_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace DataTypes

// @@protoc_insertion_point(global_scope)
