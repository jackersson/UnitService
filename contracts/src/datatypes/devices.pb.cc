// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datatypes/devices.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "datatypes/devices.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace DataTypes {

namespace {

const ::google::protobuf::Descriptor* AccessDevice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccessDevice_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeviceUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeviceUpdate_reflection_ = NULL;
struct DeviceUpdateOneofInstance {
  const ::DataTypes::ConnectedDevices* connected_devices_;
  const ::DataTypes::DeviceStateMessage* device_state_msg_;
}* DeviceUpdate_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* ConnectedDevices_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnectedDevices_reflection_ = NULL;
const ::google::protobuf::Descriptor* Device_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Device_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeviceStateMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeviceStateMessage_reflection_ = NULL;
struct DeviceStateMessageOneofInstance {
  const ::DataTypes::GenericDeviceStateMsg* generic_device_state_msg_;
  const ::DataTypes::AccessDeviceStateMsg* access_device_state_msg_;
}* DeviceStateMessage_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* GenericDeviceStateMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GenericDeviceStateMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccessDeviceStateMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccessDeviceStateMsg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DeviceType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DeviceState_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_datatypes_2fdevices_2eproto() {
  protobuf_AddDesc_datatypes_2fdevices_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "datatypes/devices.proto");
  GOOGLE_CHECK(file != NULL);
  AccessDevice_descriptor_ = file->message_type(0);
  static const int AccessDevice_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessDevice, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessDevice, serial_number_),
  };
  AccessDevice_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AccessDevice_descriptor_,
      AccessDevice::default_instance_,
      AccessDevice_offsets_,
      -1,
      -1,
      -1,
      sizeof(AccessDevice),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessDevice, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessDevice, _is_default_instance_));
  DeviceUpdate_descriptor_ = file->message_type(1);
  static const int DeviceUpdate_offsets_[3] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(DeviceUpdate_default_oneof_instance_, connected_devices_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(DeviceUpdate_default_oneof_instance_, device_state_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceUpdate, update_),
  };
  DeviceUpdate_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DeviceUpdate_descriptor_,
      DeviceUpdate::default_instance_,
      DeviceUpdate_offsets_,
      -1,
      -1,
      -1,
      DeviceUpdate_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceUpdate, _oneof_case_[0]),
      sizeof(DeviceUpdate),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceUpdate, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceUpdate, _is_default_instance_));
  ConnectedDevices_descriptor_ = file->message_type(2);
  static const int ConnectedDevices_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectedDevices, location_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectedDevices, devices_),
  };
  ConnectedDevices_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ConnectedDevices_descriptor_,
      ConnectedDevices::default_instance_,
      ConnectedDevices_offsets_,
      -1,
      -1,
      -1,
      sizeof(ConnectedDevices),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectedDevices, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectedDevices, _is_default_instance_));
  Device_descriptor_ = file->message_type(3);
  static const int Device_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, device_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, device_names_),
  };
  Device_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Device_descriptor_,
      Device::default_instance_,
      Device_offsets_,
      -1,
      -1,
      -1,
      sizeof(Device),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, _is_default_instance_));
  DeviceStateMessage_descriptor_ = file->message_type(4);
  static const int DeviceStateMessage_offsets_[3] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(DeviceStateMessage_default_oneof_instance_, generic_device_state_msg_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(DeviceStateMessage_default_oneof_instance_, access_device_state_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceStateMessage, msg_),
  };
  DeviceStateMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DeviceStateMessage_descriptor_,
      DeviceStateMessage::default_instance_,
      DeviceStateMessage_offsets_,
      -1,
      -1,
      -1,
      DeviceStateMessage_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceStateMessage, _oneof_case_[0]),
      sizeof(DeviceStateMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceStateMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceStateMessage, _is_default_instance_));
  GenericDeviceStateMsg_descriptor_ = file->message_type(5);
  static const int GenericDeviceStateMsg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericDeviceStateMsg, location_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericDeviceStateMsg, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericDeviceStateMsg, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericDeviceStateMsg, message_),
  };
  GenericDeviceStateMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GenericDeviceStateMsg_descriptor_,
      GenericDeviceStateMsg::default_instance_,
      GenericDeviceStateMsg_offsets_,
      -1,
      -1,
      -1,
      sizeof(GenericDeviceStateMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericDeviceStateMsg, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericDeviceStateMsg, _is_default_instance_));
  AccessDeviceStateMsg_descriptor_ = file->message_type(6);
  static const int AccessDeviceStateMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessDeviceStateMsg, location_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessDeviceStateMsg, opened_),
  };
  AccessDeviceStateMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AccessDeviceStateMsg_descriptor_,
      AccessDeviceStateMsg::default_instance_,
      AccessDeviceStateMsg_offsets_,
      -1,
      -1,
      -1,
      sizeof(AccessDeviceStateMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessDeviceStateMsg, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessDeviceStateMsg, _is_default_instance_));
  DeviceType_descriptor_ = file->enum_type(0);
  DeviceState_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_datatypes_2fdevices_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AccessDevice_descriptor_, &AccessDevice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DeviceUpdate_descriptor_, &DeviceUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ConnectedDevices_descriptor_, &ConnectedDevices::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Device_descriptor_, &Device::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DeviceStateMessage_descriptor_, &DeviceStateMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GenericDeviceStateMsg_descriptor_, &GenericDeviceStateMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AccessDeviceStateMsg_descriptor_, &AccessDeviceStateMsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_datatypes_2fdevices_2eproto() {
  delete AccessDevice::default_instance_;
  delete AccessDevice_reflection_;
  delete DeviceUpdate::default_instance_;
  delete DeviceUpdate_default_oneof_instance_;
  delete DeviceUpdate_reflection_;
  delete ConnectedDevices::default_instance_;
  delete ConnectedDevices_reflection_;
  delete Device::default_instance_;
  delete Device_reflection_;
  delete DeviceStateMessage::default_instance_;
  delete DeviceStateMessage_default_oneof_instance_;
  delete DeviceStateMessage_reflection_;
  delete GenericDeviceStateMsg::default_instance_;
  delete GenericDeviceStateMsg_reflection_;
  delete AccessDeviceStateMsg::default_instance_;
  delete AccessDeviceStateMsg_reflection_;
}

void protobuf_AddDesc_datatypes_2fdevices_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DataTypes::protobuf_AddDesc_datatypes_2fdata_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027datatypes/devices.proto\022\tDataTypes\032\024da"
    "tatypes/data.proto\"3\n\014AccessDevice\022\014\n\004na"
    "me\030\001 \001(\t\022\025\n\rserial_number\030\002 \001(\006\"\215\001\n\014Devi"
    "ceUpdate\0228\n\021connected_devices\030\001 \001(\0132\033.Da"
    "taTypes.ConnectedDevicesH\000\0229\n\020device_sta"
    "te_msg\030\002 \001(\0132\035.DataTypes.DeviceStateMess"
    "ageH\000B\010\n\006update\"[\n\020ConnectedDevices\022#\n\013l"
    "ocation_id\030\001 \001(\0132\016.DataTypes.Key\022\"\n\007devi"
    "ces\030\002 \003(\0132\021.DataTypes.Device\"J\n\006Device\022*"
    "\n\013device_type\030\001 \001(\0162\025.DataTypes.DeviceTy"
    "pe\022\024\n\014device_names\030\002 \001(\t\"\245\001\n\022DeviceState"
    "Message\022D\n\030generic_device_state_msg\030\001 \001("
    "\0132 .DataTypes.GenericDeviceStateMsgH\000\022B\n"
    "\027access_device_state_msg\030\002 \001(\0132\037.DataTyp"
    "es.AccessDeviceStateMsgH\000B\005\n\003msg\"\231\001\n\025Gen"
    "ericDeviceStateMsg\022#\n\013location_id\030\001 \001(\0132"
    "\016.DataTypes.Key\022#\n\004type\030\002 \001(\0162\025.DataType"
    "s.DeviceType\022%\n\005state\030\003 \001(\0162\026.DataTypes."
    "DeviceState\022\017\n\007message\030\004 \001(\t\"K\n\024AccessDe"
    "viceStateMsg\022#\n\013location_id\030\001 \001(\0132\016.Data"
    "Types.Key\022\016\n\006opened\030\002 \001(\010*8\n\nDeviceType\022"
    "\r\n\tNone_Type\020\000\022\016\n\nCardReader\020\001\022\013\n\007Captur"
    "e\020\002*`\n\013DeviceState\022\016\n\nNone_State\020\000\022\n\n\006Ac"
    "tive\020\001\022\021\n\rStoppedByUser\020\002\022\n\n\006Paused\020\003\022\013\n"
    "\007Stopped\020\004\022\t\n\005Error\020\005BL\n\007ex.grpcZ;github"
    ".com/Enebra/ServiceCoordinator/grpc/data"
    "types/devices\242\002\003RTGb\006proto3", 1067);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "datatypes/devices.proto", &protobuf_RegisterTypes);
  AccessDevice::default_instance_ = new AccessDevice();
  DeviceUpdate::default_instance_ = new DeviceUpdate();
  DeviceUpdate_default_oneof_instance_ = new DeviceUpdateOneofInstance();
  ConnectedDevices::default_instance_ = new ConnectedDevices();
  Device::default_instance_ = new Device();
  DeviceStateMessage::default_instance_ = new DeviceStateMessage();
  DeviceStateMessage_default_oneof_instance_ = new DeviceStateMessageOneofInstance();
  GenericDeviceStateMsg::default_instance_ = new GenericDeviceStateMsg();
  AccessDeviceStateMsg::default_instance_ = new AccessDeviceStateMsg();
  AccessDevice::default_instance_->InitAsDefaultInstance();
  DeviceUpdate::default_instance_->InitAsDefaultInstance();
  ConnectedDevices::default_instance_->InitAsDefaultInstance();
  Device::default_instance_->InitAsDefaultInstance();
  DeviceStateMessage::default_instance_->InitAsDefaultInstance();
  GenericDeviceStateMsg::default_instance_->InitAsDefaultInstance();
  AccessDeviceStateMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_datatypes_2fdevices_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_datatypes_2fdevices_2eproto {
  StaticDescriptorInitializer_datatypes_2fdevices_2eproto() {
    protobuf_AddDesc_datatypes_2fdevices_2eproto();
  }
} static_descriptor_initializer_datatypes_2fdevices_2eproto_;
const ::google::protobuf::EnumDescriptor* DeviceType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceType_descriptor_;
}
bool DeviceType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DeviceState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceState_descriptor_;
}
bool DeviceState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccessDevice::kNameFieldNumber;
const int AccessDevice::kSerialNumberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccessDevice::AccessDevice()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DataTypes.AccessDevice)
}

void AccessDevice::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

AccessDevice::AccessDevice(const AccessDevice& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DataTypes.AccessDevice)
}

void AccessDevice::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_ = GOOGLE_ULONGLONG(0);
}

AccessDevice::~AccessDevice() {
  // @@protoc_insertion_point(destructor:DataTypes.AccessDevice)
  SharedDtor();
}

void AccessDevice::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void AccessDevice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccessDevice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccessDevice_descriptor_;
}

const AccessDevice& AccessDevice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datatypes_2fdevices_2eproto();
  return *default_instance_;
}

AccessDevice* AccessDevice::default_instance_ = NULL;

AccessDevice* AccessDevice::New(::google::protobuf::Arena* arena) const {
  AccessDevice* n = new AccessDevice;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AccessDevice::Clear() {
// @@protoc_insertion_point(message_clear_start:DataTypes.AccessDevice)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_ = GOOGLE_ULONGLONG(0);
}

bool AccessDevice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DataTypes.AccessDevice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DataTypes.AccessDevice.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_serial_number;
        break;
      }

      // optional fixed64 serial_number = 2;
      case 2: {
        if (tag == 17) {
         parse_serial_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &serial_number_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DataTypes.AccessDevice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DataTypes.AccessDevice)
  return false;
#undef DO_
}

void AccessDevice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DataTypes.AccessDevice)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DataTypes.AccessDevice.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional fixed64 serial_number = 2;
  if (this->serial_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->serial_number(), output);
  }

  // @@protoc_insertion_point(serialize_end:DataTypes.AccessDevice)
}

::google::protobuf::uint8* AccessDevice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DataTypes.AccessDevice)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DataTypes.AccessDevice.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional fixed64 serial_number = 2;
  if (this->serial_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->serial_number(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:DataTypes.AccessDevice)
  return target;
}

int AccessDevice::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:DataTypes.AccessDevice)
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional fixed64 serial_number = 2;
  if (this->serial_number() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccessDevice::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DataTypes.AccessDevice)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AccessDevice* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AccessDevice>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DataTypes.AccessDevice)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DataTypes.AccessDevice)
    MergeFrom(*source);
  }
}

void AccessDevice::MergeFrom(const AccessDevice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DataTypes.AccessDevice)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.serial_number() != 0) {
    set_serial_number(from.serial_number());
  }
}

void AccessDevice::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DataTypes.AccessDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccessDevice::CopyFrom(const AccessDevice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DataTypes.AccessDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccessDevice::IsInitialized() const {

  return true;
}

void AccessDevice::Swap(AccessDevice* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccessDevice::InternalSwap(AccessDevice* other) {
  name_.Swap(&other->name_);
  std::swap(serial_number_, other->serial_number_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AccessDevice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccessDevice_descriptor_;
  metadata.reflection = AccessDevice_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AccessDevice

// optional string name = 1;
void AccessDevice::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& AccessDevice::name() const {
  // @@protoc_insertion_point(field_get:DataTypes.AccessDevice.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AccessDevice::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DataTypes.AccessDevice.name)
}
 void AccessDevice::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DataTypes.AccessDevice.name)
}
 void AccessDevice::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DataTypes.AccessDevice.name)
}
 ::std::string* AccessDevice::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:DataTypes.AccessDevice.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AccessDevice::release_name() {
  // @@protoc_insertion_point(field_release:DataTypes.AccessDevice.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AccessDevice::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:DataTypes.AccessDevice.name)
}

// optional fixed64 serial_number = 2;
void AccessDevice::clear_serial_number() {
  serial_number_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 AccessDevice::serial_number() const {
  // @@protoc_insertion_point(field_get:DataTypes.AccessDevice.serial_number)
  return serial_number_;
}
 void AccessDevice::set_serial_number(::google::protobuf::uint64 value) {
  
  serial_number_ = value;
  // @@protoc_insertion_point(field_set:DataTypes.AccessDevice.serial_number)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceUpdate::kConnectedDevicesFieldNumber;
const int DeviceUpdate::kDeviceStateMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceUpdate::DeviceUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DataTypes.DeviceUpdate)
}

void DeviceUpdate::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  DeviceUpdate_default_oneof_instance_->connected_devices_ = const_cast< ::DataTypes::ConnectedDevices*>(&::DataTypes::ConnectedDevices::default_instance());
  DeviceUpdate_default_oneof_instance_->device_state_msg_ = const_cast< ::DataTypes::DeviceStateMessage*>(&::DataTypes::DeviceStateMessage::default_instance());
}

DeviceUpdate::DeviceUpdate(const DeviceUpdate& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DataTypes.DeviceUpdate)
}

void DeviceUpdate::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  clear_has_update();
}

DeviceUpdate::~DeviceUpdate() {
  // @@protoc_insertion_point(destructor:DataTypes.DeviceUpdate)
  SharedDtor();
}

void DeviceUpdate::SharedDtor() {
  if (has_update()) {
    clear_update();
  }
  if (this != default_instance_) {
  }
}

void DeviceUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceUpdate_descriptor_;
}

const DeviceUpdate& DeviceUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datatypes_2fdevices_2eproto();
  return *default_instance_;
}

DeviceUpdate* DeviceUpdate::default_instance_ = NULL;

DeviceUpdate* DeviceUpdate::New(::google::protobuf::Arena* arena) const {
  DeviceUpdate* n = new DeviceUpdate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeviceUpdate::clear_update() {
// @@protoc_insertion_point(one_of_clear_start:DataTypes.DeviceUpdate)
  switch(update_case()) {
    case kConnectedDevices: {
      delete update_.connected_devices_;
      break;
    }
    case kDeviceStateMsg: {
      delete update_.device_state_msg_;
      break;
    }
    case UPDATE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = UPDATE_NOT_SET;
}


void DeviceUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:DataTypes.DeviceUpdate)
  clear_update();
}

bool DeviceUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DataTypes.DeviceUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DataTypes.ConnectedDevices connected_devices = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_connected_devices()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_device_state_msg;
        break;
      }

      // optional .DataTypes.DeviceStateMessage device_state_msg = 2;
      case 2: {
        if (tag == 18) {
         parse_device_state_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device_state_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DataTypes.DeviceUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DataTypes.DeviceUpdate)
  return false;
#undef DO_
}

void DeviceUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DataTypes.DeviceUpdate)
  // optional .DataTypes.ConnectedDevices connected_devices = 1;
  if (has_connected_devices()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *update_.connected_devices_, output);
  }

  // optional .DataTypes.DeviceStateMessage device_state_msg = 2;
  if (has_device_state_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *update_.device_state_msg_, output);
  }

  // @@protoc_insertion_point(serialize_end:DataTypes.DeviceUpdate)
}

::google::protobuf::uint8* DeviceUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DataTypes.DeviceUpdate)
  // optional .DataTypes.ConnectedDevices connected_devices = 1;
  if (has_connected_devices()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *update_.connected_devices_, target);
  }

  // optional .DataTypes.DeviceStateMessage device_state_msg = 2;
  if (has_device_state_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *update_.device_state_msg_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:DataTypes.DeviceUpdate)
  return target;
}

int DeviceUpdate::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:DataTypes.DeviceUpdate)
  int total_size = 0;

  switch (update_case()) {
    // optional .DataTypes.ConnectedDevices connected_devices = 1;
    case kConnectedDevices: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *update_.connected_devices_);
      break;
    }
    // optional .DataTypes.DeviceStateMessage device_state_msg = 2;
    case kDeviceStateMsg: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *update_.device_state_msg_);
      break;
    }
    case UPDATE_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DataTypes.DeviceUpdate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DeviceUpdate* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DeviceUpdate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DataTypes.DeviceUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DataTypes.DeviceUpdate)
    MergeFrom(*source);
  }
}

void DeviceUpdate::MergeFrom(const DeviceUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DataTypes.DeviceUpdate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  switch (from.update_case()) {
    case kConnectedDevices: {
      mutable_connected_devices()->::DataTypes::ConnectedDevices::MergeFrom(from.connected_devices());
      break;
    }
    case kDeviceStateMsg: {
      mutable_device_state_msg()->::DataTypes::DeviceStateMessage::MergeFrom(from.device_state_msg());
      break;
    }
    case UPDATE_NOT_SET: {
      break;
    }
  }
}

void DeviceUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DataTypes.DeviceUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceUpdate::CopyFrom(const DeviceUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DataTypes.DeviceUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceUpdate::IsInitialized() const {

  return true;
}

void DeviceUpdate::Swap(DeviceUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceUpdate::InternalSwap(DeviceUpdate* other) {
  std::swap(update_, other->update_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeviceUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeviceUpdate_descriptor_;
  metadata.reflection = DeviceUpdate_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceUpdate

// optional .DataTypes.ConnectedDevices connected_devices = 1;
bool DeviceUpdate::has_connected_devices() const {
  return update_case() == kConnectedDevices;
}
void DeviceUpdate::set_has_connected_devices() {
  _oneof_case_[0] = kConnectedDevices;
}
void DeviceUpdate::clear_connected_devices() {
  if (has_connected_devices()) {
    delete update_.connected_devices_;
    clear_has_update();
  }
}
 const ::DataTypes::ConnectedDevices& DeviceUpdate::connected_devices() const {
  // @@protoc_insertion_point(field_get:DataTypes.DeviceUpdate.connected_devices)
  return has_connected_devices()
      ? *update_.connected_devices_
      : ::DataTypes::ConnectedDevices::default_instance();
}
::DataTypes::ConnectedDevices* DeviceUpdate::mutable_connected_devices() {
  if (!has_connected_devices()) {
    clear_update();
    set_has_connected_devices();
    update_.connected_devices_ = new ::DataTypes::ConnectedDevices;
  }
  // @@protoc_insertion_point(field_mutable:DataTypes.DeviceUpdate.connected_devices)
  return update_.connected_devices_;
}
::DataTypes::ConnectedDevices* DeviceUpdate::release_connected_devices() {
  // @@protoc_insertion_point(field_release:DataTypes.DeviceUpdate.connected_devices)
  if (has_connected_devices()) {
    clear_has_update();
    ::DataTypes::ConnectedDevices* temp = update_.connected_devices_;
    update_.connected_devices_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void DeviceUpdate::set_allocated_connected_devices(::DataTypes::ConnectedDevices* connected_devices) {
  clear_update();
  if (connected_devices) {
    set_has_connected_devices();
    update_.connected_devices_ = connected_devices;
  }
  // @@protoc_insertion_point(field_set_allocated:DataTypes.DeviceUpdate.connected_devices)
}

// optional .DataTypes.DeviceStateMessage device_state_msg = 2;
bool DeviceUpdate::has_device_state_msg() const {
  return update_case() == kDeviceStateMsg;
}
void DeviceUpdate::set_has_device_state_msg() {
  _oneof_case_[0] = kDeviceStateMsg;
}
void DeviceUpdate::clear_device_state_msg() {
  if (has_device_state_msg()) {
    delete update_.device_state_msg_;
    clear_has_update();
  }
}
 const ::DataTypes::DeviceStateMessage& DeviceUpdate::device_state_msg() const {
  // @@protoc_insertion_point(field_get:DataTypes.DeviceUpdate.device_state_msg)
  return has_device_state_msg()
      ? *update_.device_state_msg_
      : ::DataTypes::DeviceStateMessage::default_instance();
}
::DataTypes::DeviceStateMessage* DeviceUpdate::mutable_device_state_msg() {
  if (!has_device_state_msg()) {
    clear_update();
    set_has_device_state_msg();
    update_.device_state_msg_ = new ::DataTypes::DeviceStateMessage;
  }
  // @@protoc_insertion_point(field_mutable:DataTypes.DeviceUpdate.device_state_msg)
  return update_.device_state_msg_;
}
::DataTypes::DeviceStateMessage* DeviceUpdate::release_device_state_msg() {
  // @@protoc_insertion_point(field_release:DataTypes.DeviceUpdate.device_state_msg)
  if (has_device_state_msg()) {
    clear_has_update();
    ::DataTypes::DeviceStateMessage* temp = update_.device_state_msg_;
    update_.device_state_msg_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void DeviceUpdate::set_allocated_device_state_msg(::DataTypes::DeviceStateMessage* device_state_msg) {
  clear_update();
  if (device_state_msg) {
    set_has_device_state_msg();
    update_.device_state_msg_ = device_state_msg;
  }
  // @@protoc_insertion_point(field_set_allocated:DataTypes.DeviceUpdate.device_state_msg)
}

bool DeviceUpdate::has_update() const {
  return update_case() != UPDATE_NOT_SET;
}
void DeviceUpdate::clear_has_update() {
  _oneof_case_[0] = UPDATE_NOT_SET;
}
DeviceUpdate::UpdateCase DeviceUpdate::update_case() const {
  return DeviceUpdate::UpdateCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConnectedDevices::kLocationIdFieldNumber;
const int ConnectedDevices::kDevicesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConnectedDevices::ConnectedDevices()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DataTypes.ConnectedDevices)
}

void ConnectedDevices::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  location_id_ = const_cast< ::DataTypes::Key*>(&::DataTypes::Key::default_instance());
}

ConnectedDevices::ConnectedDevices(const ConnectedDevices& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DataTypes.ConnectedDevices)
}

void ConnectedDevices::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  location_id_ = NULL;
}

ConnectedDevices::~ConnectedDevices() {
  // @@protoc_insertion_point(destructor:DataTypes.ConnectedDevices)
  SharedDtor();
}

void ConnectedDevices::SharedDtor() {
  if (this != default_instance_) {
    delete location_id_;
  }
}

void ConnectedDevices::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnectedDevices::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnectedDevices_descriptor_;
}

const ConnectedDevices& ConnectedDevices::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datatypes_2fdevices_2eproto();
  return *default_instance_;
}

ConnectedDevices* ConnectedDevices::default_instance_ = NULL;

ConnectedDevices* ConnectedDevices::New(::google::protobuf::Arena* arena) const {
  ConnectedDevices* n = new ConnectedDevices;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConnectedDevices::Clear() {
// @@protoc_insertion_point(message_clear_start:DataTypes.ConnectedDevices)
  if (GetArenaNoVirtual() == NULL && location_id_ != NULL) delete location_id_;
  location_id_ = NULL;
  devices_.Clear();
}

bool ConnectedDevices::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DataTypes.ConnectedDevices)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DataTypes.Key location_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_devices;
        break;
      }

      // repeated .DataTypes.Device devices = 2;
      case 2: {
        if (tag == 18) {
         parse_devices:
          DO_(input->IncrementRecursionDepth());
         parse_loop_devices:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_devices()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_devices;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DataTypes.ConnectedDevices)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DataTypes.ConnectedDevices)
  return false;
#undef DO_
}

void ConnectedDevices::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DataTypes.ConnectedDevices)
  // optional .DataTypes.Key location_id = 1;
  if (this->has_location_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->location_id_, output);
  }

  // repeated .DataTypes.Device devices = 2;
  for (unsigned int i = 0, n = this->devices_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->devices(i), output);
  }

  // @@protoc_insertion_point(serialize_end:DataTypes.ConnectedDevices)
}

::google::protobuf::uint8* ConnectedDevices::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DataTypes.ConnectedDevices)
  // optional .DataTypes.Key location_id = 1;
  if (this->has_location_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->location_id_, target);
  }

  // repeated .DataTypes.Device devices = 2;
  for (unsigned int i = 0, n = this->devices_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->devices(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:DataTypes.ConnectedDevices)
  return target;
}

int ConnectedDevices::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:DataTypes.ConnectedDevices)
  int total_size = 0;

  // optional .DataTypes.Key location_id = 1;
  if (this->has_location_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->location_id_);
  }

  // repeated .DataTypes.Device devices = 2;
  total_size += 1 * this->devices_size();
  for (int i = 0; i < this->devices_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->devices(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnectedDevices::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DataTypes.ConnectedDevices)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ConnectedDevices* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ConnectedDevices>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DataTypes.ConnectedDevices)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DataTypes.ConnectedDevices)
    MergeFrom(*source);
  }
}

void ConnectedDevices::MergeFrom(const ConnectedDevices& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DataTypes.ConnectedDevices)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  devices_.MergeFrom(from.devices_);
  if (from.has_location_id()) {
    mutable_location_id()->::DataTypes::Key::MergeFrom(from.location_id());
  }
}

void ConnectedDevices::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DataTypes.ConnectedDevices)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectedDevices::CopyFrom(const ConnectedDevices& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DataTypes.ConnectedDevices)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectedDevices::IsInitialized() const {

  return true;
}

void ConnectedDevices::Swap(ConnectedDevices* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConnectedDevices::InternalSwap(ConnectedDevices* other) {
  std::swap(location_id_, other->location_id_);
  devices_.UnsafeArenaSwap(&other->devices_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConnectedDevices::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnectedDevices_descriptor_;
  metadata.reflection = ConnectedDevices_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConnectedDevices

// optional .DataTypes.Key location_id = 1;
bool ConnectedDevices::has_location_id() const {
  return !_is_default_instance_ && location_id_ != NULL;
}
void ConnectedDevices::clear_location_id() {
  if (GetArenaNoVirtual() == NULL && location_id_ != NULL) delete location_id_;
  location_id_ = NULL;
}
const ::DataTypes::Key& ConnectedDevices::location_id() const {
  // @@protoc_insertion_point(field_get:DataTypes.ConnectedDevices.location_id)
  return location_id_ != NULL ? *location_id_ : *default_instance_->location_id_;
}
::DataTypes::Key* ConnectedDevices::mutable_location_id() {
  
  if (location_id_ == NULL) {
    location_id_ = new ::DataTypes::Key;
  }
  // @@protoc_insertion_point(field_mutable:DataTypes.ConnectedDevices.location_id)
  return location_id_;
}
::DataTypes::Key* ConnectedDevices::release_location_id() {
  // @@protoc_insertion_point(field_release:DataTypes.ConnectedDevices.location_id)
  
  ::DataTypes::Key* temp = location_id_;
  location_id_ = NULL;
  return temp;
}
void ConnectedDevices::set_allocated_location_id(::DataTypes::Key* location_id) {
  delete location_id_;
  location_id_ = location_id;
  if (location_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:DataTypes.ConnectedDevices.location_id)
}

// repeated .DataTypes.Device devices = 2;
int ConnectedDevices::devices_size() const {
  return devices_.size();
}
void ConnectedDevices::clear_devices() {
  devices_.Clear();
}
const ::DataTypes::Device& ConnectedDevices::devices(int index) const {
  // @@protoc_insertion_point(field_get:DataTypes.ConnectedDevices.devices)
  return devices_.Get(index);
}
::DataTypes::Device* ConnectedDevices::mutable_devices(int index) {
  // @@protoc_insertion_point(field_mutable:DataTypes.ConnectedDevices.devices)
  return devices_.Mutable(index);
}
::DataTypes::Device* ConnectedDevices::add_devices() {
  // @@protoc_insertion_point(field_add:DataTypes.ConnectedDevices.devices)
  return devices_.Add();
}
::google::protobuf::RepeatedPtrField< ::DataTypes::Device >*
ConnectedDevices::mutable_devices() {
  // @@protoc_insertion_point(field_mutable_list:DataTypes.ConnectedDevices.devices)
  return &devices_;
}
const ::google::protobuf::RepeatedPtrField< ::DataTypes::Device >&
ConnectedDevices::devices() const {
  // @@protoc_insertion_point(field_list:DataTypes.ConnectedDevices.devices)
  return devices_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Device::kDeviceTypeFieldNumber;
const int Device::kDeviceNamesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Device::Device()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DataTypes.Device)
}

void Device::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Device::Device(const Device& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DataTypes.Device)
}

void Device::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  device_type_ = 0;
  device_names_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Device::~Device() {
  // @@protoc_insertion_point(destructor:DataTypes.Device)
  SharedDtor();
}

void Device::SharedDtor() {
  device_names_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Device::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Device::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Device_descriptor_;
}

const Device& Device::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datatypes_2fdevices_2eproto();
  return *default_instance_;
}

Device* Device::default_instance_ = NULL;

Device* Device::New(::google::protobuf::Arena* arena) const {
  Device* n = new Device;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Device::Clear() {
// @@protoc_insertion_point(message_clear_start:DataTypes.Device)
  device_type_ = 0;
  device_names_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Device::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DataTypes.Device)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DataTypes.DeviceType device_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_device_type(static_cast< ::DataTypes::DeviceType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_device_names;
        break;
      }

      // optional string device_names = 2;
      case 2: {
        if (tag == 18) {
         parse_device_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_names()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->device_names().data(), this->device_names().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DataTypes.Device.device_names"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DataTypes.Device)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DataTypes.Device)
  return false;
#undef DO_
}

void Device::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DataTypes.Device)
  // optional .DataTypes.DeviceType device_type = 1;
  if (this->device_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->device_type(), output);
  }

  // optional string device_names = 2;
  if (this->device_names().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_names().data(), this->device_names().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DataTypes.Device.device_names");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->device_names(), output);
  }

  // @@protoc_insertion_point(serialize_end:DataTypes.Device)
}

::google::protobuf::uint8* Device::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DataTypes.Device)
  // optional .DataTypes.DeviceType device_type = 1;
  if (this->device_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->device_type(), target);
  }

  // optional string device_names = 2;
  if (this->device_names().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_names().data(), this->device_names().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DataTypes.Device.device_names");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->device_names(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:DataTypes.Device)
  return target;
}

int Device::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:DataTypes.Device)
  int total_size = 0;

  // optional .DataTypes.DeviceType device_type = 1;
  if (this->device_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->device_type());
  }

  // optional string device_names = 2;
  if (this->device_names().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->device_names());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Device::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DataTypes.Device)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Device* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Device>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DataTypes.Device)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DataTypes.Device)
    MergeFrom(*source);
  }
}

void Device::MergeFrom(const Device& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DataTypes.Device)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.device_type() != 0) {
    set_device_type(from.device_type());
  }
  if (from.device_names().size() > 0) {

    device_names_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_names_);
  }
}

void Device::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DataTypes.Device)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Device::CopyFrom(const Device& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DataTypes.Device)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Device::IsInitialized() const {

  return true;
}

void Device::Swap(Device* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Device::InternalSwap(Device* other) {
  std::swap(device_type_, other->device_type_);
  device_names_.Swap(&other->device_names_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Device::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Device_descriptor_;
  metadata.reflection = Device_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Device

// optional .DataTypes.DeviceType device_type = 1;
void Device::clear_device_type() {
  device_type_ = 0;
}
 ::DataTypes::DeviceType Device::device_type() const {
  // @@protoc_insertion_point(field_get:DataTypes.Device.device_type)
  return static_cast< ::DataTypes::DeviceType >(device_type_);
}
 void Device::set_device_type(::DataTypes::DeviceType value) {
  
  device_type_ = value;
  // @@protoc_insertion_point(field_set:DataTypes.Device.device_type)
}

// optional string device_names = 2;
void Device::clear_device_names() {
  device_names_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Device::device_names() const {
  // @@protoc_insertion_point(field_get:DataTypes.Device.device_names)
  return device_names_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Device::set_device_names(const ::std::string& value) {
  
  device_names_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DataTypes.Device.device_names)
}
 void Device::set_device_names(const char* value) {
  
  device_names_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DataTypes.Device.device_names)
}
 void Device::set_device_names(const char* value, size_t size) {
  
  device_names_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DataTypes.Device.device_names)
}
 ::std::string* Device::mutable_device_names() {
  
  // @@protoc_insertion_point(field_mutable:DataTypes.Device.device_names)
  return device_names_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Device::release_device_names() {
  // @@protoc_insertion_point(field_release:DataTypes.Device.device_names)
  
  return device_names_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Device::set_allocated_device_names(::std::string* device_names) {
  if (device_names != NULL) {
    
  } else {
    
  }
  device_names_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_names);
  // @@protoc_insertion_point(field_set_allocated:DataTypes.Device.device_names)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceStateMessage::kGenericDeviceStateMsgFieldNumber;
const int DeviceStateMessage::kAccessDeviceStateMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceStateMessage::DeviceStateMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DataTypes.DeviceStateMessage)
}

void DeviceStateMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  DeviceStateMessage_default_oneof_instance_->generic_device_state_msg_ = const_cast< ::DataTypes::GenericDeviceStateMsg*>(&::DataTypes::GenericDeviceStateMsg::default_instance());
  DeviceStateMessage_default_oneof_instance_->access_device_state_msg_ = const_cast< ::DataTypes::AccessDeviceStateMsg*>(&::DataTypes::AccessDeviceStateMsg::default_instance());
}

DeviceStateMessage::DeviceStateMessage(const DeviceStateMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DataTypes.DeviceStateMessage)
}

void DeviceStateMessage::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  clear_has_msg();
}

DeviceStateMessage::~DeviceStateMessage() {
  // @@protoc_insertion_point(destructor:DataTypes.DeviceStateMessage)
  SharedDtor();
}

void DeviceStateMessage::SharedDtor() {
  if (has_msg()) {
    clear_msg();
  }
  if (this != default_instance_) {
  }
}

void DeviceStateMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceStateMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceStateMessage_descriptor_;
}

const DeviceStateMessage& DeviceStateMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datatypes_2fdevices_2eproto();
  return *default_instance_;
}

DeviceStateMessage* DeviceStateMessage::default_instance_ = NULL;

DeviceStateMessage* DeviceStateMessage::New(::google::protobuf::Arena* arena) const {
  DeviceStateMessage* n = new DeviceStateMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeviceStateMessage::clear_msg() {
// @@protoc_insertion_point(one_of_clear_start:DataTypes.DeviceStateMessage)
  switch(msg_case()) {
    case kGenericDeviceStateMsg: {
      delete msg_.generic_device_state_msg_;
      break;
    }
    case kAccessDeviceStateMsg: {
      delete msg_.access_device_state_msg_;
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MSG_NOT_SET;
}


void DeviceStateMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:DataTypes.DeviceStateMessage)
  clear_msg();
}

bool DeviceStateMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DataTypes.DeviceStateMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DataTypes.GenericDeviceStateMsg generic_device_state_msg = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_generic_device_state_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_access_device_state_msg;
        break;
      }

      // optional .DataTypes.AccessDeviceStateMsg access_device_state_msg = 2;
      case 2: {
        if (tag == 18) {
         parse_access_device_state_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_access_device_state_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DataTypes.DeviceStateMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DataTypes.DeviceStateMessage)
  return false;
#undef DO_
}

void DeviceStateMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DataTypes.DeviceStateMessage)
  // optional .DataTypes.GenericDeviceStateMsg generic_device_state_msg = 1;
  if (has_generic_device_state_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *msg_.generic_device_state_msg_, output);
  }

  // optional .DataTypes.AccessDeviceStateMsg access_device_state_msg = 2;
  if (has_access_device_state_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *msg_.access_device_state_msg_, output);
  }

  // @@protoc_insertion_point(serialize_end:DataTypes.DeviceStateMessage)
}

::google::protobuf::uint8* DeviceStateMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DataTypes.DeviceStateMessage)
  // optional .DataTypes.GenericDeviceStateMsg generic_device_state_msg = 1;
  if (has_generic_device_state_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *msg_.generic_device_state_msg_, target);
  }

  // optional .DataTypes.AccessDeviceStateMsg access_device_state_msg = 2;
  if (has_access_device_state_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *msg_.access_device_state_msg_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:DataTypes.DeviceStateMessage)
  return target;
}

int DeviceStateMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:DataTypes.DeviceStateMessage)
  int total_size = 0;

  switch (msg_case()) {
    // optional .DataTypes.GenericDeviceStateMsg generic_device_state_msg = 1;
    case kGenericDeviceStateMsg: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.generic_device_state_msg_);
      break;
    }
    // optional .DataTypes.AccessDeviceStateMsg access_device_state_msg = 2;
    case kAccessDeviceStateMsg: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.access_device_state_msg_);
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceStateMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DataTypes.DeviceStateMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DeviceStateMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DeviceStateMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DataTypes.DeviceStateMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DataTypes.DeviceStateMessage)
    MergeFrom(*source);
  }
}

void DeviceStateMessage::MergeFrom(const DeviceStateMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DataTypes.DeviceStateMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  switch (from.msg_case()) {
    case kGenericDeviceStateMsg: {
      mutable_generic_device_state_msg()->::DataTypes::GenericDeviceStateMsg::MergeFrom(from.generic_device_state_msg());
      break;
    }
    case kAccessDeviceStateMsg: {
      mutable_access_device_state_msg()->::DataTypes::AccessDeviceStateMsg::MergeFrom(from.access_device_state_msg());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
}

void DeviceStateMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DataTypes.DeviceStateMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceStateMessage::CopyFrom(const DeviceStateMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DataTypes.DeviceStateMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceStateMessage::IsInitialized() const {

  return true;
}

void DeviceStateMessage::Swap(DeviceStateMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceStateMessage::InternalSwap(DeviceStateMessage* other) {
  std::swap(msg_, other->msg_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeviceStateMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeviceStateMessage_descriptor_;
  metadata.reflection = DeviceStateMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceStateMessage

// optional .DataTypes.GenericDeviceStateMsg generic_device_state_msg = 1;
bool DeviceStateMessage::has_generic_device_state_msg() const {
  return msg_case() == kGenericDeviceStateMsg;
}
void DeviceStateMessage::set_has_generic_device_state_msg() {
  _oneof_case_[0] = kGenericDeviceStateMsg;
}
void DeviceStateMessage::clear_generic_device_state_msg() {
  if (has_generic_device_state_msg()) {
    delete msg_.generic_device_state_msg_;
    clear_has_msg();
  }
}
 const ::DataTypes::GenericDeviceStateMsg& DeviceStateMessage::generic_device_state_msg() const {
  // @@protoc_insertion_point(field_get:DataTypes.DeviceStateMessage.generic_device_state_msg)
  return has_generic_device_state_msg()
      ? *msg_.generic_device_state_msg_
      : ::DataTypes::GenericDeviceStateMsg::default_instance();
}
::DataTypes::GenericDeviceStateMsg* DeviceStateMessage::mutable_generic_device_state_msg() {
  if (!has_generic_device_state_msg()) {
    clear_msg();
    set_has_generic_device_state_msg();
    msg_.generic_device_state_msg_ = new ::DataTypes::GenericDeviceStateMsg;
  }
  // @@protoc_insertion_point(field_mutable:DataTypes.DeviceStateMessage.generic_device_state_msg)
  return msg_.generic_device_state_msg_;
}
::DataTypes::GenericDeviceStateMsg* DeviceStateMessage::release_generic_device_state_msg() {
  // @@protoc_insertion_point(field_release:DataTypes.DeviceStateMessage.generic_device_state_msg)
  if (has_generic_device_state_msg()) {
    clear_has_msg();
    ::DataTypes::GenericDeviceStateMsg* temp = msg_.generic_device_state_msg_;
    msg_.generic_device_state_msg_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void DeviceStateMessage::set_allocated_generic_device_state_msg(::DataTypes::GenericDeviceStateMsg* generic_device_state_msg) {
  clear_msg();
  if (generic_device_state_msg) {
    set_has_generic_device_state_msg();
    msg_.generic_device_state_msg_ = generic_device_state_msg;
  }
  // @@protoc_insertion_point(field_set_allocated:DataTypes.DeviceStateMessage.generic_device_state_msg)
}

// optional .DataTypes.AccessDeviceStateMsg access_device_state_msg = 2;
bool DeviceStateMessage::has_access_device_state_msg() const {
  return msg_case() == kAccessDeviceStateMsg;
}
void DeviceStateMessage::set_has_access_device_state_msg() {
  _oneof_case_[0] = kAccessDeviceStateMsg;
}
void DeviceStateMessage::clear_access_device_state_msg() {
  if (has_access_device_state_msg()) {
    delete msg_.access_device_state_msg_;
    clear_has_msg();
  }
}
 const ::DataTypes::AccessDeviceStateMsg& DeviceStateMessage::access_device_state_msg() const {
  // @@protoc_insertion_point(field_get:DataTypes.DeviceStateMessage.access_device_state_msg)
  return has_access_device_state_msg()
      ? *msg_.access_device_state_msg_
      : ::DataTypes::AccessDeviceStateMsg::default_instance();
}
::DataTypes::AccessDeviceStateMsg* DeviceStateMessage::mutable_access_device_state_msg() {
  if (!has_access_device_state_msg()) {
    clear_msg();
    set_has_access_device_state_msg();
    msg_.access_device_state_msg_ = new ::DataTypes::AccessDeviceStateMsg;
  }
  // @@protoc_insertion_point(field_mutable:DataTypes.DeviceStateMessage.access_device_state_msg)
  return msg_.access_device_state_msg_;
}
::DataTypes::AccessDeviceStateMsg* DeviceStateMessage::release_access_device_state_msg() {
  // @@protoc_insertion_point(field_release:DataTypes.DeviceStateMessage.access_device_state_msg)
  if (has_access_device_state_msg()) {
    clear_has_msg();
    ::DataTypes::AccessDeviceStateMsg* temp = msg_.access_device_state_msg_;
    msg_.access_device_state_msg_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void DeviceStateMessage::set_allocated_access_device_state_msg(::DataTypes::AccessDeviceStateMsg* access_device_state_msg) {
  clear_msg();
  if (access_device_state_msg) {
    set_has_access_device_state_msg();
    msg_.access_device_state_msg_ = access_device_state_msg;
  }
  // @@protoc_insertion_point(field_set_allocated:DataTypes.DeviceStateMessage.access_device_state_msg)
}

bool DeviceStateMessage::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
void DeviceStateMessage::clear_has_msg() {
  _oneof_case_[0] = MSG_NOT_SET;
}
DeviceStateMessage::MsgCase DeviceStateMessage::msg_case() const {
  return DeviceStateMessage::MsgCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GenericDeviceStateMsg::kLocationIdFieldNumber;
const int GenericDeviceStateMsg::kTypeFieldNumber;
const int GenericDeviceStateMsg::kStateFieldNumber;
const int GenericDeviceStateMsg::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GenericDeviceStateMsg::GenericDeviceStateMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DataTypes.GenericDeviceStateMsg)
}

void GenericDeviceStateMsg::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  location_id_ = const_cast< ::DataTypes::Key*>(&::DataTypes::Key::default_instance());
}

GenericDeviceStateMsg::GenericDeviceStateMsg(const GenericDeviceStateMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DataTypes.GenericDeviceStateMsg)
}

void GenericDeviceStateMsg::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  location_id_ = NULL;
  type_ = 0;
  state_ = 0;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GenericDeviceStateMsg::~GenericDeviceStateMsg() {
  // @@protoc_insertion_point(destructor:DataTypes.GenericDeviceStateMsg)
  SharedDtor();
}

void GenericDeviceStateMsg::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete location_id_;
  }
}

void GenericDeviceStateMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GenericDeviceStateMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GenericDeviceStateMsg_descriptor_;
}

const GenericDeviceStateMsg& GenericDeviceStateMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datatypes_2fdevices_2eproto();
  return *default_instance_;
}

GenericDeviceStateMsg* GenericDeviceStateMsg::default_instance_ = NULL;

GenericDeviceStateMsg* GenericDeviceStateMsg::New(::google::protobuf::Arena* arena) const {
  GenericDeviceStateMsg* n = new GenericDeviceStateMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GenericDeviceStateMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:DataTypes.GenericDeviceStateMsg)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GenericDeviceStateMsg, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GenericDeviceStateMsg*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(type_, state_);
  if (GetArenaNoVirtual() == NULL && location_id_ != NULL) delete location_id_;
  location_id_ = NULL;
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool GenericDeviceStateMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DataTypes.GenericDeviceStateMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DataTypes.Key location_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .DataTypes.DeviceType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::DataTypes::DeviceType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // optional .DataTypes.DeviceState state = 3;
      case 3: {
        if (tag == 24) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::DataTypes::DeviceState >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_message;
        break;
      }

      // optional string message = 4;
      case 4: {
        if (tag == 34) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DataTypes.GenericDeviceStateMsg.message"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DataTypes.GenericDeviceStateMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DataTypes.GenericDeviceStateMsg)
  return false;
#undef DO_
}

void GenericDeviceStateMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DataTypes.GenericDeviceStateMsg)
  // optional .DataTypes.Key location_id = 1;
  if (this->has_location_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->location_id_, output);
  }

  // optional .DataTypes.DeviceType type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .DataTypes.DeviceState state = 3;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->state(), output);
  }

  // optional string message = 4;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DataTypes.GenericDeviceStateMsg.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->message(), output);
  }

  // @@protoc_insertion_point(serialize_end:DataTypes.GenericDeviceStateMsg)
}

::google::protobuf::uint8* GenericDeviceStateMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DataTypes.GenericDeviceStateMsg)
  // optional .DataTypes.Key location_id = 1;
  if (this->has_location_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->location_id_, target);
  }

  // optional .DataTypes.DeviceType type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional .DataTypes.DeviceState state = 3;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->state(), target);
  }

  // optional string message = 4;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DataTypes.GenericDeviceStateMsg.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->message(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:DataTypes.GenericDeviceStateMsg)
  return target;
}

int GenericDeviceStateMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:DataTypes.GenericDeviceStateMsg)
  int total_size = 0;

  // optional .DataTypes.Key location_id = 1;
  if (this->has_location_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->location_id_);
  }

  // optional .DataTypes.DeviceType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional .DataTypes.DeviceState state = 3;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  // optional string message = 4;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GenericDeviceStateMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DataTypes.GenericDeviceStateMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GenericDeviceStateMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GenericDeviceStateMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DataTypes.GenericDeviceStateMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DataTypes.GenericDeviceStateMsg)
    MergeFrom(*source);
  }
}

void GenericDeviceStateMsg::MergeFrom(const GenericDeviceStateMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DataTypes.GenericDeviceStateMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_location_id()) {
    mutable_location_id()->::DataTypes::Key::MergeFrom(from.location_id());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void GenericDeviceStateMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DataTypes.GenericDeviceStateMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenericDeviceStateMsg::CopyFrom(const GenericDeviceStateMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DataTypes.GenericDeviceStateMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenericDeviceStateMsg::IsInitialized() const {

  return true;
}

void GenericDeviceStateMsg::Swap(GenericDeviceStateMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GenericDeviceStateMsg::InternalSwap(GenericDeviceStateMsg* other) {
  std::swap(location_id_, other->location_id_);
  std::swap(type_, other->type_);
  std::swap(state_, other->state_);
  message_.Swap(&other->message_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GenericDeviceStateMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GenericDeviceStateMsg_descriptor_;
  metadata.reflection = GenericDeviceStateMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GenericDeviceStateMsg

// optional .DataTypes.Key location_id = 1;
bool GenericDeviceStateMsg::has_location_id() const {
  return !_is_default_instance_ && location_id_ != NULL;
}
void GenericDeviceStateMsg::clear_location_id() {
  if (GetArenaNoVirtual() == NULL && location_id_ != NULL) delete location_id_;
  location_id_ = NULL;
}
const ::DataTypes::Key& GenericDeviceStateMsg::location_id() const {
  // @@protoc_insertion_point(field_get:DataTypes.GenericDeviceStateMsg.location_id)
  return location_id_ != NULL ? *location_id_ : *default_instance_->location_id_;
}
::DataTypes::Key* GenericDeviceStateMsg::mutable_location_id() {
  
  if (location_id_ == NULL) {
    location_id_ = new ::DataTypes::Key;
  }
  // @@protoc_insertion_point(field_mutable:DataTypes.GenericDeviceStateMsg.location_id)
  return location_id_;
}
::DataTypes::Key* GenericDeviceStateMsg::release_location_id() {
  // @@protoc_insertion_point(field_release:DataTypes.GenericDeviceStateMsg.location_id)
  
  ::DataTypes::Key* temp = location_id_;
  location_id_ = NULL;
  return temp;
}
void GenericDeviceStateMsg::set_allocated_location_id(::DataTypes::Key* location_id) {
  delete location_id_;
  location_id_ = location_id;
  if (location_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:DataTypes.GenericDeviceStateMsg.location_id)
}

// optional .DataTypes.DeviceType type = 2;
void GenericDeviceStateMsg::clear_type() {
  type_ = 0;
}
 ::DataTypes::DeviceType GenericDeviceStateMsg::type() const {
  // @@protoc_insertion_point(field_get:DataTypes.GenericDeviceStateMsg.type)
  return static_cast< ::DataTypes::DeviceType >(type_);
}
 void GenericDeviceStateMsg::set_type(::DataTypes::DeviceType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:DataTypes.GenericDeviceStateMsg.type)
}

// optional .DataTypes.DeviceState state = 3;
void GenericDeviceStateMsg::clear_state() {
  state_ = 0;
}
 ::DataTypes::DeviceState GenericDeviceStateMsg::state() const {
  // @@protoc_insertion_point(field_get:DataTypes.GenericDeviceStateMsg.state)
  return static_cast< ::DataTypes::DeviceState >(state_);
}
 void GenericDeviceStateMsg::set_state(::DataTypes::DeviceState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:DataTypes.GenericDeviceStateMsg.state)
}

// optional string message = 4;
void GenericDeviceStateMsg::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GenericDeviceStateMsg::message() const {
  // @@protoc_insertion_point(field_get:DataTypes.GenericDeviceStateMsg.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GenericDeviceStateMsg::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DataTypes.GenericDeviceStateMsg.message)
}
 void GenericDeviceStateMsg::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DataTypes.GenericDeviceStateMsg.message)
}
 void GenericDeviceStateMsg::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DataTypes.GenericDeviceStateMsg.message)
}
 ::std::string* GenericDeviceStateMsg::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:DataTypes.GenericDeviceStateMsg.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GenericDeviceStateMsg::release_message() {
  // @@protoc_insertion_point(field_release:DataTypes.GenericDeviceStateMsg.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GenericDeviceStateMsg::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:DataTypes.GenericDeviceStateMsg.message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccessDeviceStateMsg::kLocationIdFieldNumber;
const int AccessDeviceStateMsg::kOpenedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccessDeviceStateMsg::AccessDeviceStateMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DataTypes.AccessDeviceStateMsg)
}

void AccessDeviceStateMsg::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  location_id_ = const_cast< ::DataTypes::Key*>(&::DataTypes::Key::default_instance());
}

AccessDeviceStateMsg::AccessDeviceStateMsg(const AccessDeviceStateMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DataTypes.AccessDeviceStateMsg)
}

void AccessDeviceStateMsg::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  location_id_ = NULL;
  opened_ = false;
}

AccessDeviceStateMsg::~AccessDeviceStateMsg() {
  // @@protoc_insertion_point(destructor:DataTypes.AccessDeviceStateMsg)
  SharedDtor();
}

void AccessDeviceStateMsg::SharedDtor() {
  if (this != default_instance_) {
    delete location_id_;
  }
}

void AccessDeviceStateMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccessDeviceStateMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccessDeviceStateMsg_descriptor_;
}

const AccessDeviceStateMsg& AccessDeviceStateMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datatypes_2fdevices_2eproto();
  return *default_instance_;
}

AccessDeviceStateMsg* AccessDeviceStateMsg::default_instance_ = NULL;

AccessDeviceStateMsg* AccessDeviceStateMsg::New(::google::protobuf::Arena* arena) const {
  AccessDeviceStateMsg* n = new AccessDeviceStateMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AccessDeviceStateMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:DataTypes.AccessDeviceStateMsg)
  if (GetArenaNoVirtual() == NULL && location_id_ != NULL) delete location_id_;
  location_id_ = NULL;
  opened_ = false;
}

bool AccessDeviceStateMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DataTypes.AccessDeviceStateMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DataTypes.Key location_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_opened;
        break;
      }

      // optional bool opened = 2;
      case 2: {
        if (tag == 16) {
         parse_opened:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &opened_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DataTypes.AccessDeviceStateMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DataTypes.AccessDeviceStateMsg)
  return false;
#undef DO_
}

void AccessDeviceStateMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DataTypes.AccessDeviceStateMsg)
  // optional .DataTypes.Key location_id = 1;
  if (this->has_location_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->location_id_, output);
  }

  // optional bool opened = 2;
  if (this->opened() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->opened(), output);
  }

  // @@protoc_insertion_point(serialize_end:DataTypes.AccessDeviceStateMsg)
}

::google::protobuf::uint8* AccessDeviceStateMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DataTypes.AccessDeviceStateMsg)
  // optional .DataTypes.Key location_id = 1;
  if (this->has_location_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->location_id_, target);
  }

  // optional bool opened = 2;
  if (this->opened() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->opened(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:DataTypes.AccessDeviceStateMsg)
  return target;
}

int AccessDeviceStateMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:DataTypes.AccessDeviceStateMsg)
  int total_size = 0;

  // optional .DataTypes.Key location_id = 1;
  if (this->has_location_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->location_id_);
  }

  // optional bool opened = 2;
  if (this->opened() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccessDeviceStateMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DataTypes.AccessDeviceStateMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AccessDeviceStateMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AccessDeviceStateMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DataTypes.AccessDeviceStateMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DataTypes.AccessDeviceStateMsg)
    MergeFrom(*source);
  }
}

void AccessDeviceStateMsg::MergeFrom(const AccessDeviceStateMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DataTypes.AccessDeviceStateMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_location_id()) {
    mutable_location_id()->::DataTypes::Key::MergeFrom(from.location_id());
  }
  if (from.opened() != 0) {
    set_opened(from.opened());
  }
}

void AccessDeviceStateMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DataTypes.AccessDeviceStateMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccessDeviceStateMsg::CopyFrom(const AccessDeviceStateMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DataTypes.AccessDeviceStateMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccessDeviceStateMsg::IsInitialized() const {

  return true;
}

void AccessDeviceStateMsg::Swap(AccessDeviceStateMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccessDeviceStateMsg::InternalSwap(AccessDeviceStateMsg* other) {
  std::swap(location_id_, other->location_id_);
  std::swap(opened_, other->opened_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AccessDeviceStateMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccessDeviceStateMsg_descriptor_;
  metadata.reflection = AccessDeviceStateMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AccessDeviceStateMsg

// optional .DataTypes.Key location_id = 1;
bool AccessDeviceStateMsg::has_location_id() const {
  return !_is_default_instance_ && location_id_ != NULL;
}
void AccessDeviceStateMsg::clear_location_id() {
  if (GetArenaNoVirtual() == NULL && location_id_ != NULL) delete location_id_;
  location_id_ = NULL;
}
const ::DataTypes::Key& AccessDeviceStateMsg::location_id() const {
  // @@protoc_insertion_point(field_get:DataTypes.AccessDeviceStateMsg.location_id)
  return location_id_ != NULL ? *location_id_ : *default_instance_->location_id_;
}
::DataTypes::Key* AccessDeviceStateMsg::mutable_location_id() {
  
  if (location_id_ == NULL) {
    location_id_ = new ::DataTypes::Key;
  }
  // @@protoc_insertion_point(field_mutable:DataTypes.AccessDeviceStateMsg.location_id)
  return location_id_;
}
::DataTypes::Key* AccessDeviceStateMsg::release_location_id() {
  // @@protoc_insertion_point(field_release:DataTypes.AccessDeviceStateMsg.location_id)
  
  ::DataTypes::Key* temp = location_id_;
  location_id_ = NULL;
  return temp;
}
void AccessDeviceStateMsg::set_allocated_location_id(::DataTypes::Key* location_id) {
  delete location_id_;
  location_id_ = location_id;
  if (location_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:DataTypes.AccessDeviceStateMsg.location_id)
}

// optional bool opened = 2;
void AccessDeviceStateMsg::clear_opened() {
  opened_ = false;
}
 bool AccessDeviceStateMsg::opened() const {
  // @@protoc_insertion_point(field_get:DataTypes.AccessDeviceStateMsg.opened)
  return opened_;
}
 void AccessDeviceStateMsg::set_opened(bool value) {
  
  opened_ = value;
  // @@protoc_insertion_point(field_set:DataTypes.AccessDeviceStateMsg.opened)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace DataTypes

// @@protoc_insertion_point(global_scope)
