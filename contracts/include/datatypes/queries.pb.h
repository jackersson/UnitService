// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datatypes/queries.proto

#ifndef PROTOBUF_datatypes_2fqueries_2eproto__INCLUDED
#define PROTOBUF_datatypes_2fqueries_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "datatypes/visit_record.pb.h"
#include "datatypes/key.pb.h"
#include "datatypes/entity.pb.h"
#include "datatypes/datetime.pb.h"
// @@protoc_insertion_point(includes)

namespace DataTypes {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_datatypes_2fqueries_2eproto();
void protobuf_AssignDesc_datatypes_2fqueries_2eproto();
void protobuf_ShutdownFile_datatypes_2fqueries_2eproto();

class GetCardRequest;
class GetLocationRequest;
class GetPersonRequest;
class GetRequest;
class GetResponse;
class GetVisitRecordRequest;
class Page;

// ===================================================================

class GetResponse : public ::google::protobuf::Message {
 public:
  GetResponse();
  virtual ~GetResponse();

  GetResponse(const GetResponse& from);

  inline GetResponse& operator=(const GetResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetResponse& default_instance();

  void Swap(GetResponse* other);

  // implements Message ----------------------------------------------

  inline GetResponse* New() const { return New(NULL); }

  GetResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetResponse& from);
  void MergeFrom(const GetResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .DataTypes.Entities items = 1;
  bool has_items() const;
  void clear_items();
  static const int kItemsFieldNumber = 1;
  const ::DataTypes::Entities& items() const;
  ::DataTypes::Entities* mutable_items();
  ::DataTypes::Entities* release_items();
  void set_allocated_items(::DataTypes::Entities* items);

  // optional int64 count = 2;
  void clear_count();
  static const int kCountFieldNumber = 2;
  ::google::protobuf::int64 count() const;
  void set_count(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:DataTypes.GetResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::DataTypes::Entities* items_;
  ::google::protobuf::int64 count_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_datatypes_2fqueries_2eproto();
  friend void protobuf_AssignDesc_datatypes_2fqueries_2eproto();
  friend void protobuf_ShutdownFile_datatypes_2fqueries_2eproto();

  void InitAsDefaultInstance();
  static GetResponse* default_instance_;
};
// -------------------------------------------------------------------

class GetRequest : public ::google::protobuf::Message {
 public:
  GetRequest();
  virtual ~GetRequest();

  GetRequest(const GetRequest& from);

  inline GetRequest& operator=(const GetRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetRequest& default_instance();

  enum RequestTypeCase {
    kPersonRequest = 1,
    kCardRequest = 2,
    kLocationRequest = 3,
    kVisitRecordRequest = 4,
    REQUEST_TYPE_NOT_SET = 0,
  };

  void Swap(GetRequest* other);

  // implements Message ----------------------------------------------

  inline GetRequest* New() const { return New(NULL); }

  GetRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetRequest& from);
  void MergeFrom(const GetRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .DataTypes.GetPersonRequest person_request = 1;
  bool has_person_request() const;
  void clear_person_request();
  static const int kPersonRequestFieldNumber = 1;
  const ::DataTypes::GetPersonRequest& person_request() const;
  ::DataTypes::GetPersonRequest* mutable_person_request();
  ::DataTypes::GetPersonRequest* release_person_request();
  void set_allocated_person_request(::DataTypes::GetPersonRequest* person_request);

  // optional .DataTypes.GetCardRequest card_request = 2;
  bool has_card_request() const;
  void clear_card_request();
  static const int kCardRequestFieldNumber = 2;
  const ::DataTypes::GetCardRequest& card_request() const;
  ::DataTypes::GetCardRequest* mutable_card_request();
  ::DataTypes::GetCardRequest* release_card_request();
  void set_allocated_card_request(::DataTypes::GetCardRequest* card_request);

  // optional .DataTypes.GetLocationRequest location_request = 3;
  bool has_location_request() const;
  void clear_location_request();
  static const int kLocationRequestFieldNumber = 3;
  const ::DataTypes::GetLocationRequest& location_request() const;
  ::DataTypes::GetLocationRequest* mutable_location_request();
  ::DataTypes::GetLocationRequest* release_location_request();
  void set_allocated_location_request(::DataTypes::GetLocationRequest* location_request);

  // optional .DataTypes.GetVisitRecordRequest visit_record_request = 4;
  bool has_visit_record_request() const;
  void clear_visit_record_request();
  static const int kVisitRecordRequestFieldNumber = 4;
  const ::DataTypes::GetVisitRecordRequest& visit_record_request() const;
  ::DataTypes::GetVisitRecordRequest* mutable_visit_record_request();
  ::DataTypes::GetVisitRecordRequest* release_visit_record_request();
  void set_allocated_visit_record_request(::DataTypes::GetVisitRecordRequest* visit_record_request);

  RequestTypeCase request_type_case() const;
  // @@protoc_insertion_point(class_scope:DataTypes.GetRequest)
 private:
  inline void set_has_person_request();
  inline void set_has_card_request();
  inline void set_has_location_request();
  inline void set_has_visit_record_request();

  inline bool has_request_type() const;
  void clear_request_type();
  inline void clear_has_request_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  union RequestTypeUnion {
    RequestTypeUnion() {}
    ::DataTypes::GetPersonRequest* person_request_;
    ::DataTypes::GetCardRequest* card_request_;
    ::DataTypes::GetLocationRequest* location_request_;
    ::DataTypes::GetVisitRecordRequest* visit_record_request_;
  } request_type_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_datatypes_2fqueries_2eproto();
  friend void protobuf_AssignDesc_datatypes_2fqueries_2eproto();
  friend void protobuf_ShutdownFile_datatypes_2fqueries_2eproto();

  void InitAsDefaultInstance();
  static GetRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetPersonRequest : public ::google::protobuf::Message {
 public:
  GetPersonRequest();
  virtual ~GetPersonRequest();

  GetPersonRequest(const GetPersonRequest& from);

  inline GetPersonRequest& operator=(const GetPersonRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPersonRequest& default_instance();

  void Swap(GetPersonRequest* other);

  // implements Message ----------------------------------------------

  inline GetPersonRequest* New() const { return New(NULL); }

  GetPersonRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetPersonRequest& from);
  void MergeFrom(const GetPersonRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetPersonRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string search_text = 1;
  void clear_search_text();
  static const int kSearchTextFieldNumber = 1;
  const ::std::string& search_text() const;
  void set_search_text(const ::std::string& value);
  void set_search_text(const char* value);
  void set_search_text(const char* value, size_t size);
  ::std::string* mutable_search_text();
  ::std::string* release_search_text();
  void set_allocated_search_text(::std::string* search_text);

  // optional string first_name = 2;
  void clear_first_name();
  static const int kFirstNameFieldNumber = 2;
  const ::std::string& first_name() const;
  void set_first_name(const ::std::string& value);
  void set_first_name(const char* value);
  void set_first_name(const char* value, size_t size);
  ::std::string* mutable_first_name();
  ::std::string* release_first_name();
  void set_allocated_first_name(::std::string* first_name);

  // optional string last_name = 3;
  void clear_last_name();
  static const int kLastNameFieldNumber = 3;
  const ::std::string& last_name() const;
  void set_last_name(const ::std::string& value);
  void set_last_name(const char* value);
  void set_last_name(const char* value, size_t size);
  ::std::string* mutable_last_name();
  ::std::string* release_last_name();
  void set_allocated_last_name(::std::string* last_name);

  // optional string card = 4;
  void clear_card();
  static const int kCardFieldNumber = 4;
  const ::std::string& card() const;
  void set_card(const ::std::string& value);
  void set_card(const char* value);
  void set_card(const char* value, size_t size);
  ::std::string* mutable_card();
  ::std::string* release_card();
  void set_allocated_card(::std::string* card);

  // repeated .DataTypes.Key locations = 5;
  int locations_size() const;
  void clear_locations();
  static const int kLocationsFieldNumber = 5;
  const ::DataTypes::Key& locations(int index) const;
  ::DataTypes::Key* mutable_locations(int index);
  ::DataTypes::Key* add_locations();
  ::google::protobuf::RepeatedPtrField< ::DataTypes::Key >*
      mutable_locations();
  const ::google::protobuf::RepeatedPtrField< ::DataTypes::Key >&
      locations() const;

  // optional .DataTypes.Page page = 6;
  bool has_page() const;
  void clear_page();
  static const int kPageFieldNumber = 6;
  const ::DataTypes::Page& page() const;
  ::DataTypes::Page* mutable_page();
  ::DataTypes::Page* release_page();
  void set_allocated_page(::DataTypes::Page* page);

  // optional .DataTypes.Key id = 7;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 7;
  const ::DataTypes::Key& id() const;
  ::DataTypes::Key* mutable_id();
  ::DataTypes::Key* release_id();
  void set_allocated_id(::DataTypes::Key* id);

  // @@protoc_insertion_point(class_scope:DataTypes.GetPersonRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr search_text_;
  ::google::protobuf::internal::ArenaStringPtr first_name_;
  ::google::protobuf::internal::ArenaStringPtr last_name_;
  ::google::protobuf::internal::ArenaStringPtr card_;
  ::google::protobuf::RepeatedPtrField< ::DataTypes::Key > locations_;
  ::DataTypes::Page* page_;
  ::DataTypes::Key* id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_datatypes_2fqueries_2eproto();
  friend void protobuf_AssignDesc_datatypes_2fqueries_2eproto();
  friend void protobuf_ShutdownFile_datatypes_2fqueries_2eproto();

  void InitAsDefaultInstance();
  static GetPersonRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetLocationRequest : public ::google::protobuf::Message {
 public:
  GetLocationRequest();
  virtual ~GetLocationRequest();

  GetLocationRequest(const GetLocationRequest& from);

  inline GetLocationRequest& operator=(const GetLocationRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetLocationRequest& default_instance();

  void Swap(GetLocationRequest* other);

  // implements Message ----------------------------------------------

  inline GetLocationRequest* New() const { return New(NULL); }

  GetLocationRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetLocationRequest& from);
  void MergeFrom(const GetLocationRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetLocationRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string search_text = 1;
  void clear_search_text();
  static const int kSearchTextFieldNumber = 1;
  const ::std::string& search_text() const;
  void set_search_text(const ::std::string& value);
  void set_search_text(const char* value);
  void set_search_text(const char* value, size_t size);
  ::std::string* mutable_search_text();
  ::std::string* release_search_text();
  void set_allocated_search_text(::std::string* search_text);

  // optional string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string mac_address = 3;
  void clear_mac_address();
  static const int kMacAddressFieldNumber = 3;
  const ::std::string& mac_address() const;
  void set_mac_address(const ::std::string& value);
  void set_mac_address(const char* value);
  void set_mac_address(const char* value, size_t size);
  ::std::string* mutable_mac_address();
  ::std::string* release_mac_address();
  void set_allocated_mac_address(::std::string* mac_address);

  // optional string device_name = 4;
  void clear_device_name();
  static const int kDeviceNameFieldNumber = 4;
  const ::std::string& device_name() const;
  void set_device_name(const ::std::string& value);
  void set_device_name(const char* value);
  void set_device_name(const char* value, size_t size);
  ::std::string* mutable_device_name();
  ::std::string* release_device_name();
  void set_allocated_device_name(::std::string* device_name);

  // optional .DataTypes.Page page = 5;
  bool has_page() const;
  void clear_page();
  static const int kPageFieldNumber = 5;
  const ::DataTypes::Page& page() const;
  ::DataTypes::Page* mutable_page();
  ::DataTypes::Page* release_page();
  void set_allocated_page(::DataTypes::Page* page);

  // optional .DataTypes.Key id = 6;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 6;
  const ::DataTypes::Key& id() const;
  ::DataTypes::Key* mutable_id();
  ::DataTypes::Key* release_id();
  void set_allocated_id(::DataTypes::Key* id);

  // @@protoc_insertion_point(class_scope:DataTypes.GetLocationRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr search_text_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr mac_address_;
  ::google::protobuf::internal::ArenaStringPtr device_name_;
  ::DataTypes::Page* page_;
  ::DataTypes::Key* id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_datatypes_2fqueries_2eproto();
  friend void protobuf_AssignDesc_datatypes_2fqueries_2eproto();
  friend void protobuf_ShutdownFile_datatypes_2fqueries_2eproto();

  void InitAsDefaultInstance();
  static GetLocationRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetVisitRecordRequest : public ::google::protobuf::Message {
 public:
  GetVisitRecordRequest();
  virtual ~GetVisitRecordRequest();

  GetVisitRecordRequest(const GetVisitRecordRequest& from);

  inline GetVisitRecordRequest& operator=(const GetVisitRecordRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetVisitRecordRequest& default_instance();

  void Swap(GetVisitRecordRequest* other);

  // implements Message ----------------------------------------------

  inline GetVisitRecordRequest* New() const { return New(NULL); }

  GetVisitRecordRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetVisitRecordRequest& from);
  void MergeFrom(const GetVisitRecordRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetVisitRecordRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string search_text = 1;
  void clear_search_text();
  static const int kSearchTextFieldNumber = 1;
  const ::std::string& search_text() const;
  void set_search_text(const ::std::string& value);
  void set_search_text(const char* value);
  void set_search_text(const char* value, size_t size);
  ::std::string* mutable_search_text();
  ::std::string* release_search_text();
  void set_allocated_search_text(::std::string* search_text);

  // optional .DataTypes.AccessState state = 2;
  void clear_state();
  static const int kStateFieldNumber = 2;
  ::DataTypes::AccessState state() const;
  void set_state(::DataTypes::AccessState value);

  // repeated .DataTypes.Key locations = 3;
  int locations_size() const;
  void clear_locations();
  static const int kLocationsFieldNumber = 3;
  const ::DataTypes::Key& locations(int index) const;
  ::DataTypes::Key* mutable_locations(int index);
  ::DataTypes::Key* add_locations();
  ::google::protobuf::RepeatedPtrField< ::DataTypes::Key >*
      mutable_locations();
  const ::google::protobuf::RepeatedPtrField< ::DataTypes::Key >&
      locations() const;

  // repeated .DataTypes.Key persons = 4;
  int persons_size() const;
  void clear_persons();
  static const int kPersonsFieldNumber = 4;
  const ::DataTypes::Key& persons(int index) const;
  ::DataTypes::Key* mutable_persons(int index);
  ::DataTypes::Key* add_persons();
  ::google::protobuf::RepeatedPtrField< ::DataTypes::Key >*
      mutable_persons();
  const ::google::protobuf::RepeatedPtrField< ::DataTypes::Key >&
      persons() const;

  // optional .DataTypes.DateTime datetime_from = 5;
  bool has_datetime_from() const;
  void clear_datetime_from();
  static const int kDatetimeFromFieldNumber = 5;
  const ::DataTypes::DateTime& datetime_from() const;
  ::DataTypes::DateTime* mutable_datetime_from();
  ::DataTypes::DateTime* release_datetime_from();
  void set_allocated_datetime_from(::DataTypes::DateTime* datetime_from);

  // optional .DataTypes.DateTime datetime_to = 6;
  bool has_datetime_to() const;
  void clear_datetime_to();
  static const int kDatetimeToFieldNumber = 6;
  const ::DataTypes::DateTime& datetime_to() const;
  ::DataTypes::DateTime* mutable_datetime_to();
  ::DataTypes::DateTime* release_datetime_to();
  void set_allocated_datetime_to(::DataTypes::DateTime* datetime_to);

  // optional string card = 7;
  void clear_card();
  static const int kCardFieldNumber = 7;
  const ::std::string& card() const;
  void set_card(const ::std::string& value);
  void set_card(const char* value);
  void set_card(const char* value, size_t size);
  ::std::string* mutable_card();
  ::std::string* release_card();
  void set_allocated_card(::std::string* card);

  // optional .DataTypes.Page page = 8;
  bool has_page() const;
  void clear_page();
  static const int kPageFieldNumber = 8;
  const ::DataTypes::Page& page() const;
  ::DataTypes::Page* mutable_page();
  ::DataTypes::Page* release_page();
  void set_allocated_page(::DataTypes::Page* page);

  // optional .DataTypes.Key id = 9;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 9;
  const ::DataTypes::Key& id() const;
  ::DataTypes::Key* mutable_id();
  ::DataTypes::Key* release_id();
  void set_allocated_id(::DataTypes::Key* id);

  // @@protoc_insertion_point(class_scope:DataTypes.GetVisitRecordRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr search_text_;
  ::google::protobuf::RepeatedPtrField< ::DataTypes::Key > locations_;
  ::google::protobuf::RepeatedPtrField< ::DataTypes::Key > persons_;
  ::DataTypes::DateTime* datetime_from_;
  ::DataTypes::DateTime* datetime_to_;
  ::google::protobuf::internal::ArenaStringPtr card_;
  ::DataTypes::Page* page_;
  ::DataTypes::Key* id_;
  int state_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_datatypes_2fqueries_2eproto();
  friend void protobuf_AssignDesc_datatypes_2fqueries_2eproto();
  friend void protobuf_ShutdownFile_datatypes_2fqueries_2eproto();

  void InitAsDefaultInstance();
  static GetVisitRecordRequest* default_instance_;
};
// -------------------------------------------------------------------

class Page : public ::google::protobuf::Message {
 public:
  Page();
  virtual ~Page();

  Page(const Page& from);

  inline Page& operator=(const Page& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Page& default_instance();

  void Swap(Page* other);

  // implements Message ----------------------------------------------

  inline Page* New() const { return New(NULL); }

  Page* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Page& from);
  void MergeFrom(const Page& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Page* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 index = 1;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  ::google::protobuf::int32 index() const;
  void set_index(::google::protobuf::int32 value);

  // optional int32 size = 2;
  void clear_size();
  static const int kSizeFieldNumber = 2;
  ::google::protobuf::int32 size() const;
  void set_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DataTypes.Page)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 size_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_datatypes_2fqueries_2eproto();
  friend void protobuf_AssignDesc_datatypes_2fqueries_2eproto();
  friend void protobuf_ShutdownFile_datatypes_2fqueries_2eproto();

  void InitAsDefaultInstance();
  static Page* default_instance_;
};
// -------------------------------------------------------------------

class GetCardRequest : public ::google::protobuf::Message {
 public:
  GetCardRequest();
  virtual ~GetCardRequest();

  GetCardRequest(const GetCardRequest& from);

  inline GetCardRequest& operator=(const GetCardRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetCardRequest& default_instance();

  void Swap(GetCardRequest* other);

  // implements Message ----------------------------------------------

  inline GetCardRequest* New() const { return New(NULL); }

  GetCardRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetCardRequest& from);
  void MergeFrom(const GetCardRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetCardRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string search_text = 1;
  void clear_search_text();
  static const int kSearchTextFieldNumber = 1;
  const ::std::string& search_text() const;
  void set_search_text(const ::std::string& value);
  void set_search_text(const char* value);
  void set_search_text(const char* value, size_t size);
  ::std::string* mutable_search_text();
  ::std::string* release_search_text();
  void set_allocated_search_text(::std::string* search_text);

  // optional string unique_identifier = 2;
  void clear_unique_identifier();
  static const int kUniqueIdentifierFieldNumber = 2;
  const ::std::string& unique_identifier() const;
  void set_unique_identifier(const ::std::string& value);
  void set_unique_identifier(const char* value);
  void set_unique_identifier(const char* value, size_t size);
  ::std::string* mutable_unique_identifier();
  ::std::string* release_unique_identifier();
  void set_allocated_unique_identifier(::std::string* unique_identifier);

  // repeated .DataTypes.Key owners = 3;
  int owners_size() const;
  void clear_owners();
  static const int kOwnersFieldNumber = 3;
  const ::DataTypes::Key& owners(int index) const;
  ::DataTypes::Key* mutable_owners(int index);
  ::DataTypes::Key* add_owners();
  ::google::protobuf::RepeatedPtrField< ::DataTypes::Key >*
      mutable_owners();
  const ::google::protobuf::RepeatedPtrField< ::DataTypes::Key >&
      owners() const;

  // optional .DataTypes.Page page = 4;
  bool has_page() const;
  void clear_page();
  static const int kPageFieldNumber = 4;
  const ::DataTypes::Page& page() const;
  ::DataTypes::Page* mutable_page();
  ::DataTypes::Page* release_page();
  void set_allocated_page(::DataTypes::Page* page);

  // @@protoc_insertion_point(class_scope:DataTypes.GetCardRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr search_text_;
  ::google::protobuf::internal::ArenaStringPtr unique_identifier_;
  ::google::protobuf::RepeatedPtrField< ::DataTypes::Key > owners_;
  ::DataTypes::Page* page_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_datatypes_2fqueries_2eproto();
  friend void protobuf_AssignDesc_datatypes_2fqueries_2eproto();
  friend void protobuf_ShutdownFile_datatypes_2fqueries_2eproto();

  void InitAsDefaultInstance();
  static GetCardRequest* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// GetResponse

// optional .DataTypes.Entities items = 1;
inline bool GetResponse::has_items() const {
  return !_is_default_instance_ && items_ != NULL;
}
inline void GetResponse::clear_items() {
  if (GetArenaNoVirtual() == NULL && items_ != NULL) delete items_;
  items_ = NULL;
}
inline const ::DataTypes::Entities& GetResponse::items() const {
  // @@protoc_insertion_point(field_get:DataTypes.GetResponse.items)
  return items_ != NULL ? *items_ : *default_instance_->items_;
}
inline ::DataTypes::Entities* GetResponse::mutable_items() {
  
  if (items_ == NULL) {
    items_ = new ::DataTypes::Entities;
  }
  // @@protoc_insertion_point(field_mutable:DataTypes.GetResponse.items)
  return items_;
}
inline ::DataTypes::Entities* GetResponse::release_items() {
  // @@protoc_insertion_point(field_release:DataTypes.GetResponse.items)
  
  ::DataTypes::Entities* temp = items_;
  items_ = NULL;
  return temp;
}
inline void GetResponse::set_allocated_items(::DataTypes::Entities* items) {
  delete items_;
  items_ = items;
  if (items) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:DataTypes.GetResponse.items)
}

// optional int64 count = 2;
inline void GetResponse::clear_count() {
  count_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 GetResponse::count() const {
  // @@protoc_insertion_point(field_get:DataTypes.GetResponse.count)
  return count_;
}
inline void GetResponse::set_count(::google::protobuf::int64 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:DataTypes.GetResponse.count)
}

// -------------------------------------------------------------------

// GetRequest

// optional .DataTypes.GetPersonRequest person_request = 1;
inline bool GetRequest::has_person_request() const {
  return request_type_case() == kPersonRequest;
}
inline void GetRequest::set_has_person_request() {
  _oneof_case_[0] = kPersonRequest;
}
inline void GetRequest::clear_person_request() {
  if (has_person_request()) {
    delete request_type_.person_request_;
    clear_has_request_type();
  }
}
inline  const ::DataTypes::GetPersonRequest& GetRequest::person_request() const {
  // @@protoc_insertion_point(field_get:DataTypes.GetRequest.person_request)
  return has_person_request()
      ? *request_type_.person_request_
      : ::DataTypes::GetPersonRequest::default_instance();
}
inline ::DataTypes::GetPersonRequest* GetRequest::mutable_person_request() {
  if (!has_person_request()) {
    clear_request_type();
    set_has_person_request();
    request_type_.person_request_ = new ::DataTypes::GetPersonRequest;
  }
  // @@protoc_insertion_point(field_mutable:DataTypes.GetRequest.person_request)
  return request_type_.person_request_;
}
inline ::DataTypes::GetPersonRequest* GetRequest::release_person_request() {
  // @@protoc_insertion_point(field_release:DataTypes.GetRequest.person_request)
  if (has_person_request()) {
    clear_has_request_type();
    ::DataTypes::GetPersonRequest* temp = request_type_.person_request_;
    request_type_.person_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void GetRequest::set_allocated_person_request(::DataTypes::GetPersonRequest* person_request) {
  clear_request_type();
  if (person_request) {
    set_has_person_request();
    request_type_.person_request_ = person_request;
  }
  // @@protoc_insertion_point(field_set_allocated:DataTypes.GetRequest.person_request)
}

// optional .DataTypes.GetCardRequest card_request = 2;
inline bool GetRequest::has_card_request() const {
  return request_type_case() == kCardRequest;
}
inline void GetRequest::set_has_card_request() {
  _oneof_case_[0] = kCardRequest;
}
inline void GetRequest::clear_card_request() {
  if (has_card_request()) {
    delete request_type_.card_request_;
    clear_has_request_type();
  }
}
inline  const ::DataTypes::GetCardRequest& GetRequest::card_request() const {
  // @@protoc_insertion_point(field_get:DataTypes.GetRequest.card_request)
  return has_card_request()
      ? *request_type_.card_request_
      : ::DataTypes::GetCardRequest::default_instance();
}
inline ::DataTypes::GetCardRequest* GetRequest::mutable_card_request() {
  if (!has_card_request()) {
    clear_request_type();
    set_has_card_request();
    request_type_.card_request_ = new ::DataTypes::GetCardRequest;
  }
  // @@protoc_insertion_point(field_mutable:DataTypes.GetRequest.card_request)
  return request_type_.card_request_;
}
inline ::DataTypes::GetCardRequest* GetRequest::release_card_request() {
  // @@protoc_insertion_point(field_release:DataTypes.GetRequest.card_request)
  if (has_card_request()) {
    clear_has_request_type();
    ::DataTypes::GetCardRequest* temp = request_type_.card_request_;
    request_type_.card_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void GetRequest::set_allocated_card_request(::DataTypes::GetCardRequest* card_request) {
  clear_request_type();
  if (card_request) {
    set_has_card_request();
    request_type_.card_request_ = card_request;
  }
  // @@protoc_insertion_point(field_set_allocated:DataTypes.GetRequest.card_request)
}

// optional .DataTypes.GetLocationRequest location_request = 3;
inline bool GetRequest::has_location_request() const {
  return request_type_case() == kLocationRequest;
}
inline void GetRequest::set_has_location_request() {
  _oneof_case_[0] = kLocationRequest;
}
inline void GetRequest::clear_location_request() {
  if (has_location_request()) {
    delete request_type_.location_request_;
    clear_has_request_type();
  }
}
inline  const ::DataTypes::GetLocationRequest& GetRequest::location_request() const {
  // @@protoc_insertion_point(field_get:DataTypes.GetRequest.location_request)
  return has_location_request()
      ? *request_type_.location_request_
      : ::DataTypes::GetLocationRequest::default_instance();
}
inline ::DataTypes::GetLocationRequest* GetRequest::mutable_location_request() {
  if (!has_location_request()) {
    clear_request_type();
    set_has_location_request();
    request_type_.location_request_ = new ::DataTypes::GetLocationRequest;
  }
  // @@protoc_insertion_point(field_mutable:DataTypes.GetRequest.location_request)
  return request_type_.location_request_;
}
inline ::DataTypes::GetLocationRequest* GetRequest::release_location_request() {
  // @@protoc_insertion_point(field_release:DataTypes.GetRequest.location_request)
  if (has_location_request()) {
    clear_has_request_type();
    ::DataTypes::GetLocationRequest* temp = request_type_.location_request_;
    request_type_.location_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void GetRequest::set_allocated_location_request(::DataTypes::GetLocationRequest* location_request) {
  clear_request_type();
  if (location_request) {
    set_has_location_request();
    request_type_.location_request_ = location_request;
  }
  // @@protoc_insertion_point(field_set_allocated:DataTypes.GetRequest.location_request)
}

// optional .DataTypes.GetVisitRecordRequest visit_record_request = 4;
inline bool GetRequest::has_visit_record_request() const {
  return request_type_case() == kVisitRecordRequest;
}
inline void GetRequest::set_has_visit_record_request() {
  _oneof_case_[0] = kVisitRecordRequest;
}
inline void GetRequest::clear_visit_record_request() {
  if (has_visit_record_request()) {
    delete request_type_.visit_record_request_;
    clear_has_request_type();
  }
}
inline  const ::DataTypes::GetVisitRecordRequest& GetRequest::visit_record_request() const {
  // @@protoc_insertion_point(field_get:DataTypes.GetRequest.visit_record_request)
  return has_visit_record_request()
      ? *request_type_.visit_record_request_
      : ::DataTypes::GetVisitRecordRequest::default_instance();
}
inline ::DataTypes::GetVisitRecordRequest* GetRequest::mutable_visit_record_request() {
  if (!has_visit_record_request()) {
    clear_request_type();
    set_has_visit_record_request();
    request_type_.visit_record_request_ = new ::DataTypes::GetVisitRecordRequest;
  }
  // @@protoc_insertion_point(field_mutable:DataTypes.GetRequest.visit_record_request)
  return request_type_.visit_record_request_;
}
inline ::DataTypes::GetVisitRecordRequest* GetRequest::release_visit_record_request() {
  // @@protoc_insertion_point(field_release:DataTypes.GetRequest.visit_record_request)
  if (has_visit_record_request()) {
    clear_has_request_type();
    ::DataTypes::GetVisitRecordRequest* temp = request_type_.visit_record_request_;
    request_type_.visit_record_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void GetRequest::set_allocated_visit_record_request(::DataTypes::GetVisitRecordRequest* visit_record_request) {
  clear_request_type();
  if (visit_record_request) {
    set_has_visit_record_request();
    request_type_.visit_record_request_ = visit_record_request;
  }
  // @@protoc_insertion_point(field_set_allocated:DataTypes.GetRequest.visit_record_request)
}

inline bool GetRequest::has_request_type() const {
  return request_type_case() != REQUEST_TYPE_NOT_SET;
}
inline void GetRequest::clear_has_request_type() {
  _oneof_case_[0] = REQUEST_TYPE_NOT_SET;
}
inline GetRequest::RequestTypeCase GetRequest::request_type_case() const {
  return GetRequest::RequestTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// GetPersonRequest

// optional string search_text = 1;
inline void GetPersonRequest::clear_search_text() {
  search_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetPersonRequest::search_text() const {
  // @@protoc_insertion_point(field_get:DataTypes.GetPersonRequest.search_text)
  return search_text_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetPersonRequest::set_search_text(const ::std::string& value) {
  
  search_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DataTypes.GetPersonRequest.search_text)
}
inline void GetPersonRequest::set_search_text(const char* value) {
  
  search_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DataTypes.GetPersonRequest.search_text)
}
inline void GetPersonRequest::set_search_text(const char* value, size_t size) {
  
  search_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DataTypes.GetPersonRequest.search_text)
}
inline ::std::string* GetPersonRequest::mutable_search_text() {
  
  // @@protoc_insertion_point(field_mutable:DataTypes.GetPersonRequest.search_text)
  return search_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetPersonRequest::release_search_text() {
  // @@protoc_insertion_point(field_release:DataTypes.GetPersonRequest.search_text)
  
  return search_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetPersonRequest::set_allocated_search_text(::std::string* search_text) {
  if (search_text != NULL) {
    
  } else {
    
  }
  search_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), search_text);
  // @@protoc_insertion_point(field_set_allocated:DataTypes.GetPersonRequest.search_text)
}

// optional string first_name = 2;
inline void GetPersonRequest::clear_first_name() {
  first_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetPersonRequest::first_name() const {
  // @@protoc_insertion_point(field_get:DataTypes.GetPersonRequest.first_name)
  return first_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetPersonRequest::set_first_name(const ::std::string& value) {
  
  first_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DataTypes.GetPersonRequest.first_name)
}
inline void GetPersonRequest::set_first_name(const char* value) {
  
  first_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DataTypes.GetPersonRequest.first_name)
}
inline void GetPersonRequest::set_first_name(const char* value, size_t size) {
  
  first_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DataTypes.GetPersonRequest.first_name)
}
inline ::std::string* GetPersonRequest::mutable_first_name() {
  
  // @@protoc_insertion_point(field_mutable:DataTypes.GetPersonRequest.first_name)
  return first_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetPersonRequest::release_first_name() {
  // @@protoc_insertion_point(field_release:DataTypes.GetPersonRequest.first_name)
  
  return first_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetPersonRequest::set_allocated_first_name(::std::string* first_name) {
  if (first_name != NULL) {
    
  } else {
    
  }
  first_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), first_name);
  // @@protoc_insertion_point(field_set_allocated:DataTypes.GetPersonRequest.first_name)
}

// optional string last_name = 3;
inline void GetPersonRequest::clear_last_name() {
  last_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetPersonRequest::last_name() const {
  // @@protoc_insertion_point(field_get:DataTypes.GetPersonRequest.last_name)
  return last_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetPersonRequest::set_last_name(const ::std::string& value) {
  
  last_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DataTypes.GetPersonRequest.last_name)
}
inline void GetPersonRequest::set_last_name(const char* value) {
  
  last_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DataTypes.GetPersonRequest.last_name)
}
inline void GetPersonRequest::set_last_name(const char* value, size_t size) {
  
  last_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DataTypes.GetPersonRequest.last_name)
}
inline ::std::string* GetPersonRequest::mutable_last_name() {
  
  // @@protoc_insertion_point(field_mutable:DataTypes.GetPersonRequest.last_name)
  return last_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetPersonRequest::release_last_name() {
  // @@protoc_insertion_point(field_release:DataTypes.GetPersonRequest.last_name)
  
  return last_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetPersonRequest::set_allocated_last_name(::std::string* last_name) {
  if (last_name != NULL) {
    
  } else {
    
  }
  last_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), last_name);
  // @@protoc_insertion_point(field_set_allocated:DataTypes.GetPersonRequest.last_name)
}

// optional string card = 4;
inline void GetPersonRequest::clear_card() {
  card_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetPersonRequest::card() const {
  // @@protoc_insertion_point(field_get:DataTypes.GetPersonRequest.card)
  return card_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetPersonRequest::set_card(const ::std::string& value) {
  
  card_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DataTypes.GetPersonRequest.card)
}
inline void GetPersonRequest::set_card(const char* value) {
  
  card_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DataTypes.GetPersonRequest.card)
}
inline void GetPersonRequest::set_card(const char* value, size_t size) {
  
  card_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DataTypes.GetPersonRequest.card)
}
inline ::std::string* GetPersonRequest::mutable_card() {
  
  // @@protoc_insertion_point(field_mutable:DataTypes.GetPersonRequest.card)
  return card_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetPersonRequest::release_card() {
  // @@protoc_insertion_point(field_release:DataTypes.GetPersonRequest.card)
  
  return card_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetPersonRequest::set_allocated_card(::std::string* card) {
  if (card != NULL) {
    
  } else {
    
  }
  card_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), card);
  // @@protoc_insertion_point(field_set_allocated:DataTypes.GetPersonRequest.card)
}

// repeated .DataTypes.Key locations = 5;
inline int GetPersonRequest::locations_size() const {
  return locations_.size();
}
inline void GetPersonRequest::clear_locations() {
  locations_.Clear();
}
inline const ::DataTypes::Key& GetPersonRequest::locations(int index) const {
  // @@protoc_insertion_point(field_get:DataTypes.GetPersonRequest.locations)
  return locations_.Get(index);
}
inline ::DataTypes::Key* GetPersonRequest::mutable_locations(int index) {
  // @@protoc_insertion_point(field_mutable:DataTypes.GetPersonRequest.locations)
  return locations_.Mutable(index);
}
inline ::DataTypes::Key* GetPersonRequest::add_locations() {
  // @@protoc_insertion_point(field_add:DataTypes.GetPersonRequest.locations)
  return locations_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::DataTypes::Key >*
GetPersonRequest::mutable_locations() {
  // @@protoc_insertion_point(field_mutable_list:DataTypes.GetPersonRequest.locations)
  return &locations_;
}
inline const ::google::protobuf::RepeatedPtrField< ::DataTypes::Key >&
GetPersonRequest::locations() const {
  // @@protoc_insertion_point(field_list:DataTypes.GetPersonRequest.locations)
  return locations_;
}

// optional .DataTypes.Page page = 6;
inline bool GetPersonRequest::has_page() const {
  return !_is_default_instance_ && page_ != NULL;
}
inline void GetPersonRequest::clear_page() {
  if (GetArenaNoVirtual() == NULL && page_ != NULL) delete page_;
  page_ = NULL;
}
inline const ::DataTypes::Page& GetPersonRequest::page() const {
  // @@protoc_insertion_point(field_get:DataTypes.GetPersonRequest.page)
  return page_ != NULL ? *page_ : *default_instance_->page_;
}
inline ::DataTypes::Page* GetPersonRequest::mutable_page() {
  
  if (page_ == NULL) {
    page_ = new ::DataTypes::Page;
  }
  // @@protoc_insertion_point(field_mutable:DataTypes.GetPersonRequest.page)
  return page_;
}
inline ::DataTypes::Page* GetPersonRequest::release_page() {
  // @@protoc_insertion_point(field_release:DataTypes.GetPersonRequest.page)
  
  ::DataTypes::Page* temp = page_;
  page_ = NULL;
  return temp;
}
inline void GetPersonRequest::set_allocated_page(::DataTypes::Page* page) {
  delete page_;
  page_ = page;
  if (page) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:DataTypes.GetPersonRequest.page)
}

// optional .DataTypes.Key id = 7;
inline bool GetPersonRequest::has_id() const {
  return !_is_default_instance_ && id_ != NULL;
}
inline void GetPersonRequest::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) delete id_;
  id_ = NULL;
}
inline const ::DataTypes::Key& GetPersonRequest::id() const {
  // @@protoc_insertion_point(field_get:DataTypes.GetPersonRequest.id)
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
inline ::DataTypes::Key* GetPersonRequest::mutable_id() {
  
  if (id_ == NULL) {
    id_ = new ::DataTypes::Key;
  }
  // @@protoc_insertion_point(field_mutable:DataTypes.GetPersonRequest.id)
  return id_;
}
inline ::DataTypes::Key* GetPersonRequest::release_id() {
  // @@protoc_insertion_point(field_release:DataTypes.GetPersonRequest.id)
  
  ::DataTypes::Key* temp = id_;
  id_ = NULL;
  return temp;
}
inline void GetPersonRequest::set_allocated_id(::DataTypes::Key* id) {
  delete id_;
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:DataTypes.GetPersonRequest.id)
}

// -------------------------------------------------------------------

// GetLocationRequest

// optional string search_text = 1;
inline void GetLocationRequest::clear_search_text() {
  search_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetLocationRequest::search_text() const {
  // @@protoc_insertion_point(field_get:DataTypes.GetLocationRequest.search_text)
  return search_text_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetLocationRequest::set_search_text(const ::std::string& value) {
  
  search_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DataTypes.GetLocationRequest.search_text)
}
inline void GetLocationRequest::set_search_text(const char* value) {
  
  search_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DataTypes.GetLocationRequest.search_text)
}
inline void GetLocationRequest::set_search_text(const char* value, size_t size) {
  
  search_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DataTypes.GetLocationRequest.search_text)
}
inline ::std::string* GetLocationRequest::mutable_search_text() {
  
  // @@protoc_insertion_point(field_mutable:DataTypes.GetLocationRequest.search_text)
  return search_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetLocationRequest::release_search_text() {
  // @@protoc_insertion_point(field_release:DataTypes.GetLocationRequest.search_text)
  
  return search_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetLocationRequest::set_allocated_search_text(::std::string* search_text) {
  if (search_text != NULL) {
    
  } else {
    
  }
  search_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), search_text);
  // @@protoc_insertion_point(field_set_allocated:DataTypes.GetLocationRequest.search_text)
}

// optional string name = 2;
inline void GetLocationRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetLocationRequest::name() const {
  // @@protoc_insertion_point(field_get:DataTypes.GetLocationRequest.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetLocationRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DataTypes.GetLocationRequest.name)
}
inline void GetLocationRequest::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DataTypes.GetLocationRequest.name)
}
inline void GetLocationRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DataTypes.GetLocationRequest.name)
}
inline ::std::string* GetLocationRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:DataTypes.GetLocationRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetLocationRequest::release_name() {
  // @@protoc_insertion_point(field_release:DataTypes.GetLocationRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetLocationRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:DataTypes.GetLocationRequest.name)
}

// optional string mac_address = 3;
inline void GetLocationRequest::clear_mac_address() {
  mac_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetLocationRequest::mac_address() const {
  // @@protoc_insertion_point(field_get:DataTypes.GetLocationRequest.mac_address)
  return mac_address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetLocationRequest::set_mac_address(const ::std::string& value) {
  
  mac_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DataTypes.GetLocationRequest.mac_address)
}
inline void GetLocationRequest::set_mac_address(const char* value) {
  
  mac_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DataTypes.GetLocationRequest.mac_address)
}
inline void GetLocationRequest::set_mac_address(const char* value, size_t size) {
  
  mac_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DataTypes.GetLocationRequest.mac_address)
}
inline ::std::string* GetLocationRequest::mutable_mac_address() {
  
  // @@protoc_insertion_point(field_mutable:DataTypes.GetLocationRequest.mac_address)
  return mac_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetLocationRequest::release_mac_address() {
  // @@protoc_insertion_point(field_release:DataTypes.GetLocationRequest.mac_address)
  
  return mac_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetLocationRequest::set_allocated_mac_address(::std::string* mac_address) {
  if (mac_address != NULL) {
    
  } else {
    
  }
  mac_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mac_address);
  // @@protoc_insertion_point(field_set_allocated:DataTypes.GetLocationRequest.mac_address)
}

// optional string device_name = 4;
inline void GetLocationRequest::clear_device_name() {
  device_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetLocationRequest::device_name() const {
  // @@protoc_insertion_point(field_get:DataTypes.GetLocationRequest.device_name)
  return device_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetLocationRequest::set_device_name(const ::std::string& value) {
  
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DataTypes.GetLocationRequest.device_name)
}
inline void GetLocationRequest::set_device_name(const char* value) {
  
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DataTypes.GetLocationRequest.device_name)
}
inline void GetLocationRequest::set_device_name(const char* value, size_t size) {
  
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DataTypes.GetLocationRequest.device_name)
}
inline ::std::string* GetLocationRequest::mutable_device_name() {
  
  // @@protoc_insertion_point(field_mutable:DataTypes.GetLocationRequest.device_name)
  return device_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetLocationRequest::release_device_name() {
  // @@protoc_insertion_point(field_release:DataTypes.GetLocationRequest.device_name)
  
  return device_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetLocationRequest::set_allocated_device_name(::std::string* device_name) {
  if (device_name != NULL) {
    
  } else {
    
  }
  device_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_name);
  // @@protoc_insertion_point(field_set_allocated:DataTypes.GetLocationRequest.device_name)
}

// optional .DataTypes.Page page = 5;
inline bool GetLocationRequest::has_page() const {
  return !_is_default_instance_ && page_ != NULL;
}
inline void GetLocationRequest::clear_page() {
  if (GetArenaNoVirtual() == NULL && page_ != NULL) delete page_;
  page_ = NULL;
}
inline const ::DataTypes::Page& GetLocationRequest::page() const {
  // @@protoc_insertion_point(field_get:DataTypes.GetLocationRequest.page)
  return page_ != NULL ? *page_ : *default_instance_->page_;
}
inline ::DataTypes::Page* GetLocationRequest::mutable_page() {
  
  if (page_ == NULL) {
    page_ = new ::DataTypes::Page;
  }
  // @@protoc_insertion_point(field_mutable:DataTypes.GetLocationRequest.page)
  return page_;
}
inline ::DataTypes::Page* GetLocationRequest::release_page() {
  // @@protoc_insertion_point(field_release:DataTypes.GetLocationRequest.page)
  
  ::DataTypes::Page* temp = page_;
  page_ = NULL;
  return temp;
}
inline void GetLocationRequest::set_allocated_page(::DataTypes::Page* page) {
  delete page_;
  page_ = page;
  if (page) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:DataTypes.GetLocationRequest.page)
}

// optional .DataTypes.Key id = 6;
inline bool GetLocationRequest::has_id() const {
  return !_is_default_instance_ && id_ != NULL;
}
inline void GetLocationRequest::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) delete id_;
  id_ = NULL;
}
inline const ::DataTypes::Key& GetLocationRequest::id() const {
  // @@protoc_insertion_point(field_get:DataTypes.GetLocationRequest.id)
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
inline ::DataTypes::Key* GetLocationRequest::mutable_id() {
  
  if (id_ == NULL) {
    id_ = new ::DataTypes::Key;
  }
  // @@protoc_insertion_point(field_mutable:DataTypes.GetLocationRequest.id)
  return id_;
}
inline ::DataTypes::Key* GetLocationRequest::release_id() {
  // @@protoc_insertion_point(field_release:DataTypes.GetLocationRequest.id)
  
  ::DataTypes::Key* temp = id_;
  id_ = NULL;
  return temp;
}
inline void GetLocationRequest::set_allocated_id(::DataTypes::Key* id) {
  delete id_;
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:DataTypes.GetLocationRequest.id)
}

// -------------------------------------------------------------------

// GetVisitRecordRequest

// optional string search_text = 1;
inline void GetVisitRecordRequest::clear_search_text() {
  search_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetVisitRecordRequest::search_text() const {
  // @@protoc_insertion_point(field_get:DataTypes.GetVisitRecordRequest.search_text)
  return search_text_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetVisitRecordRequest::set_search_text(const ::std::string& value) {
  
  search_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DataTypes.GetVisitRecordRequest.search_text)
}
inline void GetVisitRecordRequest::set_search_text(const char* value) {
  
  search_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DataTypes.GetVisitRecordRequest.search_text)
}
inline void GetVisitRecordRequest::set_search_text(const char* value, size_t size) {
  
  search_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DataTypes.GetVisitRecordRequest.search_text)
}
inline ::std::string* GetVisitRecordRequest::mutable_search_text() {
  
  // @@protoc_insertion_point(field_mutable:DataTypes.GetVisitRecordRequest.search_text)
  return search_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetVisitRecordRequest::release_search_text() {
  // @@protoc_insertion_point(field_release:DataTypes.GetVisitRecordRequest.search_text)
  
  return search_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetVisitRecordRequest::set_allocated_search_text(::std::string* search_text) {
  if (search_text != NULL) {
    
  } else {
    
  }
  search_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), search_text);
  // @@protoc_insertion_point(field_set_allocated:DataTypes.GetVisitRecordRequest.search_text)
}

// optional .DataTypes.AccessState state = 2;
inline void GetVisitRecordRequest::clear_state() {
  state_ = 0;
}
inline ::DataTypes::AccessState GetVisitRecordRequest::state() const {
  // @@protoc_insertion_point(field_get:DataTypes.GetVisitRecordRequest.state)
  return static_cast< ::DataTypes::AccessState >(state_);
}
inline void GetVisitRecordRequest::set_state(::DataTypes::AccessState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:DataTypes.GetVisitRecordRequest.state)
}

// repeated .DataTypes.Key locations = 3;
inline int GetVisitRecordRequest::locations_size() const {
  return locations_.size();
}
inline void GetVisitRecordRequest::clear_locations() {
  locations_.Clear();
}
inline const ::DataTypes::Key& GetVisitRecordRequest::locations(int index) const {
  // @@protoc_insertion_point(field_get:DataTypes.GetVisitRecordRequest.locations)
  return locations_.Get(index);
}
inline ::DataTypes::Key* GetVisitRecordRequest::mutable_locations(int index) {
  // @@protoc_insertion_point(field_mutable:DataTypes.GetVisitRecordRequest.locations)
  return locations_.Mutable(index);
}
inline ::DataTypes::Key* GetVisitRecordRequest::add_locations() {
  // @@protoc_insertion_point(field_add:DataTypes.GetVisitRecordRequest.locations)
  return locations_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::DataTypes::Key >*
GetVisitRecordRequest::mutable_locations() {
  // @@protoc_insertion_point(field_mutable_list:DataTypes.GetVisitRecordRequest.locations)
  return &locations_;
}
inline const ::google::protobuf::RepeatedPtrField< ::DataTypes::Key >&
GetVisitRecordRequest::locations() const {
  // @@protoc_insertion_point(field_list:DataTypes.GetVisitRecordRequest.locations)
  return locations_;
}

// repeated .DataTypes.Key persons = 4;
inline int GetVisitRecordRequest::persons_size() const {
  return persons_.size();
}
inline void GetVisitRecordRequest::clear_persons() {
  persons_.Clear();
}
inline const ::DataTypes::Key& GetVisitRecordRequest::persons(int index) const {
  // @@protoc_insertion_point(field_get:DataTypes.GetVisitRecordRequest.persons)
  return persons_.Get(index);
}
inline ::DataTypes::Key* GetVisitRecordRequest::mutable_persons(int index) {
  // @@protoc_insertion_point(field_mutable:DataTypes.GetVisitRecordRequest.persons)
  return persons_.Mutable(index);
}
inline ::DataTypes::Key* GetVisitRecordRequest::add_persons() {
  // @@protoc_insertion_point(field_add:DataTypes.GetVisitRecordRequest.persons)
  return persons_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::DataTypes::Key >*
GetVisitRecordRequest::mutable_persons() {
  // @@protoc_insertion_point(field_mutable_list:DataTypes.GetVisitRecordRequest.persons)
  return &persons_;
}
inline const ::google::protobuf::RepeatedPtrField< ::DataTypes::Key >&
GetVisitRecordRequest::persons() const {
  // @@protoc_insertion_point(field_list:DataTypes.GetVisitRecordRequest.persons)
  return persons_;
}

// optional .DataTypes.DateTime datetime_from = 5;
inline bool GetVisitRecordRequest::has_datetime_from() const {
  return !_is_default_instance_ && datetime_from_ != NULL;
}
inline void GetVisitRecordRequest::clear_datetime_from() {
  if (GetArenaNoVirtual() == NULL && datetime_from_ != NULL) delete datetime_from_;
  datetime_from_ = NULL;
}
inline const ::DataTypes::DateTime& GetVisitRecordRequest::datetime_from() const {
  // @@protoc_insertion_point(field_get:DataTypes.GetVisitRecordRequest.datetime_from)
  return datetime_from_ != NULL ? *datetime_from_ : *default_instance_->datetime_from_;
}
inline ::DataTypes::DateTime* GetVisitRecordRequest::mutable_datetime_from() {
  
  if (datetime_from_ == NULL) {
    datetime_from_ = new ::DataTypes::DateTime;
  }
  // @@protoc_insertion_point(field_mutable:DataTypes.GetVisitRecordRequest.datetime_from)
  return datetime_from_;
}
inline ::DataTypes::DateTime* GetVisitRecordRequest::release_datetime_from() {
  // @@protoc_insertion_point(field_release:DataTypes.GetVisitRecordRequest.datetime_from)
  
  ::DataTypes::DateTime* temp = datetime_from_;
  datetime_from_ = NULL;
  return temp;
}
inline void GetVisitRecordRequest::set_allocated_datetime_from(::DataTypes::DateTime* datetime_from) {
  delete datetime_from_;
  datetime_from_ = datetime_from;
  if (datetime_from) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:DataTypes.GetVisitRecordRequest.datetime_from)
}

// optional .DataTypes.DateTime datetime_to = 6;
inline bool GetVisitRecordRequest::has_datetime_to() const {
  return !_is_default_instance_ && datetime_to_ != NULL;
}
inline void GetVisitRecordRequest::clear_datetime_to() {
  if (GetArenaNoVirtual() == NULL && datetime_to_ != NULL) delete datetime_to_;
  datetime_to_ = NULL;
}
inline const ::DataTypes::DateTime& GetVisitRecordRequest::datetime_to() const {
  // @@protoc_insertion_point(field_get:DataTypes.GetVisitRecordRequest.datetime_to)
  return datetime_to_ != NULL ? *datetime_to_ : *default_instance_->datetime_to_;
}
inline ::DataTypes::DateTime* GetVisitRecordRequest::mutable_datetime_to() {
  
  if (datetime_to_ == NULL) {
    datetime_to_ = new ::DataTypes::DateTime;
  }
  // @@protoc_insertion_point(field_mutable:DataTypes.GetVisitRecordRequest.datetime_to)
  return datetime_to_;
}
inline ::DataTypes::DateTime* GetVisitRecordRequest::release_datetime_to() {
  // @@protoc_insertion_point(field_release:DataTypes.GetVisitRecordRequest.datetime_to)
  
  ::DataTypes::DateTime* temp = datetime_to_;
  datetime_to_ = NULL;
  return temp;
}
inline void GetVisitRecordRequest::set_allocated_datetime_to(::DataTypes::DateTime* datetime_to) {
  delete datetime_to_;
  datetime_to_ = datetime_to;
  if (datetime_to) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:DataTypes.GetVisitRecordRequest.datetime_to)
}

// optional string card = 7;
inline void GetVisitRecordRequest::clear_card() {
  card_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetVisitRecordRequest::card() const {
  // @@protoc_insertion_point(field_get:DataTypes.GetVisitRecordRequest.card)
  return card_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetVisitRecordRequest::set_card(const ::std::string& value) {
  
  card_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DataTypes.GetVisitRecordRequest.card)
}
inline void GetVisitRecordRequest::set_card(const char* value) {
  
  card_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DataTypes.GetVisitRecordRequest.card)
}
inline void GetVisitRecordRequest::set_card(const char* value, size_t size) {
  
  card_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DataTypes.GetVisitRecordRequest.card)
}
inline ::std::string* GetVisitRecordRequest::mutable_card() {
  
  // @@protoc_insertion_point(field_mutable:DataTypes.GetVisitRecordRequest.card)
  return card_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetVisitRecordRequest::release_card() {
  // @@protoc_insertion_point(field_release:DataTypes.GetVisitRecordRequest.card)
  
  return card_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetVisitRecordRequest::set_allocated_card(::std::string* card) {
  if (card != NULL) {
    
  } else {
    
  }
  card_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), card);
  // @@protoc_insertion_point(field_set_allocated:DataTypes.GetVisitRecordRequest.card)
}

// optional .DataTypes.Page page = 8;
inline bool GetVisitRecordRequest::has_page() const {
  return !_is_default_instance_ && page_ != NULL;
}
inline void GetVisitRecordRequest::clear_page() {
  if (GetArenaNoVirtual() == NULL && page_ != NULL) delete page_;
  page_ = NULL;
}
inline const ::DataTypes::Page& GetVisitRecordRequest::page() const {
  // @@protoc_insertion_point(field_get:DataTypes.GetVisitRecordRequest.page)
  return page_ != NULL ? *page_ : *default_instance_->page_;
}
inline ::DataTypes::Page* GetVisitRecordRequest::mutable_page() {
  
  if (page_ == NULL) {
    page_ = new ::DataTypes::Page;
  }
  // @@protoc_insertion_point(field_mutable:DataTypes.GetVisitRecordRequest.page)
  return page_;
}
inline ::DataTypes::Page* GetVisitRecordRequest::release_page() {
  // @@protoc_insertion_point(field_release:DataTypes.GetVisitRecordRequest.page)
  
  ::DataTypes::Page* temp = page_;
  page_ = NULL;
  return temp;
}
inline void GetVisitRecordRequest::set_allocated_page(::DataTypes::Page* page) {
  delete page_;
  page_ = page;
  if (page) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:DataTypes.GetVisitRecordRequest.page)
}

// optional .DataTypes.Key id = 9;
inline bool GetVisitRecordRequest::has_id() const {
  return !_is_default_instance_ && id_ != NULL;
}
inline void GetVisitRecordRequest::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) delete id_;
  id_ = NULL;
}
inline const ::DataTypes::Key& GetVisitRecordRequest::id() const {
  // @@protoc_insertion_point(field_get:DataTypes.GetVisitRecordRequest.id)
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
inline ::DataTypes::Key* GetVisitRecordRequest::mutable_id() {
  
  if (id_ == NULL) {
    id_ = new ::DataTypes::Key;
  }
  // @@protoc_insertion_point(field_mutable:DataTypes.GetVisitRecordRequest.id)
  return id_;
}
inline ::DataTypes::Key* GetVisitRecordRequest::release_id() {
  // @@protoc_insertion_point(field_release:DataTypes.GetVisitRecordRequest.id)
  
  ::DataTypes::Key* temp = id_;
  id_ = NULL;
  return temp;
}
inline void GetVisitRecordRequest::set_allocated_id(::DataTypes::Key* id) {
  delete id_;
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:DataTypes.GetVisitRecordRequest.id)
}

// -------------------------------------------------------------------

// Page

// optional int32 index = 1;
inline void Page::clear_index() {
  index_ = 0;
}
inline ::google::protobuf::int32 Page::index() const {
  // @@protoc_insertion_point(field_get:DataTypes.Page.index)
  return index_;
}
inline void Page::set_index(::google::protobuf::int32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:DataTypes.Page.index)
}

// optional int32 size = 2;
inline void Page::clear_size() {
  size_ = 0;
}
inline ::google::protobuf::int32 Page::size() const {
  // @@protoc_insertion_point(field_get:DataTypes.Page.size)
  return size_;
}
inline void Page::set_size(::google::protobuf::int32 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:DataTypes.Page.size)
}

// -------------------------------------------------------------------

// GetCardRequest

// optional string search_text = 1;
inline void GetCardRequest::clear_search_text() {
  search_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetCardRequest::search_text() const {
  // @@protoc_insertion_point(field_get:DataTypes.GetCardRequest.search_text)
  return search_text_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetCardRequest::set_search_text(const ::std::string& value) {
  
  search_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DataTypes.GetCardRequest.search_text)
}
inline void GetCardRequest::set_search_text(const char* value) {
  
  search_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DataTypes.GetCardRequest.search_text)
}
inline void GetCardRequest::set_search_text(const char* value, size_t size) {
  
  search_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DataTypes.GetCardRequest.search_text)
}
inline ::std::string* GetCardRequest::mutable_search_text() {
  
  // @@protoc_insertion_point(field_mutable:DataTypes.GetCardRequest.search_text)
  return search_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetCardRequest::release_search_text() {
  // @@protoc_insertion_point(field_release:DataTypes.GetCardRequest.search_text)
  
  return search_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetCardRequest::set_allocated_search_text(::std::string* search_text) {
  if (search_text != NULL) {
    
  } else {
    
  }
  search_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), search_text);
  // @@protoc_insertion_point(field_set_allocated:DataTypes.GetCardRequest.search_text)
}

// optional string unique_identifier = 2;
inline void GetCardRequest::clear_unique_identifier() {
  unique_identifier_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetCardRequest::unique_identifier() const {
  // @@protoc_insertion_point(field_get:DataTypes.GetCardRequest.unique_identifier)
  return unique_identifier_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetCardRequest::set_unique_identifier(const ::std::string& value) {
  
  unique_identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DataTypes.GetCardRequest.unique_identifier)
}
inline void GetCardRequest::set_unique_identifier(const char* value) {
  
  unique_identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DataTypes.GetCardRequest.unique_identifier)
}
inline void GetCardRequest::set_unique_identifier(const char* value, size_t size) {
  
  unique_identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DataTypes.GetCardRequest.unique_identifier)
}
inline ::std::string* GetCardRequest::mutable_unique_identifier() {
  
  // @@protoc_insertion_point(field_mutable:DataTypes.GetCardRequest.unique_identifier)
  return unique_identifier_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetCardRequest::release_unique_identifier() {
  // @@protoc_insertion_point(field_release:DataTypes.GetCardRequest.unique_identifier)
  
  return unique_identifier_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetCardRequest::set_allocated_unique_identifier(::std::string* unique_identifier) {
  if (unique_identifier != NULL) {
    
  } else {
    
  }
  unique_identifier_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unique_identifier);
  // @@protoc_insertion_point(field_set_allocated:DataTypes.GetCardRequest.unique_identifier)
}

// repeated .DataTypes.Key owners = 3;
inline int GetCardRequest::owners_size() const {
  return owners_.size();
}
inline void GetCardRequest::clear_owners() {
  owners_.Clear();
}
inline const ::DataTypes::Key& GetCardRequest::owners(int index) const {
  // @@protoc_insertion_point(field_get:DataTypes.GetCardRequest.owners)
  return owners_.Get(index);
}
inline ::DataTypes::Key* GetCardRequest::mutable_owners(int index) {
  // @@protoc_insertion_point(field_mutable:DataTypes.GetCardRequest.owners)
  return owners_.Mutable(index);
}
inline ::DataTypes::Key* GetCardRequest::add_owners() {
  // @@protoc_insertion_point(field_add:DataTypes.GetCardRequest.owners)
  return owners_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::DataTypes::Key >*
GetCardRequest::mutable_owners() {
  // @@protoc_insertion_point(field_mutable_list:DataTypes.GetCardRequest.owners)
  return &owners_;
}
inline const ::google::protobuf::RepeatedPtrField< ::DataTypes::Key >&
GetCardRequest::owners() const {
  // @@protoc_insertion_point(field_list:DataTypes.GetCardRequest.owners)
  return owners_;
}

// optional .DataTypes.Page page = 4;
inline bool GetCardRequest::has_page() const {
  return !_is_default_instance_ && page_ != NULL;
}
inline void GetCardRequest::clear_page() {
  if (GetArenaNoVirtual() == NULL && page_ != NULL) delete page_;
  page_ = NULL;
}
inline const ::DataTypes::Page& GetCardRequest::page() const {
  // @@protoc_insertion_point(field_get:DataTypes.GetCardRequest.page)
  return page_ != NULL ? *page_ : *default_instance_->page_;
}
inline ::DataTypes::Page* GetCardRequest::mutable_page() {
  
  if (page_ == NULL) {
    page_ = new ::DataTypes::Page;
  }
  // @@protoc_insertion_point(field_mutable:DataTypes.GetCardRequest.page)
  return page_;
}
inline ::DataTypes::Page* GetCardRequest::release_page() {
  // @@protoc_insertion_point(field_release:DataTypes.GetCardRequest.page)
  
  ::DataTypes::Page* temp = page_;
  page_ = NULL;
  return temp;
}
inline void GetCardRequest::set_allocated_page(::DataTypes::Page* page) {
  delete page_;
  page_ = page;
  if (page) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:DataTypes.GetCardRequest.page)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace DataTypes

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_datatypes_2fqueries_2eproto__INCLUDED
