// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datatypes/entity.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "datatypes/entity.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace DataTypes {

namespace {

const ::google::protobuf::Descriptor* Entity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Entity_reflection_ = NULL;
struct EntityOneofInstance {
  const ::DataTypes::Card* card_;
  const ::DataTypes::Person* person_;
  const ::DataTypes::VisitRecord* visit_record_;
  const ::DataTypes::Location* location_;
  const ::DataTypes::Photo* photo_;
  const ::DataTypes::Group* group_;
}* Entity_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* Entities_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Entities_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_datatypes_2fentity_2eproto() {
  protobuf_AddDesc_datatypes_2fentity_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "datatypes/entity.proto");
  GOOGLE_CHECK(file != NULL);
  Entity_descriptor_ = file->message_type(0);
  static const int Entity_offsets_[7] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Entity_default_oneof_instance_, card_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Entity_default_oneof_instance_, person_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Entity_default_oneof_instance_, visit_record_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Entity_default_oneof_instance_, location_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Entity_default_oneof_instance_, photo_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Entity_default_oneof_instance_, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, value_type_),
  };
  Entity_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Entity_descriptor_,
      Entity::default_instance_,
      Entity_offsets_,
      -1,
      -1,
      -1,
      Entity_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, _oneof_case_[0]),
      sizeof(Entity),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, _is_default_instance_));
  Entities_descriptor_ = file->message_type(1);
  static const int Entities_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entities, items_),
  };
  Entities_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Entities_descriptor_,
      Entities::default_instance_,
      Entities_offsets_,
      -1,
      -1,
      -1,
      sizeof(Entities),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entities, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entities, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_datatypes_2fentity_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Entity_descriptor_, &Entity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Entities_descriptor_, &Entities::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_datatypes_2fentity_2eproto() {
  delete Entity::default_instance_;
  delete Entity_default_oneof_instance_;
  delete Entity_reflection_;
  delete Entities::default_instance_;
  delete Entities_reflection_;
}

void protobuf_AddDesc_datatypes_2fentity_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DataTypes::protobuf_AddDesc_datatypes_2fperson_2eproto();
  ::DataTypes::protobuf_AddDesc_datatypes_2fcard_2eproto();
  ::DataTypes::protobuf_AddDesc_datatypes_2fphoto_2eproto();
  ::DataTypes::protobuf_AddDesc_datatypes_2flocation_2eproto();
  ::DataTypes::protobuf_AddDesc_datatypes_2fvisit_5frecord_2eproto();
  ::DataTypes::protobuf_AddDesc_datatypes_2fgroup_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026datatypes/entity.proto\022\tDataTypes\032\026dat"
    "atypes/person.proto\032\024datatypes/card.prot"
    "o\032\025datatypes/photo.proto\032\030datatypes/loca"
    "tion.proto\032\034datatypes/visit_record.proto"
    "\032\025datatypes/group.proto\"\373\001\n\006Entity\022\037\n\004ca"
    "rd\030\001 \001(\0132\017.DataTypes.CardH\000\022#\n\006person\030\002 "
    "\001(\0132\021.DataTypes.PersonH\000\022.\n\014visit_record"
    "\030\003 \001(\0132\026.DataTypes.VisitRecordH\000\022\'\n\010loca"
    "tion\030\004 \001(\0132\023.DataTypes.LocationH\000\022!\n\005pho"
    "to\030\005 \001(\0132\020.DataTypes.PhotoH\000\022!\n\005group\030\006 "
    "\001(\0132\020.DataTypes.GroupH\000B\014\n\nvalue_type\",\n"
    "\010Entities\022 \n\005items\030\001 \003(\0132\021.DataTypes.Ent"
    "ityBK\n\007ex.grpcZ:github.com/Enebra/Servic"
    "eCoordinator/grpc/datatypes/entity\242\002\003RTG"
    "b\006proto3", 568);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "datatypes/entity.proto", &protobuf_RegisterTypes);
  Entity::default_instance_ = new Entity();
  Entity_default_oneof_instance_ = new EntityOneofInstance();
  Entities::default_instance_ = new Entities();
  Entity::default_instance_->InitAsDefaultInstance();
  Entities::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_datatypes_2fentity_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_datatypes_2fentity_2eproto {
  StaticDescriptorInitializer_datatypes_2fentity_2eproto() {
    protobuf_AddDesc_datatypes_2fentity_2eproto();
  }
} static_descriptor_initializer_datatypes_2fentity_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Entity::kCardFieldNumber;
const int Entity::kPersonFieldNumber;
const int Entity::kVisitRecordFieldNumber;
const int Entity::kLocationFieldNumber;
const int Entity::kPhotoFieldNumber;
const int Entity::kGroupFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Entity::Entity()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DataTypes.Entity)
}

void Entity::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  Entity_default_oneof_instance_->card_ = const_cast< ::DataTypes::Card*>(&::DataTypes::Card::default_instance());
  Entity_default_oneof_instance_->person_ = const_cast< ::DataTypes::Person*>(&::DataTypes::Person::default_instance());
  Entity_default_oneof_instance_->visit_record_ = const_cast< ::DataTypes::VisitRecord*>(&::DataTypes::VisitRecord::default_instance());
  Entity_default_oneof_instance_->location_ = const_cast< ::DataTypes::Location*>(&::DataTypes::Location::default_instance());
  Entity_default_oneof_instance_->photo_ = const_cast< ::DataTypes::Photo*>(&::DataTypes::Photo::default_instance());
  Entity_default_oneof_instance_->group_ = const_cast< ::DataTypes::Group*>(&::DataTypes::Group::default_instance());
}

Entity::Entity(const Entity& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DataTypes.Entity)
}

void Entity::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  clear_has_value_type();
}

Entity::~Entity() {
  // @@protoc_insertion_point(destructor:DataTypes.Entity)
  SharedDtor();
}

void Entity::SharedDtor() {
  if (has_value_type()) {
    clear_value_type();
  }
  if (this != default_instance_) {
  }
}

void Entity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Entity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Entity_descriptor_;
}

const Entity& Entity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datatypes_2fentity_2eproto();
  return *default_instance_;
}

Entity* Entity::default_instance_ = NULL;

Entity* Entity::New(::google::protobuf::Arena* arena) const {
  Entity* n = new Entity;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Entity::clear_value_type() {
// @@protoc_insertion_point(one_of_clear_start:DataTypes.Entity)
  switch(value_type_case()) {
    case kCard: {
      delete value_type_.card_;
      break;
    }
    case kPerson: {
      delete value_type_.person_;
      break;
    }
    case kVisitRecord: {
      delete value_type_.visit_record_;
      break;
    }
    case kLocation: {
      delete value_type_.location_;
      break;
    }
    case kPhoto: {
      delete value_type_.photo_;
      break;
    }
    case kGroup: {
      delete value_type_.group_;
      break;
    }
    case VALUE_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_TYPE_NOT_SET;
}


void Entity::Clear() {
// @@protoc_insertion_point(message_clear_start:DataTypes.Entity)
  clear_value_type();
}

bool Entity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DataTypes.Entity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DataTypes.Card card = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_card()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_person;
        break;
      }

      // optional .DataTypes.Person person = 2;
      case 2: {
        if (tag == 18) {
         parse_person:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_person()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_visit_record;
        break;
      }

      // optional .DataTypes.VisitRecord visit_record = 3;
      case 3: {
        if (tag == 26) {
         parse_visit_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_visit_record()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_location;
        break;
      }

      // optional .DataTypes.Location location = 4;
      case 4: {
        if (tag == 34) {
         parse_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_photo;
        break;
      }

      // optional .DataTypes.Photo photo = 5;
      case 5: {
        if (tag == 42) {
         parse_photo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_photo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_group;
        break;
      }

      // optional .DataTypes.Group group = 6;
      case 6: {
        if (tag == 50) {
         parse_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DataTypes.Entity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DataTypes.Entity)
  return false;
#undef DO_
}

void Entity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DataTypes.Entity)
  // optional .DataTypes.Card card = 1;
  if (has_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *value_type_.card_, output);
  }

  // optional .DataTypes.Person person = 2;
  if (has_person()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *value_type_.person_, output);
  }

  // optional .DataTypes.VisitRecord visit_record = 3;
  if (has_visit_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *value_type_.visit_record_, output);
  }

  // optional .DataTypes.Location location = 4;
  if (has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *value_type_.location_, output);
  }

  // optional .DataTypes.Photo photo = 5;
  if (has_photo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *value_type_.photo_, output);
  }

  // optional .DataTypes.Group group = 6;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *value_type_.group_, output);
  }

  // @@protoc_insertion_point(serialize_end:DataTypes.Entity)
}

::google::protobuf::uint8* Entity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DataTypes.Entity)
  // optional .DataTypes.Card card = 1;
  if (has_card()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *value_type_.card_, target);
  }

  // optional .DataTypes.Person person = 2;
  if (has_person()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *value_type_.person_, target);
  }

  // optional .DataTypes.VisitRecord visit_record = 3;
  if (has_visit_record()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *value_type_.visit_record_, target);
  }

  // optional .DataTypes.Location location = 4;
  if (has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *value_type_.location_, target);
  }

  // optional .DataTypes.Photo photo = 5;
  if (has_photo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *value_type_.photo_, target);
  }

  // optional .DataTypes.Group group = 6;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, *value_type_.group_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:DataTypes.Entity)
  return target;
}

int Entity::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:DataTypes.Entity)
  int total_size = 0;

  switch (value_type_case()) {
    // optional .DataTypes.Card card = 1;
    case kCard: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_type_.card_);
      break;
    }
    // optional .DataTypes.Person person = 2;
    case kPerson: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_type_.person_);
      break;
    }
    // optional .DataTypes.VisitRecord visit_record = 3;
    case kVisitRecord: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_type_.visit_record_);
      break;
    }
    // optional .DataTypes.Location location = 4;
    case kLocation: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_type_.location_);
      break;
    }
    // optional .DataTypes.Photo photo = 5;
    case kPhoto: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_type_.photo_);
      break;
    }
    // optional .DataTypes.Group group = 6;
    case kGroup: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_type_.group_);
      break;
    }
    case VALUE_TYPE_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Entity::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DataTypes.Entity)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Entity* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Entity>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DataTypes.Entity)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DataTypes.Entity)
    MergeFrom(*source);
  }
}

void Entity::MergeFrom(const Entity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DataTypes.Entity)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  switch (from.value_type_case()) {
    case kCard: {
      mutable_card()->::DataTypes::Card::MergeFrom(from.card());
      break;
    }
    case kPerson: {
      mutable_person()->::DataTypes::Person::MergeFrom(from.person());
      break;
    }
    case kVisitRecord: {
      mutable_visit_record()->::DataTypes::VisitRecord::MergeFrom(from.visit_record());
      break;
    }
    case kLocation: {
      mutable_location()->::DataTypes::Location::MergeFrom(from.location());
      break;
    }
    case kPhoto: {
      mutable_photo()->::DataTypes::Photo::MergeFrom(from.photo());
      break;
    }
    case kGroup: {
      mutable_group()->::DataTypes::Group::MergeFrom(from.group());
      break;
    }
    case VALUE_TYPE_NOT_SET: {
      break;
    }
  }
}

void Entity::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DataTypes.Entity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Entity::CopyFrom(const Entity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DataTypes.Entity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Entity::IsInitialized() const {

  return true;
}

void Entity::Swap(Entity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Entity::InternalSwap(Entity* other) {
  std::swap(value_type_, other->value_type_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Entity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Entity_descriptor_;
  metadata.reflection = Entity_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Entity

// optional .DataTypes.Card card = 1;
bool Entity::has_card() const {
  return value_type_case() == kCard;
}
void Entity::set_has_card() {
  _oneof_case_[0] = kCard;
}
void Entity::clear_card() {
  if (has_card()) {
    delete value_type_.card_;
    clear_has_value_type();
  }
}
 const ::DataTypes::Card& Entity::card() const {
  // @@protoc_insertion_point(field_get:DataTypes.Entity.card)
  return has_card()
      ? *value_type_.card_
      : ::DataTypes::Card::default_instance();
}
::DataTypes::Card* Entity::mutable_card() {
  if (!has_card()) {
    clear_value_type();
    set_has_card();
    value_type_.card_ = new ::DataTypes::Card;
  }
  // @@protoc_insertion_point(field_mutable:DataTypes.Entity.card)
  return value_type_.card_;
}
::DataTypes::Card* Entity::release_card() {
  // @@protoc_insertion_point(field_release:DataTypes.Entity.card)
  if (has_card()) {
    clear_has_value_type();
    ::DataTypes::Card* temp = value_type_.card_;
    value_type_.card_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Entity::set_allocated_card(::DataTypes::Card* card) {
  clear_value_type();
  if (card) {
    set_has_card();
    value_type_.card_ = card;
  }
  // @@protoc_insertion_point(field_set_allocated:DataTypes.Entity.card)
}

// optional .DataTypes.Person person = 2;
bool Entity::has_person() const {
  return value_type_case() == kPerson;
}
void Entity::set_has_person() {
  _oneof_case_[0] = kPerson;
}
void Entity::clear_person() {
  if (has_person()) {
    delete value_type_.person_;
    clear_has_value_type();
  }
}
 const ::DataTypes::Person& Entity::person() const {
  // @@protoc_insertion_point(field_get:DataTypes.Entity.person)
  return has_person()
      ? *value_type_.person_
      : ::DataTypes::Person::default_instance();
}
::DataTypes::Person* Entity::mutable_person() {
  if (!has_person()) {
    clear_value_type();
    set_has_person();
    value_type_.person_ = new ::DataTypes::Person;
  }
  // @@protoc_insertion_point(field_mutable:DataTypes.Entity.person)
  return value_type_.person_;
}
::DataTypes::Person* Entity::release_person() {
  // @@protoc_insertion_point(field_release:DataTypes.Entity.person)
  if (has_person()) {
    clear_has_value_type();
    ::DataTypes::Person* temp = value_type_.person_;
    value_type_.person_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Entity::set_allocated_person(::DataTypes::Person* person) {
  clear_value_type();
  if (person) {
    set_has_person();
    value_type_.person_ = person;
  }
  // @@protoc_insertion_point(field_set_allocated:DataTypes.Entity.person)
}

// optional .DataTypes.VisitRecord visit_record = 3;
bool Entity::has_visit_record() const {
  return value_type_case() == kVisitRecord;
}
void Entity::set_has_visit_record() {
  _oneof_case_[0] = kVisitRecord;
}
void Entity::clear_visit_record() {
  if (has_visit_record()) {
    delete value_type_.visit_record_;
    clear_has_value_type();
  }
}
 const ::DataTypes::VisitRecord& Entity::visit_record() const {
  // @@protoc_insertion_point(field_get:DataTypes.Entity.visit_record)
  return has_visit_record()
      ? *value_type_.visit_record_
      : ::DataTypes::VisitRecord::default_instance();
}
::DataTypes::VisitRecord* Entity::mutable_visit_record() {
  if (!has_visit_record()) {
    clear_value_type();
    set_has_visit_record();
    value_type_.visit_record_ = new ::DataTypes::VisitRecord;
  }
  // @@protoc_insertion_point(field_mutable:DataTypes.Entity.visit_record)
  return value_type_.visit_record_;
}
::DataTypes::VisitRecord* Entity::release_visit_record() {
  // @@protoc_insertion_point(field_release:DataTypes.Entity.visit_record)
  if (has_visit_record()) {
    clear_has_value_type();
    ::DataTypes::VisitRecord* temp = value_type_.visit_record_;
    value_type_.visit_record_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Entity::set_allocated_visit_record(::DataTypes::VisitRecord* visit_record) {
  clear_value_type();
  if (visit_record) {
    set_has_visit_record();
    value_type_.visit_record_ = visit_record;
  }
  // @@protoc_insertion_point(field_set_allocated:DataTypes.Entity.visit_record)
}

// optional .DataTypes.Location location = 4;
bool Entity::has_location() const {
  return value_type_case() == kLocation;
}
void Entity::set_has_location() {
  _oneof_case_[0] = kLocation;
}
void Entity::clear_location() {
  if (has_location()) {
    delete value_type_.location_;
    clear_has_value_type();
  }
}
 const ::DataTypes::Location& Entity::location() const {
  // @@protoc_insertion_point(field_get:DataTypes.Entity.location)
  return has_location()
      ? *value_type_.location_
      : ::DataTypes::Location::default_instance();
}
::DataTypes::Location* Entity::mutable_location() {
  if (!has_location()) {
    clear_value_type();
    set_has_location();
    value_type_.location_ = new ::DataTypes::Location;
  }
  // @@protoc_insertion_point(field_mutable:DataTypes.Entity.location)
  return value_type_.location_;
}
::DataTypes::Location* Entity::release_location() {
  // @@protoc_insertion_point(field_release:DataTypes.Entity.location)
  if (has_location()) {
    clear_has_value_type();
    ::DataTypes::Location* temp = value_type_.location_;
    value_type_.location_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Entity::set_allocated_location(::DataTypes::Location* location) {
  clear_value_type();
  if (location) {
    set_has_location();
    value_type_.location_ = location;
  }
  // @@protoc_insertion_point(field_set_allocated:DataTypes.Entity.location)
}

// optional .DataTypes.Photo photo = 5;
bool Entity::has_photo() const {
  return value_type_case() == kPhoto;
}
void Entity::set_has_photo() {
  _oneof_case_[0] = kPhoto;
}
void Entity::clear_photo() {
  if (has_photo()) {
    delete value_type_.photo_;
    clear_has_value_type();
  }
}
 const ::DataTypes::Photo& Entity::photo() const {
  // @@protoc_insertion_point(field_get:DataTypes.Entity.photo)
  return has_photo()
      ? *value_type_.photo_
      : ::DataTypes::Photo::default_instance();
}
::DataTypes::Photo* Entity::mutable_photo() {
  if (!has_photo()) {
    clear_value_type();
    set_has_photo();
    value_type_.photo_ = new ::DataTypes::Photo;
  }
  // @@protoc_insertion_point(field_mutable:DataTypes.Entity.photo)
  return value_type_.photo_;
}
::DataTypes::Photo* Entity::release_photo() {
  // @@protoc_insertion_point(field_release:DataTypes.Entity.photo)
  if (has_photo()) {
    clear_has_value_type();
    ::DataTypes::Photo* temp = value_type_.photo_;
    value_type_.photo_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Entity::set_allocated_photo(::DataTypes::Photo* photo) {
  clear_value_type();
  if (photo) {
    set_has_photo();
    value_type_.photo_ = photo;
  }
  // @@protoc_insertion_point(field_set_allocated:DataTypes.Entity.photo)
}

// optional .DataTypes.Group group = 6;
bool Entity::has_group() const {
  return value_type_case() == kGroup;
}
void Entity::set_has_group() {
  _oneof_case_[0] = kGroup;
}
void Entity::clear_group() {
  if (has_group()) {
    delete value_type_.group_;
    clear_has_value_type();
  }
}
 const ::DataTypes::Group& Entity::group() const {
  // @@protoc_insertion_point(field_get:DataTypes.Entity.group)
  return has_group()
      ? *value_type_.group_
      : ::DataTypes::Group::default_instance();
}
::DataTypes::Group* Entity::mutable_group() {
  if (!has_group()) {
    clear_value_type();
    set_has_group();
    value_type_.group_ = new ::DataTypes::Group;
  }
  // @@protoc_insertion_point(field_mutable:DataTypes.Entity.group)
  return value_type_.group_;
}
::DataTypes::Group* Entity::release_group() {
  // @@protoc_insertion_point(field_release:DataTypes.Entity.group)
  if (has_group()) {
    clear_has_value_type();
    ::DataTypes::Group* temp = value_type_.group_;
    value_type_.group_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Entity::set_allocated_group(::DataTypes::Group* group) {
  clear_value_type();
  if (group) {
    set_has_group();
    value_type_.group_ = group;
  }
  // @@protoc_insertion_point(field_set_allocated:DataTypes.Entity.group)
}

bool Entity::has_value_type() const {
  return value_type_case() != VALUE_TYPE_NOT_SET;
}
void Entity::clear_has_value_type() {
  _oneof_case_[0] = VALUE_TYPE_NOT_SET;
}
Entity::ValueTypeCase Entity::value_type_case() const {
  return Entity::ValueTypeCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Entities::kItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Entities::Entities()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DataTypes.Entities)
}

void Entities::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Entities::Entities(const Entities& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DataTypes.Entities)
}

void Entities::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

Entities::~Entities() {
  // @@protoc_insertion_point(destructor:DataTypes.Entities)
  SharedDtor();
}

void Entities::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Entities::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Entities::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Entities_descriptor_;
}

const Entities& Entities::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datatypes_2fentity_2eproto();
  return *default_instance_;
}

Entities* Entities::default_instance_ = NULL;

Entities* Entities::New(::google::protobuf::Arena* arena) const {
  Entities* n = new Entities;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Entities::Clear() {
// @@protoc_insertion_point(message_clear_start:DataTypes.Entities)
  items_.Clear();
}

bool Entities::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DataTypes.Entities)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DataTypes.Entity items = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_items;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DataTypes.Entities)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DataTypes.Entities)
  return false;
#undef DO_
}

void Entities::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DataTypes.Entities)
  // repeated .DataTypes.Entity items = 1;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  // @@protoc_insertion_point(serialize_end:DataTypes.Entities)
}

::google::protobuf::uint8* Entities::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DataTypes.Entities)
  // repeated .DataTypes.Entity items = 1;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:DataTypes.Entities)
  return target;
}

int Entities::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:DataTypes.Entities)
  int total_size = 0;

  // repeated .DataTypes.Entity items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Entities::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DataTypes.Entities)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Entities* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Entities>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DataTypes.Entities)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DataTypes.Entities)
    MergeFrom(*source);
  }
}

void Entities::MergeFrom(const Entities& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DataTypes.Entities)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  items_.MergeFrom(from.items_);
}

void Entities::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DataTypes.Entities)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Entities::CopyFrom(const Entities& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DataTypes.Entities)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Entities::IsInitialized() const {

  return true;
}

void Entities::Swap(Entities* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Entities::InternalSwap(Entities* other) {
  items_.UnsafeArenaSwap(&other->items_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Entities::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Entities_descriptor_;
  metadata.reflection = Entities_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Entities

// repeated .DataTypes.Entity items = 1;
int Entities::items_size() const {
  return items_.size();
}
void Entities::clear_items() {
  items_.Clear();
}
const ::DataTypes::Entity& Entities::items(int index) const {
  // @@protoc_insertion_point(field_get:DataTypes.Entities.items)
  return items_.Get(index);
}
::DataTypes::Entity* Entities::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:DataTypes.Entities.items)
  return items_.Mutable(index);
}
::DataTypes::Entity* Entities::add_items() {
  // @@protoc_insertion_point(field_add:DataTypes.Entities.items)
  return items_.Add();
}
::google::protobuf::RepeatedPtrField< ::DataTypes::Entity >*
Entities::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:DataTypes.Entities.items)
  return &items_;
}
const ::google::protobuf::RepeatedPtrField< ::DataTypes::Entity >&
Entities::items() const {
  // @@protoc_insertion_point(field_list:DataTypes.Entities.items)
  return items_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace DataTypes

// @@protoc_insertion_point(global_scope)
