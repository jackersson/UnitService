// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datatypes/biometrics.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "datatypes/biometrics.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace DataTypes {

namespace {

const ::google::protobuf::Descriptor* Faces_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faces_reflection_ = NULL;
const ::google::protobuf::Descriptor* FaceCharacteristic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FaceCharacteristic_reflection_ = NULL;
const ::google::protobuf::Descriptor* Match_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Match_reflection_ = NULL;
const ::google::protobuf::Descriptor* Matches_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Matches_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BiometricType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EyeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Finger_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FacialIsoComplianceTemplate_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_datatypes_2fbiometrics_2eproto() {
  protobuf_AddDesc_datatypes_2fbiometrics_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "datatypes/biometrics.proto");
  GOOGLE_CHECK(file != NULL);
  Faces_descriptor_ = file->message_type(0);
  static const int Faces_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faces, faces_),
  };
  Faces_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Faces_descriptor_,
      Faces::default_instance_,
      Faces_offsets_,
      -1,
      -1,
      -1,
      sizeof(Faces),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faces, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faces, _is_default_instance_));
  FaceCharacteristic_descriptor_ = file->message_type(1);
  static const int FaceCharacteristic_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceCharacteristic, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceCharacteristic, box_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceCharacteristic, confidence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceCharacteristic, person_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceCharacteristic, photo_id_),
  };
  FaceCharacteristic_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FaceCharacteristic_descriptor_,
      FaceCharacteristic::default_instance_,
      FaceCharacteristic_offsets_,
      -1,
      -1,
      -1,
      sizeof(FaceCharacteristic),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceCharacteristic, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceCharacteristic, _is_default_instance_));
  Match_descriptor_ = file->message_type(2);
  static const int Match_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match, face_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match, match_),
  };
  Match_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Match_descriptor_,
      Match::default_instance_,
      Match_offsets_,
      -1,
      -1,
      -1,
      sizeof(Match),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match, _is_default_instance_));
  Matches_descriptor_ = file->message_type(3);
  static const int Matches_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matches, face_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matches, matches_),
  };
  Matches_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Matches_descriptor_,
      Matches::default_instance_,
      Matches_offsets_,
      -1,
      -1,
      -1,
      sizeof(Matches),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matches, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matches, _is_default_instance_));
  BiometricType_descriptor_ = file->enum_type(0);
  EyeType_descriptor_ = file->enum_type(1);
  Finger_descriptor_ = file->enum_type(2);
  FacialIsoComplianceTemplate_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_datatypes_2fbiometrics_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Faces_descriptor_, &Faces::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FaceCharacteristic_descriptor_, &FaceCharacteristic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Match_descriptor_, &Match::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Matches_descriptor_, &Matches::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_datatypes_2fbiometrics_2eproto() {
  delete Faces::default_instance_;
  delete Faces_reflection_;
  delete FaceCharacteristic::default_instance_;
  delete FaceCharacteristic_reflection_;
  delete Match::default_instance_;
  delete Match_reflection_;
  delete Matches::default_instance_;
  delete Matches_reflection_;
}

void protobuf_AddDesc_datatypes_2fbiometrics_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DataTypes::protobuf_AddDesc_datatypes_2fgeometry_2eproto();
  ::DataTypes::protobuf_AddDesc_datatypes_2fdata_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032datatypes/biometrics.proto\022\tDataTypes\032"
    "\030datatypes/geometry.proto\032\024datatypes/dat"
    "a.proto\"5\n\005Faces\022,\n\005Faces\030\001 \003(\0132\035.DataTy"
    "pes.FaceCharacteristic\"\206\001\n\022FaceCharacter"
    "istic\022\032\n\002id\030\001 \001(\0132\016.DataTypes.Key\022\033\n\003box"
    "\030\002 \001(\0132\016.DataTypes.Box\022\022\n\nconfidence\030\003 \001"
    "(\002\022\021\n\tperson_id\030\004 \001(\003\022\020\n\010photo_id\030\005 \001(\003\""
    "7\n\005Match\022\037\n\007face_id\030\002 \001(\0132\016.DataTypes.Ke"
    "y\022\r\n\005match\030\003 \001(\002\"M\n\007Matches\022\037\n\007face_id\030\001"
    " \001(\0132\016.DataTypes.Key\022!\n\007matches\030\002 \003(\0132\020."
    "DataTypes.Match*S\n\rBiometricType\022\022\n\016Unsp"
    "ecifiedBio\020\000\022\n\n\006Facial\020\001\022\017\n\013Fingerprint\020"
    "\002\022\010\n\004Iris\020\003\022\007\n\003All\020\004*=\n\007EyeType\022\023\n\017Unspe"
    "cified_Eye\020\000\022\010\n\004Left\020\001\022\t\n\005Right\020\002\022\010\n\004Bot"
    "h\020\003*\275\001\n\006Finger\022\026\n\022Unspecified_Finger\020\000\022\016"
    "\n\nRightThumb\020\001\022\r\n\tLeftThumb\020\002\022\016\n\nRightIn"
    "dex\020\003\022\r\n\tLeftIndex\020\004\022\017\n\013RightMiddle\020\005\022\016\n"
    "\nLeftMiddle\020\006\022\r\n\tRightRing\020\007\022\014\n\010LeftRing"
    "\020\010\022\017\n\013RightLittle\020\t\022\016\n\nLeftLittle\020\n*\216\005\n\033"
    "FacialIsoComplianceTemplate\022\033\n\027Unspecifi"
    "ed_IsoTemplate\020\000\022\026\n\022OnlyOneFaceVisible\020\001"
    "\022\034\n\030goodVerticalFacePosition\020\002\022\034\n\030horizo"
    "ntallyCenteredFace\020\003\022\017\n\013widthOfHead\020\004\022\020\n"
    "\014lengthOfHead\020\005\022\033\n\027widthOfHeadBestPracti"
    "ce\020\006\022\034\n\030lengthOfHeadBestPractice\020\007\022\016\n\nre"
    "solution\020\010\022\032\n\026resolutionBestPractice\020\t\022\""
    "\n\036imageWidthToHeightBestPractice\020\n\022\020\n\014go"
    "odExposure\020\013\022\030\n\024goodGrayScaleProfile\020\014\022\030"
    "\n\024hasNaturalSkinColour\020\r\022\016\n\nnoHotSpots\020\016"
    "\022#\n\037isBackgroundUniformBestPractice\020\017\022\r\n"
    "\tisFrontal\020\020\022\031\n\025isFrontalBestPractice\020\021\022"
    "\025\n\021isLightingUniform\020\022\022\030\n\024eyesOpenBestPr"
    "actice\020\023\022\037\n\033eyesGazeFrontalBestPractice\020"
    "\024\022\032\n\026eyesNotRedBestPractice\020\025\022\023\n\017noTinte"
    "dGlasses\020\026\022\013\n\007isSharp\020\027\022\033\n\027mouthClosedBe"
    "stPractice\020\030BO\n\007ex.grpcZ>github.com/Eneb"
    "ra/ServiceCoordinator/grpc/datatypes/bio"
    "metrics\242\002\003RTGb\006proto3", 1501);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "datatypes/biometrics.proto", &protobuf_RegisterTypes);
  Faces::default_instance_ = new Faces();
  FaceCharacteristic::default_instance_ = new FaceCharacteristic();
  Match::default_instance_ = new Match();
  Matches::default_instance_ = new Matches();
  Faces::default_instance_->InitAsDefaultInstance();
  FaceCharacteristic::default_instance_->InitAsDefaultInstance();
  Match::default_instance_->InitAsDefaultInstance();
  Matches::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_datatypes_2fbiometrics_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_datatypes_2fbiometrics_2eproto {
  StaticDescriptorInitializer_datatypes_2fbiometrics_2eproto() {
    protobuf_AddDesc_datatypes_2fbiometrics_2eproto();
  }
} static_descriptor_initializer_datatypes_2fbiometrics_2eproto_;
const ::google::protobuf::EnumDescriptor* BiometricType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BiometricType_descriptor_;
}
bool BiometricType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EyeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EyeType_descriptor_;
}
bool EyeType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Finger_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Finger_descriptor_;
}
bool Finger_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FacialIsoComplianceTemplate_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FacialIsoComplianceTemplate_descriptor_;
}
bool FacialIsoComplianceTemplate_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Faces::kFacesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Faces::Faces()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DataTypes.Faces)
}

void Faces::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Faces::Faces(const Faces& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DataTypes.Faces)
}

void Faces::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

Faces::~Faces() {
  // @@protoc_insertion_point(destructor:DataTypes.Faces)
  SharedDtor();
}

void Faces::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Faces::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faces::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faces_descriptor_;
}

const Faces& Faces::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datatypes_2fbiometrics_2eproto();
  return *default_instance_;
}

Faces* Faces::default_instance_ = NULL;

Faces* Faces::New(::google::protobuf::Arena* arena) const {
  Faces* n = new Faces;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Faces::Clear() {
// @@protoc_insertion_point(message_clear_start:DataTypes.Faces)
  faces_.Clear();
}

bool Faces::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DataTypes.Faces)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DataTypes.FaceCharacteristic Faces = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_Faces:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_faces()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_Faces;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DataTypes.Faces)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DataTypes.Faces)
  return false;
#undef DO_
}

void Faces::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DataTypes.Faces)
  // repeated .DataTypes.FaceCharacteristic Faces = 1;
  for (unsigned int i = 0, n = this->faces_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->faces(i), output);
  }

  // @@protoc_insertion_point(serialize_end:DataTypes.Faces)
}

::google::protobuf::uint8* Faces::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DataTypes.Faces)
  // repeated .DataTypes.FaceCharacteristic Faces = 1;
  for (unsigned int i = 0, n = this->faces_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->faces(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:DataTypes.Faces)
  return target;
}

int Faces::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:DataTypes.Faces)
  int total_size = 0;

  // repeated .DataTypes.FaceCharacteristic Faces = 1;
  total_size += 1 * this->faces_size();
  for (int i = 0; i < this->faces_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->faces(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faces::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DataTypes.Faces)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Faces* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Faces>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DataTypes.Faces)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DataTypes.Faces)
    MergeFrom(*source);
  }
}

void Faces::MergeFrom(const Faces& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DataTypes.Faces)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  faces_.MergeFrom(from.faces_);
}

void Faces::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DataTypes.Faces)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faces::CopyFrom(const Faces& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DataTypes.Faces)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faces::IsInitialized() const {

  return true;
}

void Faces::Swap(Faces* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Faces::InternalSwap(Faces* other) {
  faces_.UnsafeArenaSwap(&other->faces_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Faces::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faces_descriptor_;
  metadata.reflection = Faces_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Faces

// repeated .DataTypes.FaceCharacteristic Faces = 1;
int Faces::faces_size() const {
  return faces_.size();
}
void Faces::clear_faces() {
  faces_.Clear();
}
const ::DataTypes::FaceCharacteristic& Faces::faces(int index) const {
  // @@protoc_insertion_point(field_get:DataTypes.Faces.Faces)
  return faces_.Get(index);
}
::DataTypes::FaceCharacteristic* Faces::mutable_faces(int index) {
  // @@protoc_insertion_point(field_mutable:DataTypes.Faces.Faces)
  return faces_.Mutable(index);
}
::DataTypes::FaceCharacteristic* Faces::add_faces() {
  // @@protoc_insertion_point(field_add:DataTypes.Faces.Faces)
  return faces_.Add();
}
::google::protobuf::RepeatedPtrField< ::DataTypes::FaceCharacteristic >*
Faces::mutable_faces() {
  // @@protoc_insertion_point(field_mutable_list:DataTypes.Faces.Faces)
  return &faces_;
}
const ::google::protobuf::RepeatedPtrField< ::DataTypes::FaceCharacteristic >&
Faces::faces() const {
  // @@protoc_insertion_point(field_list:DataTypes.Faces.Faces)
  return faces_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FaceCharacteristic::kIdFieldNumber;
const int FaceCharacteristic::kBoxFieldNumber;
const int FaceCharacteristic::kConfidenceFieldNumber;
const int FaceCharacteristic::kPersonIdFieldNumber;
const int FaceCharacteristic::kPhotoIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FaceCharacteristic::FaceCharacteristic()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DataTypes.FaceCharacteristic)
}

void FaceCharacteristic::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  id_ = const_cast< ::DataTypes::Key*>(&::DataTypes::Key::default_instance());
  box_ = const_cast< ::DataTypes::Box*>(&::DataTypes::Box::default_instance());
}

FaceCharacteristic::FaceCharacteristic(const FaceCharacteristic& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DataTypes.FaceCharacteristic)
}

void FaceCharacteristic::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  id_ = NULL;
  box_ = NULL;
  confidence_ = 0;
  person_id_ = GOOGLE_LONGLONG(0);
  photo_id_ = GOOGLE_LONGLONG(0);
}

FaceCharacteristic::~FaceCharacteristic() {
  // @@protoc_insertion_point(destructor:DataTypes.FaceCharacteristic)
  SharedDtor();
}

void FaceCharacteristic::SharedDtor() {
  if (this != default_instance_) {
    delete id_;
    delete box_;
  }
}

void FaceCharacteristic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FaceCharacteristic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FaceCharacteristic_descriptor_;
}

const FaceCharacteristic& FaceCharacteristic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datatypes_2fbiometrics_2eproto();
  return *default_instance_;
}

FaceCharacteristic* FaceCharacteristic::default_instance_ = NULL;

FaceCharacteristic* FaceCharacteristic::New(::google::protobuf::Arena* arena) const {
  FaceCharacteristic* n = new FaceCharacteristic;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FaceCharacteristic::Clear() {
// @@protoc_insertion_point(message_clear_start:DataTypes.FaceCharacteristic)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(FaceCharacteristic, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<FaceCharacteristic*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(person_id_, confidence_);
  if (GetArenaNoVirtual() == NULL && id_ != NULL) delete id_;
  id_ = NULL;
  if (GetArenaNoVirtual() == NULL && box_ != NULL) delete box_;
  box_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool FaceCharacteristic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DataTypes.FaceCharacteristic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DataTypes.Key id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_box;
        break;
      }

      // optional .DataTypes.Box box = 2;
      case 2: {
        if (tag == 18) {
         parse_box:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_box()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_confidence;
        break;
      }

      // optional float confidence = 3;
      case 3: {
        if (tag == 29) {
         parse_confidence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_person_id;
        break;
      }

      // optional int64 person_id = 4;
      case 4: {
        if (tag == 32) {
         parse_person_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &person_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_photo_id;
        break;
      }

      // optional int64 photo_id = 5;
      case 5: {
        if (tag == 40) {
         parse_photo_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &photo_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DataTypes.FaceCharacteristic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DataTypes.FaceCharacteristic)
  return false;
#undef DO_
}

void FaceCharacteristic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DataTypes.FaceCharacteristic)
  // optional .DataTypes.Key id = 1;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  // optional .DataTypes.Box box = 2;
  if (this->has_box()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->box_, output);
  }

  // optional float confidence = 3;
  if (this->confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->confidence(), output);
  }

  // optional int64 person_id = 4;
  if (this->person_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->person_id(), output);
  }

  // optional int64 photo_id = 5;
  if (this->photo_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->photo_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:DataTypes.FaceCharacteristic)
}

::google::protobuf::uint8* FaceCharacteristic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DataTypes.FaceCharacteristic)
  // optional .DataTypes.Key id = 1;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->id_, target);
  }

  // optional .DataTypes.Box box = 2;
  if (this->has_box()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->box_, target);
  }

  // optional float confidence = 3;
  if (this->confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->confidence(), target);
  }

  // optional int64 person_id = 4;
  if (this->person_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->person_id(), target);
  }

  // optional int64 photo_id = 5;
  if (this->photo_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->photo_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:DataTypes.FaceCharacteristic)
  return target;
}

int FaceCharacteristic::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:DataTypes.FaceCharacteristic)
  int total_size = 0;

  // optional .DataTypes.Key id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->id_);
  }

  // optional .DataTypes.Box box = 2;
  if (this->has_box()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->box_);
  }

  // optional float confidence = 3;
  if (this->confidence() != 0) {
    total_size += 1 + 4;
  }

  // optional int64 person_id = 4;
  if (this->person_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->person_id());
  }

  // optional int64 photo_id = 5;
  if (this->photo_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->photo_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FaceCharacteristic::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DataTypes.FaceCharacteristic)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FaceCharacteristic* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FaceCharacteristic>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DataTypes.FaceCharacteristic)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DataTypes.FaceCharacteristic)
    MergeFrom(*source);
  }
}

void FaceCharacteristic::MergeFrom(const FaceCharacteristic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DataTypes.FaceCharacteristic)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_id()) {
    mutable_id()->::DataTypes::Key::MergeFrom(from.id());
  }
  if (from.has_box()) {
    mutable_box()->::DataTypes::Box::MergeFrom(from.box());
  }
  if (from.confidence() != 0) {
    set_confidence(from.confidence());
  }
  if (from.person_id() != 0) {
    set_person_id(from.person_id());
  }
  if (from.photo_id() != 0) {
    set_photo_id(from.photo_id());
  }
}

void FaceCharacteristic::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DataTypes.FaceCharacteristic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaceCharacteristic::CopyFrom(const FaceCharacteristic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DataTypes.FaceCharacteristic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceCharacteristic::IsInitialized() const {

  return true;
}

void FaceCharacteristic::Swap(FaceCharacteristic* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FaceCharacteristic::InternalSwap(FaceCharacteristic* other) {
  std::swap(id_, other->id_);
  std::swap(box_, other->box_);
  std::swap(confidence_, other->confidence_);
  std::swap(person_id_, other->person_id_);
  std::swap(photo_id_, other->photo_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FaceCharacteristic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FaceCharacteristic_descriptor_;
  metadata.reflection = FaceCharacteristic_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FaceCharacteristic

// optional .DataTypes.Key id = 1;
bool FaceCharacteristic::has_id() const {
  return !_is_default_instance_ && id_ != NULL;
}
void FaceCharacteristic::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) delete id_;
  id_ = NULL;
}
const ::DataTypes::Key& FaceCharacteristic::id() const {
  // @@protoc_insertion_point(field_get:DataTypes.FaceCharacteristic.id)
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
::DataTypes::Key* FaceCharacteristic::mutable_id() {
  
  if (id_ == NULL) {
    id_ = new ::DataTypes::Key;
  }
  // @@protoc_insertion_point(field_mutable:DataTypes.FaceCharacteristic.id)
  return id_;
}
::DataTypes::Key* FaceCharacteristic::release_id() {
  // @@protoc_insertion_point(field_release:DataTypes.FaceCharacteristic.id)
  
  ::DataTypes::Key* temp = id_;
  id_ = NULL;
  return temp;
}
void FaceCharacteristic::set_allocated_id(::DataTypes::Key* id) {
  delete id_;
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:DataTypes.FaceCharacteristic.id)
}

// optional .DataTypes.Box box = 2;
bool FaceCharacteristic::has_box() const {
  return !_is_default_instance_ && box_ != NULL;
}
void FaceCharacteristic::clear_box() {
  if (GetArenaNoVirtual() == NULL && box_ != NULL) delete box_;
  box_ = NULL;
}
const ::DataTypes::Box& FaceCharacteristic::box() const {
  // @@protoc_insertion_point(field_get:DataTypes.FaceCharacteristic.box)
  return box_ != NULL ? *box_ : *default_instance_->box_;
}
::DataTypes::Box* FaceCharacteristic::mutable_box() {
  
  if (box_ == NULL) {
    box_ = new ::DataTypes::Box;
  }
  // @@protoc_insertion_point(field_mutable:DataTypes.FaceCharacteristic.box)
  return box_;
}
::DataTypes::Box* FaceCharacteristic::release_box() {
  // @@protoc_insertion_point(field_release:DataTypes.FaceCharacteristic.box)
  
  ::DataTypes::Box* temp = box_;
  box_ = NULL;
  return temp;
}
void FaceCharacteristic::set_allocated_box(::DataTypes::Box* box) {
  delete box_;
  box_ = box;
  if (box) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:DataTypes.FaceCharacteristic.box)
}

// optional float confidence = 3;
void FaceCharacteristic::clear_confidence() {
  confidence_ = 0;
}
 float FaceCharacteristic::confidence() const {
  // @@protoc_insertion_point(field_get:DataTypes.FaceCharacteristic.confidence)
  return confidence_;
}
 void FaceCharacteristic::set_confidence(float value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:DataTypes.FaceCharacteristic.confidence)
}

// optional int64 person_id = 4;
void FaceCharacteristic::clear_person_id() {
  person_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 FaceCharacteristic::person_id() const {
  // @@protoc_insertion_point(field_get:DataTypes.FaceCharacteristic.person_id)
  return person_id_;
}
 void FaceCharacteristic::set_person_id(::google::protobuf::int64 value) {
  
  person_id_ = value;
  // @@protoc_insertion_point(field_set:DataTypes.FaceCharacteristic.person_id)
}

// optional int64 photo_id = 5;
void FaceCharacteristic::clear_photo_id() {
  photo_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 FaceCharacteristic::photo_id() const {
  // @@protoc_insertion_point(field_get:DataTypes.FaceCharacteristic.photo_id)
  return photo_id_;
}
 void FaceCharacteristic::set_photo_id(::google::protobuf::int64 value) {
  
  photo_id_ = value;
  // @@protoc_insertion_point(field_set:DataTypes.FaceCharacteristic.photo_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Match::kFaceIdFieldNumber;
const int Match::kMatchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Match::Match()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DataTypes.Match)
}

void Match::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  face_id_ = const_cast< ::DataTypes::Key*>(&::DataTypes::Key::default_instance());
}

Match::Match(const Match& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DataTypes.Match)
}

void Match::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  face_id_ = NULL;
  match_ = 0;
}

Match::~Match() {
  // @@protoc_insertion_point(destructor:DataTypes.Match)
  SharedDtor();
}

void Match::SharedDtor() {
  if (this != default_instance_) {
    delete face_id_;
  }
}

void Match::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Match::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Match_descriptor_;
}

const Match& Match::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datatypes_2fbiometrics_2eproto();
  return *default_instance_;
}

Match* Match::default_instance_ = NULL;

Match* Match::New(::google::protobuf::Arena* arena) const {
  Match* n = new Match;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Match::Clear() {
// @@protoc_insertion_point(message_clear_start:DataTypes.Match)
  if (GetArenaNoVirtual() == NULL && face_id_ != NULL) delete face_id_;
  face_id_ = NULL;
  match_ = 0;
}

bool Match::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DataTypes.Match)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DataTypes.Key face_id = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_face_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_match;
        break;
      }

      // optional float match = 3;
      case 3: {
        if (tag == 29) {
         parse_match:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &match_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DataTypes.Match)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DataTypes.Match)
  return false;
#undef DO_
}

void Match::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DataTypes.Match)
  // optional .DataTypes.Key face_id = 2;
  if (this->has_face_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->face_id_, output);
  }

  // optional float match = 3;
  if (this->match() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->match(), output);
  }

  // @@protoc_insertion_point(serialize_end:DataTypes.Match)
}

::google::protobuf::uint8* Match::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DataTypes.Match)
  // optional .DataTypes.Key face_id = 2;
  if (this->has_face_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->face_id_, target);
  }

  // optional float match = 3;
  if (this->match() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->match(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:DataTypes.Match)
  return target;
}

int Match::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:DataTypes.Match)
  int total_size = 0;

  // optional .DataTypes.Key face_id = 2;
  if (this->has_face_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->face_id_);
  }

  // optional float match = 3;
  if (this->match() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Match::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DataTypes.Match)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Match* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Match>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DataTypes.Match)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DataTypes.Match)
    MergeFrom(*source);
  }
}

void Match::MergeFrom(const Match& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DataTypes.Match)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_face_id()) {
    mutable_face_id()->::DataTypes::Key::MergeFrom(from.face_id());
  }
  if (from.match() != 0) {
    set_match(from.match());
  }
}

void Match::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DataTypes.Match)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Match::CopyFrom(const Match& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DataTypes.Match)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Match::IsInitialized() const {

  return true;
}

void Match::Swap(Match* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Match::InternalSwap(Match* other) {
  std::swap(face_id_, other->face_id_);
  std::swap(match_, other->match_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Match::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Match_descriptor_;
  metadata.reflection = Match_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Match

// optional .DataTypes.Key face_id = 2;
bool Match::has_face_id() const {
  return !_is_default_instance_ && face_id_ != NULL;
}
void Match::clear_face_id() {
  if (GetArenaNoVirtual() == NULL && face_id_ != NULL) delete face_id_;
  face_id_ = NULL;
}
const ::DataTypes::Key& Match::face_id() const {
  // @@protoc_insertion_point(field_get:DataTypes.Match.face_id)
  return face_id_ != NULL ? *face_id_ : *default_instance_->face_id_;
}
::DataTypes::Key* Match::mutable_face_id() {
  
  if (face_id_ == NULL) {
    face_id_ = new ::DataTypes::Key;
  }
  // @@protoc_insertion_point(field_mutable:DataTypes.Match.face_id)
  return face_id_;
}
::DataTypes::Key* Match::release_face_id() {
  // @@protoc_insertion_point(field_release:DataTypes.Match.face_id)
  
  ::DataTypes::Key* temp = face_id_;
  face_id_ = NULL;
  return temp;
}
void Match::set_allocated_face_id(::DataTypes::Key* face_id) {
  delete face_id_;
  face_id_ = face_id;
  if (face_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:DataTypes.Match.face_id)
}

// optional float match = 3;
void Match::clear_match() {
  match_ = 0;
}
 float Match::match() const {
  // @@protoc_insertion_point(field_get:DataTypes.Match.match)
  return match_;
}
 void Match::set_match(float value) {
  
  match_ = value;
  // @@protoc_insertion_point(field_set:DataTypes.Match.match)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Matches::kFaceIdFieldNumber;
const int Matches::kMatchesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Matches::Matches()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DataTypes.Matches)
}

void Matches::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  face_id_ = const_cast< ::DataTypes::Key*>(&::DataTypes::Key::default_instance());
}

Matches::Matches(const Matches& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DataTypes.Matches)
}

void Matches::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  face_id_ = NULL;
}

Matches::~Matches() {
  // @@protoc_insertion_point(destructor:DataTypes.Matches)
  SharedDtor();
}

void Matches::SharedDtor() {
  if (this != default_instance_) {
    delete face_id_;
  }
}

void Matches::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Matches::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Matches_descriptor_;
}

const Matches& Matches::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datatypes_2fbiometrics_2eproto();
  return *default_instance_;
}

Matches* Matches::default_instance_ = NULL;

Matches* Matches::New(::google::protobuf::Arena* arena) const {
  Matches* n = new Matches;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Matches::Clear() {
// @@protoc_insertion_point(message_clear_start:DataTypes.Matches)
  if (GetArenaNoVirtual() == NULL && face_id_ != NULL) delete face_id_;
  face_id_ = NULL;
  matches_.Clear();
}

bool Matches::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DataTypes.Matches)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DataTypes.Key face_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_face_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_matches;
        break;
      }

      // repeated .DataTypes.Match matches = 2;
      case 2: {
        if (tag == 18) {
         parse_matches:
          DO_(input->IncrementRecursionDepth());
         parse_loop_matches:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_matches()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_matches;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DataTypes.Matches)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DataTypes.Matches)
  return false;
#undef DO_
}

void Matches::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DataTypes.Matches)
  // optional .DataTypes.Key face_id = 1;
  if (this->has_face_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->face_id_, output);
  }

  // repeated .DataTypes.Match matches = 2;
  for (unsigned int i = 0, n = this->matches_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->matches(i), output);
  }

  // @@protoc_insertion_point(serialize_end:DataTypes.Matches)
}

::google::protobuf::uint8* Matches::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DataTypes.Matches)
  // optional .DataTypes.Key face_id = 1;
  if (this->has_face_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->face_id_, target);
  }

  // repeated .DataTypes.Match matches = 2;
  for (unsigned int i = 0, n = this->matches_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->matches(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:DataTypes.Matches)
  return target;
}

int Matches::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:DataTypes.Matches)
  int total_size = 0;

  // optional .DataTypes.Key face_id = 1;
  if (this->has_face_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->face_id_);
  }

  // repeated .DataTypes.Match matches = 2;
  total_size += 1 * this->matches_size();
  for (int i = 0; i < this->matches_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->matches(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Matches::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DataTypes.Matches)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Matches* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Matches>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DataTypes.Matches)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DataTypes.Matches)
    MergeFrom(*source);
  }
}

void Matches::MergeFrom(const Matches& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DataTypes.Matches)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  matches_.MergeFrom(from.matches_);
  if (from.has_face_id()) {
    mutable_face_id()->::DataTypes::Key::MergeFrom(from.face_id());
  }
}

void Matches::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DataTypes.Matches)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Matches::CopyFrom(const Matches& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DataTypes.Matches)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Matches::IsInitialized() const {

  return true;
}

void Matches::Swap(Matches* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Matches::InternalSwap(Matches* other) {
  std::swap(face_id_, other->face_id_);
  matches_.UnsafeArenaSwap(&other->matches_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Matches::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Matches_descriptor_;
  metadata.reflection = Matches_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Matches

// optional .DataTypes.Key face_id = 1;
bool Matches::has_face_id() const {
  return !_is_default_instance_ && face_id_ != NULL;
}
void Matches::clear_face_id() {
  if (GetArenaNoVirtual() == NULL && face_id_ != NULL) delete face_id_;
  face_id_ = NULL;
}
const ::DataTypes::Key& Matches::face_id() const {
  // @@protoc_insertion_point(field_get:DataTypes.Matches.face_id)
  return face_id_ != NULL ? *face_id_ : *default_instance_->face_id_;
}
::DataTypes::Key* Matches::mutable_face_id() {
  
  if (face_id_ == NULL) {
    face_id_ = new ::DataTypes::Key;
  }
  // @@protoc_insertion_point(field_mutable:DataTypes.Matches.face_id)
  return face_id_;
}
::DataTypes::Key* Matches::release_face_id() {
  // @@protoc_insertion_point(field_release:DataTypes.Matches.face_id)
  
  ::DataTypes::Key* temp = face_id_;
  face_id_ = NULL;
  return temp;
}
void Matches::set_allocated_face_id(::DataTypes::Key* face_id) {
  delete face_id_;
  face_id_ = face_id;
  if (face_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:DataTypes.Matches.face_id)
}

// repeated .DataTypes.Match matches = 2;
int Matches::matches_size() const {
  return matches_.size();
}
void Matches::clear_matches() {
  matches_.Clear();
}
const ::DataTypes::Match& Matches::matches(int index) const {
  // @@protoc_insertion_point(field_get:DataTypes.Matches.matches)
  return matches_.Get(index);
}
::DataTypes::Match* Matches::mutable_matches(int index) {
  // @@protoc_insertion_point(field_mutable:DataTypes.Matches.matches)
  return matches_.Mutable(index);
}
::DataTypes::Match* Matches::add_matches() {
  // @@protoc_insertion_point(field_add:DataTypes.Matches.matches)
  return matches_.Add();
}
::google::protobuf::RepeatedPtrField< ::DataTypes::Match >*
Matches::mutable_matches() {
  // @@protoc_insertion_point(field_mutable_list:DataTypes.Matches.matches)
  return &matches_;
}
const ::google::protobuf::RepeatedPtrField< ::DataTypes::Match >&
Matches::matches() const {
  // @@protoc_insertion_point(field_list:DataTypes.Matches.matches)
  return matches_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace DataTypes

// @@protoc_insertion_point(global_scope)
