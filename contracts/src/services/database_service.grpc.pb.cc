// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: services/database_service.proto

#include "services/database_service.pb.h"
#include "services/database_service.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace Services {

static const char* DatabaseService_method_names[] = {
  "/Services.DatabaseService/Get",
  "/Services.DatabaseService/Commit",
};

std::unique_ptr< DatabaseService::Stub> DatabaseService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< DatabaseService::Stub> stub(new DatabaseService::Stub(channel));
  return stub;
}

DatabaseService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Get_(DatabaseService_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Commit_(DatabaseService_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DatabaseService::Stub::Get(::grpc::ClientContext* context, const ::DataTypes::MessageBytes& request, ::DataTypes::MessageBytes* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Get_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::DataTypes::MessageBytes>* DatabaseService::Stub::AsyncGetRaw(::grpc::ClientContext* context, const ::DataTypes::MessageBytes& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::DataTypes::MessageBytes>(channel_.get(), cq, rpcmethod_Get_, context, request);
}

::grpc::Status DatabaseService::Stub::Commit(::grpc::ClientContext* context, const ::DataTypes::MessageBytes& request, ::DataTypes::MessageBytes* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Commit_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::DataTypes::MessageBytes>* DatabaseService::Stub::AsyncCommitRaw(::grpc::ClientContext* context, const ::DataTypes::MessageBytes& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::DataTypes::MessageBytes>(channel_.get(), cq, rpcmethod_Commit_, context, request);
}

DatabaseService::Service::Service() {
  (void)DatabaseService_method_names;
  AddMethod(new ::grpc::RpcServiceMethod(
      DatabaseService_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< DatabaseService::Service, ::DataTypes::MessageBytes, ::DataTypes::MessageBytes>(
          std::mem_fn(&DatabaseService::Service::Get), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      DatabaseService_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< DatabaseService::Service, ::DataTypes::MessageBytes, ::DataTypes::MessageBytes>(
          std::mem_fn(&DatabaseService::Service::Commit), this)));
}

DatabaseService::Service::~Service() {
}

::grpc::Status DatabaseService::Service::Get(::grpc::ServerContext* context, const ::DataTypes::MessageBytes* request, ::DataTypes::MessageBytes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DatabaseService::Service::Commit(::grpc::ServerContext* context, const ::DataTypes::MessageBytes* request, ::DataTypes::MessageBytes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace Services

