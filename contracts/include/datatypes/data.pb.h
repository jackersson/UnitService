// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datatypes/data.proto

#ifndef PROTOBUF_datatypes_2fdata_2eproto__INCLUDED
#define PROTOBUF_datatypes_2fdata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "datatypes/entity.pb.h"
// @@protoc_insertion_point(includes)

namespace DataTypes {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_datatypes_2fdata_2eproto();
void protobuf_AssignDesc_datatypes_2fdata_2eproto();
void protobuf_ShutdownFile_datatypes_2fdata_2eproto();

class MessageBytes;
class Mutation;
class MutationResult;

enum DataType {
  NoneType = 0,
  GetRequestType = 1,
  GetResponseType = 2,
  CommitRequestType = 3,
  CommitResponseType = 4,
  DataType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DataType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DataType_IsValid(int value);
const DataType DataType_MIN = NoneType;
const DataType DataType_MAX = CommitResponseType;
const int DataType_ARRAYSIZE = DataType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DataType_descriptor();
inline const ::std::string& DataType_Name(DataType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DataType_descriptor(), value);
}
inline bool DataType_Parse(
    const ::std::string& name, DataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DataType>(
    DataType_descriptor(), name, value);
}
// ===================================================================

class MessageBytes : public ::google::protobuf::Message {
 public:
  MessageBytes();
  virtual ~MessageBytes();

  MessageBytes(const MessageBytes& from);

  inline MessageBytes& operator=(const MessageBytes& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageBytes& default_instance();

  void Swap(MessageBytes* other);

  // implements Message ----------------------------------------------

  inline MessageBytes* New() const { return New(NULL); }

  MessageBytes* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessageBytes& from);
  void MergeFrom(const MessageBytes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MessageBytes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes data = 1;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // optional .DataTypes.DataType type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::DataTypes::DataType type() const;
  void set_type(::DataTypes::DataType value);

  // @@protoc_insertion_point(class_scope:DataTypes.MessageBytes)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  int type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_datatypes_2fdata_2eproto();
  friend void protobuf_AssignDesc_datatypes_2fdata_2eproto();
  friend void protobuf_ShutdownFile_datatypes_2fdata_2eproto();

  void InitAsDefaultInstance();
  static MessageBytes* default_instance_;
};
// -------------------------------------------------------------------

class MutationResult : public ::google::protobuf::Message {
 public:
  MutationResult();
  virtual ~MutationResult();

  MutationResult(const MutationResult& from);

  inline MutationResult& operator=(const MutationResult& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MutationResult& default_instance();

  void Swap(MutationResult* other);

  // implements Message ----------------------------------------------

  inline MutationResult* New() const { return New(NULL); }

  MutationResult* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MutationResult& from);
  void MergeFrom(const MutationResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MutationResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .DataTypes.Entity entity = 1;
  bool has_entity() const;
  void clear_entity();
  static const int kEntityFieldNumber = 1;
  const ::DataTypes::Entity& entity() const;
  ::DataTypes::Entity* mutable_entity();
  ::DataTypes::Entity* release_entity();
  void set_allocated_entity(::DataTypes::Entity* entity);

  // optional string error = 2;
  void clear_error();
  static const int kErrorFieldNumber = 2;
  const ::std::string& error() const;
  void set_error(const ::std::string& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  ::std::string* mutable_error();
  ::std::string* release_error();
  void set_allocated_error(::std::string* error);

  // @@protoc_insertion_point(class_scope:DataTypes.MutationResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::DataTypes::Entity* entity_;
  ::google::protobuf::internal::ArenaStringPtr error_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_datatypes_2fdata_2eproto();
  friend void protobuf_AssignDesc_datatypes_2fdata_2eproto();
  friend void protobuf_ShutdownFile_datatypes_2fdata_2eproto();

  void InitAsDefaultInstance();
  static MutationResult* default_instance_;
};
// -------------------------------------------------------------------

class Mutation : public ::google::protobuf::Message {
 public:
  Mutation();
  virtual ~Mutation();

  Mutation(const Mutation& from);

  inline Mutation& operator=(const Mutation& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Mutation& default_instance();

  enum OperationCase {
    kInsert = 1,
    kUpdate = 2,
    kDelete = 3,
    OPERATION_NOT_SET = 0,
  };

  void Swap(Mutation* other);

  // implements Message ----------------------------------------------

  inline Mutation* New() const { return New(NULL); }

  Mutation* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Mutation& from);
  void MergeFrom(const Mutation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Mutation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .DataTypes.Entity insert = 1;
  bool has_insert() const;
  void clear_insert();
  static const int kInsertFieldNumber = 1;
  const ::DataTypes::Entity& insert() const;
  ::DataTypes::Entity* mutable_insert();
  ::DataTypes::Entity* release_insert();
  void set_allocated_insert(::DataTypes::Entity* insert);

  // optional .DataTypes.Entity update = 2;
  bool has_update() const;
  void clear_update();
  static const int kUpdateFieldNumber = 2;
  const ::DataTypes::Entity& update() const;
  ::DataTypes::Entity* mutable_update();
  ::DataTypes::Entity* release_update();
  void set_allocated_update(::DataTypes::Entity* update);

  // optional .DataTypes.Entity delete = 3;
  bool has_delete_() const;
  void clear_delete_();
  static const int kDeleteFieldNumber = 3;
  const ::DataTypes::Entity& delete_() const;
  ::DataTypes::Entity* mutable_delete_();
  ::DataTypes::Entity* release_delete_();
  void set_allocated_delete_(::DataTypes::Entity* delete_);

  OperationCase operation_case() const;
  // @@protoc_insertion_point(class_scope:DataTypes.Mutation)
 private:
  inline void set_has_insert();
  inline void set_has_update();
  inline void set_has_delete_();

  inline bool has_operation() const;
  void clear_operation();
  inline void clear_has_operation();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  union OperationUnion {
    OperationUnion() {}
    ::DataTypes::Entity* insert_;
    ::DataTypes::Entity* update_;
    ::DataTypes::Entity* delete__;
  } operation_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_datatypes_2fdata_2eproto();
  friend void protobuf_AssignDesc_datatypes_2fdata_2eproto();
  friend void protobuf_ShutdownFile_datatypes_2fdata_2eproto();

  void InitAsDefaultInstance();
  static Mutation* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// MessageBytes

// optional bytes data = 1;
inline void MessageBytes::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MessageBytes::data() const {
  // @@protoc_insertion_point(field_get:DataTypes.MessageBytes.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageBytes::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DataTypes.MessageBytes.data)
}
inline void MessageBytes::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DataTypes.MessageBytes.data)
}
inline void MessageBytes::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DataTypes.MessageBytes.data)
}
inline ::std::string* MessageBytes::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:DataTypes.MessageBytes.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageBytes::release_data() {
  // @@protoc_insertion_point(field_release:DataTypes.MessageBytes.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageBytes::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:DataTypes.MessageBytes.data)
}

// optional .DataTypes.DataType type = 2;
inline void MessageBytes::clear_type() {
  type_ = 0;
}
inline ::DataTypes::DataType MessageBytes::type() const {
  // @@protoc_insertion_point(field_get:DataTypes.MessageBytes.type)
  return static_cast< ::DataTypes::DataType >(type_);
}
inline void MessageBytes::set_type(::DataTypes::DataType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:DataTypes.MessageBytes.type)
}

// -------------------------------------------------------------------

// MutationResult

// optional .DataTypes.Entity entity = 1;
inline bool MutationResult::has_entity() const {
  return !_is_default_instance_ && entity_ != NULL;
}
inline void MutationResult::clear_entity() {
  if (GetArenaNoVirtual() == NULL && entity_ != NULL) delete entity_;
  entity_ = NULL;
}
inline const ::DataTypes::Entity& MutationResult::entity() const {
  // @@protoc_insertion_point(field_get:DataTypes.MutationResult.entity)
  return entity_ != NULL ? *entity_ : *default_instance_->entity_;
}
inline ::DataTypes::Entity* MutationResult::mutable_entity() {
  
  if (entity_ == NULL) {
    entity_ = new ::DataTypes::Entity;
  }
  // @@protoc_insertion_point(field_mutable:DataTypes.MutationResult.entity)
  return entity_;
}
inline ::DataTypes::Entity* MutationResult::release_entity() {
  // @@protoc_insertion_point(field_release:DataTypes.MutationResult.entity)
  
  ::DataTypes::Entity* temp = entity_;
  entity_ = NULL;
  return temp;
}
inline void MutationResult::set_allocated_entity(::DataTypes::Entity* entity) {
  delete entity_;
  entity_ = entity;
  if (entity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:DataTypes.MutationResult.entity)
}

// optional string error = 2;
inline void MutationResult::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MutationResult::error() const {
  // @@protoc_insertion_point(field_get:DataTypes.MutationResult.error)
  return error_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MutationResult::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DataTypes.MutationResult.error)
}
inline void MutationResult::set_error(const char* value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DataTypes.MutationResult.error)
}
inline void MutationResult::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DataTypes.MutationResult.error)
}
inline ::std::string* MutationResult::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:DataTypes.MutationResult.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MutationResult::release_error() {
  // @@protoc_insertion_point(field_release:DataTypes.MutationResult.error)
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MutationResult::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:DataTypes.MutationResult.error)
}

// -------------------------------------------------------------------

// Mutation

// optional .DataTypes.Entity insert = 1;
inline bool Mutation::has_insert() const {
  return operation_case() == kInsert;
}
inline void Mutation::set_has_insert() {
  _oneof_case_[0] = kInsert;
}
inline void Mutation::clear_insert() {
  if (has_insert()) {
    delete operation_.insert_;
    clear_has_operation();
  }
}
inline  const ::DataTypes::Entity& Mutation::insert() const {
  // @@protoc_insertion_point(field_get:DataTypes.Mutation.insert)
  return has_insert()
      ? *operation_.insert_
      : ::DataTypes::Entity::default_instance();
}
inline ::DataTypes::Entity* Mutation::mutable_insert() {
  if (!has_insert()) {
    clear_operation();
    set_has_insert();
    operation_.insert_ = new ::DataTypes::Entity;
  }
  // @@protoc_insertion_point(field_mutable:DataTypes.Mutation.insert)
  return operation_.insert_;
}
inline ::DataTypes::Entity* Mutation::release_insert() {
  // @@protoc_insertion_point(field_release:DataTypes.Mutation.insert)
  if (has_insert()) {
    clear_has_operation();
    ::DataTypes::Entity* temp = operation_.insert_;
    operation_.insert_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Mutation::set_allocated_insert(::DataTypes::Entity* insert) {
  clear_operation();
  if (insert) {
    set_has_insert();
    operation_.insert_ = insert;
  }
  // @@protoc_insertion_point(field_set_allocated:DataTypes.Mutation.insert)
}

// optional .DataTypes.Entity update = 2;
inline bool Mutation::has_update() const {
  return operation_case() == kUpdate;
}
inline void Mutation::set_has_update() {
  _oneof_case_[0] = kUpdate;
}
inline void Mutation::clear_update() {
  if (has_update()) {
    delete operation_.update_;
    clear_has_operation();
  }
}
inline  const ::DataTypes::Entity& Mutation::update() const {
  // @@protoc_insertion_point(field_get:DataTypes.Mutation.update)
  return has_update()
      ? *operation_.update_
      : ::DataTypes::Entity::default_instance();
}
inline ::DataTypes::Entity* Mutation::mutable_update() {
  if (!has_update()) {
    clear_operation();
    set_has_update();
    operation_.update_ = new ::DataTypes::Entity;
  }
  // @@protoc_insertion_point(field_mutable:DataTypes.Mutation.update)
  return operation_.update_;
}
inline ::DataTypes::Entity* Mutation::release_update() {
  // @@protoc_insertion_point(field_release:DataTypes.Mutation.update)
  if (has_update()) {
    clear_has_operation();
    ::DataTypes::Entity* temp = operation_.update_;
    operation_.update_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Mutation::set_allocated_update(::DataTypes::Entity* update) {
  clear_operation();
  if (update) {
    set_has_update();
    operation_.update_ = update;
  }
  // @@protoc_insertion_point(field_set_allocated:DataTypes.Mutation.update)
}

// optional .DataTypes.Entity delete = 3;
inline bool Mutation::has_delete_() const {
  return operation_case() == kDelete;
}
inline void Mutation::set_has_delete_() {
  _oneof_case_[0] = kDelete;
}
inline void Mutation::clear_delete_() {
  if (has_delete_()) {
    delete operation_.delete__;
    clear_has_operation();
  }
}
inline  const ::DataTypes::Entity& Mutation::delete_() const {
  // @@protoc_insertion_point(field_get:DataTypes.Mutation.delete)
  return has_delete_()
      ? *operation_.delete__
      : ::DataTypes::Entity::default_instance();
}
inline ::DataTypes::Entity* Mutation::mutable_delete_() {
  if (!has_delete_()) {
    clear_operation();
    set_has_delete_();
    operation_.delete__ = new ::DataTypes::Entity;
  }
  // @@protoc_insertion_point(field_mutable:DataTypes.Mutation.delete)
  return operation_.delete__;
}
inline ::DataTypes::Entity* Mutation::release_delete_() {
  // @@protoc_insertion_point(field_release:DataTypes.Mutation.delete)
  if (has_delete_()) {
    clear_has_operation();
    ::DataTypes::Entity* temp = operation_.delete__;
    operation_.delete__ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Mutation::set_allocated_delete_(::DataTypes::Entity* delete_) {
  clear_operation();
  if (delete_) {
    set_has_delete_();
    operation_.delete__ = delete_;
  }
  // @@protoc_insertion_point(field_set_allocated:DataTypes.Mutation.delete)
}

inline bool Mutation::has_operation() const {
  return operation_case() != OPERATION_NOT_SET;
}
inline void Mutation::clear_has_operation() {
  _oneof_case_[0] = OPERATION_NOT_SET;
}
inline Mutation::OperationCase Mutation::operation_case() const {
  return Mutation::OperationCase(_oneof_case_[0]);
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace DataTypes

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::DataTypes::DataType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DataTypes::DataType>() {
  return ::DataTypes::DataType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_datatypes_2fdata_2eproto__INCLUDED
