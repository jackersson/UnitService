// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datatypes/location.proto

#ifndef PROTOBUF_datatypes_2flocation_2eproto__INCLUDED
#define PROTOBUF_datatypes_2flocation_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "datatypes/devices.pb.h"
#include "datatypes/key.pb.h"
// @@protoc_insertion_point(includes)

namespace DataTypes {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_datatypes_2flocation_2eproto();
void protobuf_AssignDesc_datatypes_2flocation_2eproto();
void protobuf_ShutdownFile_datatypes_2flocation_2eproto();

class Location;

// ===================================================================

class Location : public ::google::protobuf::Message {
 public:
  Location();
  virtual ~Location();

  Location(const Location& from);

  inline Location& operator=(const Location& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Location& default_instance();

  void Swap(Location* other);

  // implements Message ----------------------------------------------

  inline Location* New() const { return New(NULL); }

  Location* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Location& from);
  void MergeFrom(const Location& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Location* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .DataTypes.Key id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::DataTypes::Key& id() const;
  ::DataTypes::Key* mutable_id();
  ::DataTypes::Key* release_id();
  void set_allocated_id(::DataTypes::Key* id);

  // optional string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string description = 3;
  void clear_description();
  static const int kDescriptionFieldNumber = 3;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // optional string unit_mac_address = 4;
  void clear_unit_mac_address();
  static const int kUnitMacAddressFieldNumber = 4;
  const ::std::string& unit_mac_address() const;
  void set_unit_mac_address(const ::std::string& value);
  void set_unit_mac_address(const char* value);
  void set_unit_mac_address(const char* value, size_t size);
  ::std::string* mutable_unit_mac_address();
  ::std::string* release_unit_mac_address();
  void set_allocated_unit_mac_address(::std::string* unit_mac_address);

  // optional .DataTypes.AccessDevice access_device = 5;
  bool has_access_device() const;
  void clear_access_device();
  static const int kAccessDeviceFieldNumber = 5;
  const ::DataTypes::AccessDevice& access_device() const;
  ::DataTypes::AccessDevice* mutable_access_device();
  ::DataTypes::AccessDevice* release_access_device();
  void set_allocated_access_device(::DataTypes::AccessDevice* access_device);

  // @@protoc_insertion_point(class_scope:DataTypes.Location)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::DataTypes::Key* id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr unit_mac_address_;
  ::DataTypes::AccessDevice* access_device_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_datatypes_2flocation_2eproto();
  friend void protobuf_AssignDesc_datatypes_2flocation_2eproto();
  friend void protobuf_ShutdownFile_datatypes_2flocation_2eproto();

  void InitAsDefaultInstance();
  static Location* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Location

// optional .DataTypes.Key id = 1;
inline bool Location::has_id() const {
  return !_is_default_instance_ && id_ != NULL;
}
inline void Location::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) delete id_;
  id_ = NULL;
}
inline const ::DataTypes::Key& Location::id() const {
  // @@protoc_insertion_point(field_get:DataTypes.Location.id)
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
inline ::DataTypes::Key* Location::mutable_id() {
  
  if (id_ == NULL) {
    id_ = new ::DataTypes::Key;
  }
  // @@protoc_insertion_point(field_mutable:DataTypes.Location.id)
  return id_;
}
inline ::DataTypes::Key* Location::release_id() {
  // @@protoc_insertion_point(field_release:DataTypes.Location.id)
  
  ::DataTypes::Key* temp = id_;
  id_ = NULL;
  return temp;
}
inline void Location::set_allocated_id(::DataTypes::Key* id) {
  delete id_;
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:DataTypes.Location.id)
}

// optional string name = 2;
inline void Location::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Location::name() const {
  // @@protoc_insertion_point(field_get:DataTypes.Location.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Location::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DataTypes.Location.name)
}
inline void Location::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DataTypes.Location.name)
}
inline void Location::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DataTypes.Location.name)
}
inline ::std::string* Location::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:DataTypes.Location.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Location::release_name() {
  // @@protoc_insertion_point(field_release:DataTypes.Location.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Location::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:DataTypes.Location.name)
}

// optional string description = 3;
inline void Location::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Location::description() const {
  // @@protoc_insertion_point(field_get:DataTypes.Location.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Location::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DataTypes.Location.description)
}
inline void Location::set_description(const char* value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DataTypes.Location.description)
}
inline void Location::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DataTypes.Location.description)
}
inline ::std::string* Location::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:DataTypes.Location.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Location::release_description() {
  // @@protoc_insertion_point(field_release:DataTypes.Location.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Location::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:DataTypes.Location.description)
}

// optional string unit_mac_address = 4;
inline void Location::clear_unit_mac_address() {
  unit_mac_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Location::unit_mac_address() const {
  // @@protoc_insertion_point(field_get:DataTypes.Location.unit_mac_address)
  return unit_mac_address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Location::set_unit_mac_address(const ::std::string& value) {
  
  unit_mac_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DataTypes.Location.unit_mac_address)
}
inline void Location::set_unit_mac_address(const char* value) {
  
  unit_mac_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DataTypes.Location.unit_mac_address)
}
inline void Location::set_unit_mac_address(const char* value, size_t size) {
  
  unit_mac_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DataTypes.Location.unit_mac_address)
}
inline ::std::string* Location::mutable_unit_mac_address() {
  
  // @@protoc_insertion_point(field_mutable:DataTypes.Location.unit_mac_address)
  return unit_mac_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Location::release_unit_mac_address() {
  // @@protoc_insertion_point(field_release:DataTypes.Location.unit_mac_address)
  
  return unit_mac_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Location::set_allocated_unit_mac_address(::std::string* unit_mac_address) {
  if (unit_mac_address != NULL) {
    
  } else {
    
  }
  unit_mac_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unit_mac_address);
  // @@protoc_insertion_point(field_set_allocated:DataTypes.Location.unit_mac_address)
}

// optional .DataTypes.AccessDevice access_device = 5;
inline bool Location::has_access_device() const {
  return !_is_default_instance_ && access_device_ != NULL;
}
inline void Location::clear_access_device() {
  if (GetArenaNoVirtual() == NULL && access_device_ != NULL) delete access_device_;
  access_device_ = NULL;
}
inline const ::DataTypes::AccessDevice& Location::access_device() const {
  // @@protoc_insertion_point(field_get:DataTypes.Location.access_device)
  return access_device_ != NULL ? *access_device_ : *default_instance_->access_device_;
}
inline ::DataTypes::AccessDevice* Location::mutable_access_device() {
  
  if (access_device_ == NULL) {
    access_device_ = new ::DataTypes::AccessDevice;
  }
  // @@protoc_insertion_point(field_mutable:DataTypes.Location.access_device)
  return access_device_;
}
inline ::DataTypes::AccessDevice* Location::release_access_device() {
  // @@protoc_insertion_point(field_release:DataTypes.Location.access_device)
  
  ::DataTypes::AccessDevice* temp = access_device_;
  access_device_ = NULL;
  return temp;
}
inline void Location::set_allocated_access_device(::DataTypes::AccessDevice* access_device) {
  delete access_device_;
  access_device_ = access_device;
  if (access_device) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:DataTypes.Location.access_device)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace DataTypes

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_datatypes_2flocation_2eproto__INCLUDED
