// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: services/coordinator_service.proto

#include "services/coordinator_service.pb.h"
#include "services/coordinator_service.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace Services {

static const char* CoordinatorService_method_names[] = {
  "/Services.CoordinatorService/Connect",
  "/Services.CoordinatorService/Heartbeat",
  "/Services.CoordinatorService/GetUnits",
  "/Services.CoordinatorService/Subscribe",
  "/Services.CoordinatorService/Unsubscribe",
  "/Services.CoordinatorService/Get",
  "/Services.CoordinatorService/Commit",
  "/Services.CoordinatorService/UpdateDevices",
};

std::unique_ptr< CoordinatorService::Stub> CoordinatorService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< CoordinatorService::Stub> stub(new CoordinatorService::Stub(channel));
  return stub;
}

CoordinatorService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Connect_(CoordinatorService_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Heartbeat_(CoordinatorService_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetUnits_(CoordinatorService_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Subscribe_(CoordinatorService_method_names[3], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Unsubscribe_(CoordinatorService_method_names[4], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Get_(CoordinatorService_method_names[5], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Commit_(CoordinatorService_method_names[6], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateDevices_(CoordinatorService_method_names[7], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status CoordinatorService::Stub::Connect(::grpc::ClientContext* context, const ::DataTypes::ConnectMsg& request, ::google::protobuf::Empty* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Connect_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CoordinatorService::Stub::AsyncConnectRaw(::grpc::ClientContext* context, const ::DataTypes::ConnectMsg& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>(channel_.get(), cq, rpcmethod_Connect_, context, request);
}

::grpc::Status CoordinatorService::Stub::Heartbeat(::grpc::ClientContext* context, const ::DataTypes::HeartbeatMessage& request, ::google::protobuf::Empty* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Heartbeat_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CoordinatorService::Stub::AsyncHeartbeatRaw(::grpc::ClientContext* context, const ::DataTypes::HeartbeatMessage& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>(channel_.get(), cq, rpcmethod_Heartbeat_, context, request);
}

::grpc::Status CoordinatorService::Stub::GetUnits(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::DataTypes::Units* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetUnits_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::DataTypes::Units>* CoordinatorService::Stub::AsyncGetUnitsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::DataTypes::Units>(channel_.get(), cq, rpcmethod_GetUnits_, context, request);
}

::grpc::Status CoordinatorService::Stub::Subscribe(::grpc::ClientContext* context, const ::DataTypes::SubscriptionMsg& request, ::google::protobuf::Empty* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Subscribe_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CoordinatorService::Stub::AsyncSubscribeRaw(::grpc::ClientContext* context, const ::DataTypes::SubscriptionMsg& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>(channel_.get(), cq, rpcmethod_Subscribe_, context, request);
}

::grpc::Status CoordinatorService::Stub::Unsubscribe(::grpc::ClientContext* context, const ::DataTypes::SubscriptionMsg& request, ::google::protobuf::Empty* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Unsubscribe_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CoordinatorService::Stub::AsyncUnsubscribeRaw(::grpc::ClientContext* context, const ::DataTypes::SubscriptionMsg& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>(channel_.get(), cq, rpcmethod_Unsubscribe_, context, request);
}

::grpc::Status CoordinatorService::Stub::Get(::grpc::ClientContext* context, const ::DataTypes::MessageBytes& request, ::DataTypes::MessageBytes* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Get_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::DataTypes::MessageBytes>* CoordinatorService::Stub::AsyncGetRaw(::grpc::ClientContext* context, const ::DataTypes::MessageBytes& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::DataTypes::MessageBytes>(channel_.get(), cq, rpcmethod_Get_, context, request);
}

::grpc::Status CoordinatorService::Stub::Commit(::grpc::ClientContext* context, const ::DataTypes::MessageBytes& request, ::DataTypes::MessageBytes* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Commit_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::DataTypes::MessageBytes>* CoordinatorService::Stub::AsyncCommitRaw(::grpc::ClientContext* context, const ::DataTypes::MessageBytes& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::DataTypes::MessageBytes>(channel_.get(), cq, rpcmethod_Commit_, context, request);
}

::grpc::Status CoordinatorService::Stub::UpdateDevices(::grpc::ClientContext* context, const ::DataTypes::DeviceUpdate& request, ::google::protobuf::Empty* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateDevices_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CoordinatorService::Stub::AsyncUpdateDevicesRaw(::grpc::ClientContext* context, const ::DataTypes::DeviceUpdate& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>(channel_.get(), cq, rpcmethod_UpdateDevices_, context, request);
}

CoordinatorService::Service::Service() {
  (void)CoordinatorService_method_names;
  AddMethod(new ::grpc::RpcServiceMethod(
      CoordinatorService_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< CoordinatorService::Service, ::DataTypes::ConnectMsg, ::google::protobuf::Empty>(
          std::mem_fn(&CoordinatorService::Service::Connect), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      CoordinatorService_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< CoordinatorService::Service, ::DataTypes::HeartbeatMessage, ::google::protobuf::Empty>(
          std::mem_fn(&CoordinatorService::Service::Heartbeat), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      CoordinatorService_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< CoordinatorService::Service, ::google::protobuf::Empty, ::DataTypes::Units>(
          std::mem_fn(&CoordinatorService::Service::GetUnits), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      CoordinatorService_method_names[3],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< CoordinatorService::Service, ::DataTypes::SubscriptionMsg, ::google::protobuf::Empty>(
          std::mem_fn(&CoordinatorService::Service::Subscribe), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      CoordinatorService_method_names[4],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< CoordinatorService::Service, ::DataTypes::SubscriptionMsg, ::google::protobuf::Empty>(
          std::mem_fn(&CoordinatorService::Service::Unsubscribe), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      CoordinatorService_method_names[5],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< CoordinatorService::Service, ::DataTypes::MessageBytes, ::DataTypes::MessageBytes>(
          std::mem_fn(&CoordinatorService::Service::Get), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      CoordinatorService_method_names[6],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< CoordinatorService::Service, ::DataTypes::MessageBytes, ::DataTypes::MessageBytes>(
          std::mem_fn(&CoordinatorService::Service::Commit), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      CoordinatorService_method_names[7],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< CoordinatorService::Service, ::DataTypes::DeviceUpdate, ::google::protobuf::Empty>(
          std::mem_fn(&CoordinatorService::Service::UpdateDevices), this)));
}

CoordinatorService::Service::~Service() {
}

::grpc::Status CoordinatorService::Service::Connect(::grpc::ServerContext* context, const ::DataTypes::ConnectMsg* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CoordinatorService::Service::Heartbeat(::grpc::ServerContext* context, const ::DataTypes::HeartbeatMessage* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CoordinatorService::Service::GetUnits(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::DataTypes::Units* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CoordinatorService::Service::Subscribe(::grpc::ServerContext* context, const ::DataTypes::SubscriptionMsg* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CoordinatorService::Service::Unsubscribe(::grpc::ServerContext* context, const ::DataTypes::SubscriptionMsg* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CoordinatorService::Service::Get(::grpc::ServerContext* context, const ::DataTypes::MessageBytes* request, ::DataTypes::MessageBytes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CoordinatorService::Service::Commit(::grpc::ServerContext* context, const ::DataTypes::MessageBytes* request, ::DataTypes::MessageBytes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CoordinatorService::Service::UpdateDevices(::grpc::ServerContext* context, const ::DataTypes::DeviceUpdate* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace Services

