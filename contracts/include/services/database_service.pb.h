// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: services/database_service.proto

#ifndef PROTOBUF_services_2fdatabase_5fservice_2eproto__INCLUDED
#define PROTOBUF_services_2fdatabase_5fservice_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "datatypes/person.pb.h"
#include "datatypes/card.pb.h"
#include "datatypes/photo.pb.h"
#include "datatypes/location.pb.h"
#include "datatypes/visit_record.pb.h"
#include "datatypes/data.pb.h"
#include "datatypes/queries.pb.h"
// @@protoc_insertion_point(includes)

namespace Services {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_services_2fdatabase_5fservice_2eproto();
void protobuf_AssignDesc_services_2fdatabase_5fservice_2eproto();
void protobuf_ShutdownFile_services_2fdatabase_5fservice_2eproto();

class CommitRequest;
class CommitResponse;
class Entities;
class Entity;
class GetRequest;
class GetResponse;
class Mutation;
class MutationResult;

// ===================================================================

class GetResponse : public ::google::protobuf::Message {
 public:
  GetResponse();
  virtual ~GetResponse();

  GetResponse(const GetResponse& from);

  inline GetResponse& operator=(const GetResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetResponse& default_instance();

  void Swap(GetResponse* other);

  // implements Message ----------------------------------------------

  inline GetResponse* New() const { return New(NULL); }

  GetResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetResponse& from);
  void MergeFrom(const GetResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Services.Entities items = 1;
  bool has_items() const;
  void clear_items();
  static const int kItemsFieldNumber = 1;
  const ::Services::Entities& items() const;
  ::Services::Entities* mutable_items();
  ::Services::Entities* release_items();
  void set_allocated_items(::Services::Entities* items);

  // optional int64 count = 2;
  void clear_count();
  static const int kCountFieldNumber = 2;
  ::google::protobuf::int64 count() const;
  void set_count(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:Services.GetResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::Services::Entities* items_;
  ::google::protobuf::int64 count_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_services_2fdatabase_5fservice_2eproto();
  friend void protobuf_AssignDesc_services_2fdatabase_5fservice_2eproto();
  friend void protobuf_ShutdownFile_services_2fdatabase_5fservice_2eproto();

  void InitAsDefaultInstance();
  static GetResponse* default_instance_;
};
// -------------------------------------------------------------------

class GetRequest : public ::google::protobuf::Message {
 public:
  GetRequest();
  virtual ~GetRequest();

  GetRequest(const GetRequest& from);

  inline GetRequest& operator=(const GetRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetRequest& default_instance();

  enum RequestTypeCase {
    kPersonRequest = 1,
    kCardRequest = 2,
    kLocationRequest = 3,
    kVisitRecordRequest = 4,
    REQUEST_TYPE_NOT_SET = 0,
  };

  void Swap(GetRequest* other);

  // implements Message ----------------------------------------------

  inline GetRequest* New() const { return New(NULL); }

  GetRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetRequest& from);
  void MergeFrom(const GetRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .DataTypes.GetPersonRequest person_request = 1;
  bool has_person_request() const;
  void clear_person_request();
  static const int kPersonRequestFieldNumber = 1;
  const ::DataTypes::GetPersonRequest& person_request() const;
  ::DataTypes::GetPersonRequest* mutable_person_request();
  ::DataTypes::GetPersonRequest* release_person_request();
  void set_allocated_person_request(::DataTypes::GetPersonRequest* person_request);

  // optional .DataTypes.GetCardRequest card_request = 2;
  bool has_card_request() const;
  void clear_card_request();
  static const int kCardRequestFieldNumber = 2;
  const ::DataTypes::GetCardRequest& card_request() const;
  ::DataTypes::GetCardRequest* mutable_card_request();
  ::DataTypes::GetCardRequest* release_card_request();
  void set_allocated_card_request(::DataTypes::GetCardRequest* card_request);

  // optional .DataTypes.GetLocationRequest location_request = 3;
  bool has_location_request() const;
  void clear_location_request();
  static const int kLocationRequestFieldNumber = 3;
  const ::DataTypes::GetLocationRequest& location_request() const;
  ::DataTypes::GetLocationRequest* mutable_location_request();
  ::DataTypes::GetLocationRequest* release_location_request();
  void set_allocated_location_request(::DataTypes::GetLocationRequest* location_request);

  // optional .DataTypes.GetVisitRecordRequest visit_record_request = 4;
  bool has_visit_record_request() const;
  void clear_visit_record_request();
  static const int kVisitRecordRequestFieldNumber = 4;
  const ::DataTypes::GetVisitRecordRequest& visit_record_request() const;
  ::DataTypes::GetVisitRecordRequest* mutable_visit_record_request();
  ::DataTypes::GetVisitRecordRequest* release_visit_record_request();
  void set_allocated_visit_record_request(::DataTypes::GetVisitRecordRequest* visit_record_request);

  RequestTypeCase request_type_case() const;
  // @@protoc_insertion_point(class_scope:Services.GetRequest)
 private:
  inline void set_has_person_request();
  inline void set_has_card_request();
  inline void set_has_location_request();
  inline void set_has_visit_record_request();

  inline bool has_request_type() const;
  void clear_request_type();
  inline void clear_has_request_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  union RequestTypeUnion {
    RequestTypeUnion() {}
    ::DataTypes::GetPersonRequest* person_request_;
    ::DataTypes::GetCardRequest* card_request_;
    ::DataTypes::GetLocationRequest* location_request_;
    ::DataTypes::GetVisitRecordRequest* visit_record_request_;
  } request_type_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_services_2fdatabase_5fservice_2eproto();
  friend void protobuf_AssignDesc_services_2fdatabase_5fservice_2eproto();
  friend void protobuf_ShutdownFile_services_2fdatabase_5fservice_2eproto();

  void InitAsDefaultInstance();
  static GetRequest* default_instance_;
};
// -------------------------------------------------------------------

class CommitRequest : public ::google::protobuf::Message {
 public:
  CommitRequest();
  virtual ~CommitRequest();

  CommitRequest(const CommitRequest& from);

  inline CommitRequest& operator=(const CommitRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommitRequest& default_instance();

  void Swap(CommitRequest* other);

  // implements Message ----------------------------------------------

  inline CommitRequest* New() const { return New(NULL); }

  CommitRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommitRequest& from);
  void MergeFrom(const CommitRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CommitRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Services.Mutation mutations = 1;
  int mutations_size() const;
  void clear_mutations();
  static const int kMutationsFieldNumber = 1;
  const ::Services::Mutation& mutations(int index) const;
  ::Services::Mutation* mutable_mutations(int index);
  ::Services::Mutation* add_mutations();
  ::google::protobuf::RepeatedPtrField< ::Services::Mutation >*
      mutable_mutations();
  const ::google::protobuf::RepeatedPtrField< ::Services::Mutation >&
      mutations() const;

  // @@protoc_insertion_point(class_scope:Services.CommitRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::Services::Mutation > mutations_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_services_2fdatabase_5fservice_2eproto();
  friend void protobuf_AssignDesc_services_2fdatabase_5fservice_2eproto();
  friend void protobuf_ShutdownFile_services_2fdatabase_5fservice_2eproto();

  void InitAsDefaultInstance();
  static CommitRequest* default_instance_;
};
// -------------------------------------------------------------------

class CommitResponse : public ::google::protobuf::Message {
 public:
  CommitResponse();
  virtual ~CommitResponse();

  CommitResponse(const CommitResponse& from);

  inline CommitResponse& operator=(const CommitResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommitResponse& default_instance();

  void Swap(CommitResponse* other);

  // implements Message ----------------------------------------------

  inline CommitResponse* New() const { return New(NULL); }

  CommitResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommitResponse& from);
  void MergeFrom(const CommitResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CommitResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Services.MutationResult mutation_results = 1;
  int mutation_results_size() const;
  void clear_mutation_results();
  static const int kMutationResultsFieldNumber = 1;
  const ::Services::MutationResult& mutation_results(int index) const;
  ::Services::MutationResult* mutable_mutation_results(int index);
  ::Services::MutationResult* add_mutation_results();
  ::google::protobuf::RepeatedPtrField< ::Services::MutationResult >*
      mutable_mutation_results();
  const ::google::protobuf::RepeatedPtrField< ::Services::MutationResult >&
      mutation_results() const;

  // @@protoc_insertion_point(class_scope:Services.CommitResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::Services::MutationResult > mutation_results_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_services_2fdatabase_5fservice_2eproto();
  friend void protobuf_AssignDesc_services_2fdatabase_5fservice_2eproto();
  friend void protobuf_ShutdownFile_services_2fdatabase_5fservice_2eproto();

  void InitAsDefaultInstance();
  static CommitResponse* default_instance_;
};
// -------------------------------------------------------------------

class MutationResult : public ::google::protobuf::Message {
 public:
  MutationResult();
  virtual ~MutationResult();

  MutationResult(const MutationResult& from);

  inline MutationResult& operator=(const MutationResult& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MutationResult& default_instance();

  void Swap(MutationResult* other);

  // implements Message ----------------------------------------------

  inline MutationResult* New() const { return New(NULL); }

  MutationResult* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MutationResult& from);
  void MergeFrom(const MutationResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MutationResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Services.Entity entity = 1;
  bool has_entity() const;
  void clear_entity();
  static const int kEntityFieldNumber = 1;
  const ::Services::Entity& entity() const;
  ::Services::Entity* mutable_entity();
  ::Services::Entity* release_entity();
  void set_allocated_entity(::Services::Entity* entity);

  // optional string error = 2;
  void clear_error();
  static const int kErrorFieldNumber = 2;
  const ::std::string& error() const;
  void set_error(const ::std::string& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  ::std::string* mutable_error();
  ::std::string* release_error();
  void set_allocated_error(::std::string* error);

  // @@protoc_insertion_point(class_scope:Services.MutationResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::Services::Entity* entity_;
  ::google::protobuf::internal::ArenaStringPtr error_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_services_2fdatabase_5fservice_2eproto();
  friend void protobuf_AssignDesc_services_2fdatabase_5fservice_2eproto();
  friend void protobuf_ShutdownFile_services_2fdatabase_5fservice_2eproto();

  void InitAsDefaultInstance();
  static MutationResult* default_instance_;
};
// -------------------------------------------------------------------

class Mutation : public ::google::protobuf::Message {
 public:
  Mutation();
  virtual ~Mutation();

  Mutation(const Mutation& from);

  inline Mutation& operator=(const Mutation& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Mutation& default_instance();

  enum OperationCase {
    kInsert = 1,
    kUpdate = 2,
    kDelete = 3,
    OPERATION_NOT_SET = 0,
  };

  void Swap(Mutation* other);

  // implements Message ----------------------------------------------

  inline Mutation* New() const { return New(NULL); }

  Mutation* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Mutation& from);
  void MergeFrom(const Mutation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Mutation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Services.Entity insert = 1;
  bool has_insert() const;
  void clear_insert();
  static const int kInsertFieldNumber = 1;
  const ::Services::Entity& insert() const;
  ::Services::Entity* mutable_insert();
  ::Services::Entity* release_insert();
  void set_allocated_insert(::Services::Entity* insert);

  // optional .Services.Entity update = 2;
  bool has_update() const;
  void clear_update();
  static const int kUpdateFieldNumber = 2;
  const ::Services::Entity& update() const;
  ::Services::Entity* mutable_update();
  ::Services::Entity* release_update();
  void set_allocated_update(::Services::Entity* update);

  // optional .Services.Entity delete = 3;
  bool has_delete_() const;
  void clear_delete_();
  static const int kDeleteFieldNumber = 3;
  const ::Services::Entity& delete_() const;
  ::Services::Entity* mutable_delete_();
  ::Services::Entity* release_delete_();
  void set_allocated_delete_(::Services::Entity* delete_);

  OperationCase operation_case() const;
  // @@protoc_insertion_point(class_scope:Services.Mutation)
 private:
  inline void set_has_insert();
  inline void set_has_update();
  inline void set_has_delete_();

  inline bool has_operation() const;
  void clear_operation();
  inline void clear_has_operation();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  union OperationUnion {
    OperationUnion() {}
    ::Services::Entity* insert_;
    ::Services::Entity* update_;
    ::Services::Entity* delete__;
  } operation_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_services_2fdatabase_5fservice_2eproto();
  friend void protobuf_AssignDesc_services_2fdatabase_5fservice_2eproto();
  friend void protobuf_ShutdownFile_services_2fdatabase_5fservice_2eproto();

  void InitAsDefaultInstance();
  static Mutation* default_instance_;
};
// -------------------------------------------------------------------

class Entity : public ::google::protobuf::Message {
 public:
  Entity();
  virtual ~Entity();

  Entity(const Entity& from);

  inline Entity& operator=(const Entity& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Entity& default_instance();

  enum ValueTypeCase {
    kCard = 1,
    kPerson = 2,
    kVisitRecord = 3,
    kLocation = 4,
    kPhoto = 5,
    VALUE_TYPE_NOT_SET = 0,
  };

  void Swap(Entity* other);

  // implements Message ----------------------------------------------

  inline Entity* New() const { return New(NULL); }

  Entity* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Entity& from);
  void MergeFrom(const Entity& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Entity* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .DataTypes.Card card = 1;
  bool has_card() const;
  void clear_card();
  static const int kCardFieldNumber = 1;
  const ::DataTypes::Card& card() const;
  ::DataTypes::Card* mutable_card();
  ::DataTypes::Card* release_card();
  void set_allocated_card(::DataTypes::Card* card);

  // optional .DataTypes.Person person = 2;
  bool has_person() const;
  void clear_person();
  static const int kPersonFieldNumber = 2;
  const ::DataTypes::Person& person() const;
  ::DataTypes::Person* mutable_person();
  ::DataTypes::Person* release_person();
  void set_allocated_person(::DataTypes::Person* person);

  // optional .DataTypes.VisitRecord visit_record = 3;
  bool has_visit_record() const;
  void clear_visit_record();
  static const int kVisitRecordFieldNumber = 3;
  const ::DataTypes::VisitRecord& visit_record() const;
  ::DataTypes::VisitRecord* mutable_visit_record();
  ::DataTypes::VisitRecord* release_visit_record();
  void set_allocated_visit_record(::DataTypes::VisitRecord* visit_record);

  // optional .DataTypes.Location location = 4;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 4;
  const ::DataTypes::Location& location() const;
  ::DataTypes::Location* mutable_location();
  ::DataTypes::Location* release_location();
  void set_allocated_location(::DataTypes::Location* location);

  // optional .DataTypes.Photo Photo = 5;
  bool has_photo() const;
  void clear_photo();
  static const int kPhotoFieldNumber = 5;
  const ::DataTypes::Photo& photo() const;
  ::DataTypes::Photo* mutable_photo();
  ::DataTypes::Photo* release_photo();
  void set_allocated_photo(::DataTypes::Photo* photo);

  ValueTypeCase value_type_case() const;
  // @@protoc_insertion_point(class_scope:Services.Entity)
 private:
  inline void set_has_card();
  inline void set_has_person();
  inline void set_has_visit_record();
  inline void set_has_location();
  inline void set_has_photo();

  inline bool has_value_type() const;
  void clear_value_type();
  inline void clear_has_value_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  union ValueTypeUnion {
    ValueTypeUnion() {}
    ::DataTypes::Card* card_;
    ::DataTypes::Person* person_;
    ::DataTypes::VisitRecord* visit_record_;
    ::DataTypes::Location* location_;
    ::DataTypes::Photo* photo_;
  } value_type_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_services_2fdatabase_5fservice_2eproto();
  friend void protobuf_AssignDesc_services_2fdatabase_5fservice_2eproto();
  friend void protobuf_ShutdownFile_services_2fdatabase_5fservice_2eproto();

  void InitAsDefaultInstance();
  static Entity* default_instance_;
};
// -------------------------------------------------------------------

class Entities : public ::google::protobuf::Message {
 public:
  Entities();
  virtual ~Entities();

  Entities(const Entities& from);

  inline Entities& operator=(const Entities& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Entities& default_instance();

  void Swap(Entities* other);

  // implements Message ----------------------------------------------

  inline Entities* New() const { return New(NULL); }

  Entities* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Entities& from);
  void MergeFrom(const Entities& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Entities* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Services.Entity items = 1;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 1;
  const ::Services::Entity& items(int index) const;
  ::Services::Entity* mutable_items(int index);
  ::Services::Entity* add_items();
  ::google::protobuf::RepeatedPtrField< ::Services::Entity >*
      mutable_items();
  const ::google::protobuf::RepeatedPtrField< ::Services::Entity >&
      items() const;

  // @@protoc_insertion_point(class_scope:Services.Entities)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::Services::Entity > items_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_services_2fdatabase_5fservice_2eproto();
  friend void protobuf_AssignDesc_services_2fdatabase_5fservice_2eproto();
  friend void protobuf_ShutdownFile_services_2fdatabase_5fservice_2eproto();

  void InitAsDefaultInstance();
  static Entities* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// GetResponse

// optional .Services.Entities items = 1;
inline bool GetResponse::has_items() const {
  return !_is_default_instance_ && items_ != NULL;
}
inline void GetResponse::clear_items() {
  if (GetArenaNoVirtual() == NULL && items_ != NULL) delete items_;
  items_ = NULL;
}
inline const ::Services::Entities& GetResponse::items() const {
  // @@protoc_insertion_point(field_get:Services.GetResponse.items)
  return items_ != NULL ? *items_ : *default_instance_->items_;
}
inline ::Services::Entities* GetResponse::mutable_items() {
  
  if (items_ == NULL) {
    items_ = new ::Services::Entities;
  }
  // @@protoc_insertion_point(field_mutable:Services.GetResponse.items)
  return items_;
}
inline ::Services::Entities* GetResponse::release_items() {
  // @@protoc_insertion_point(field_release:Services.GetResponse.items)
  
  ::Services::Entities* temp = items_;
  items_ = NULL;
  return temp;
}
inline void GetResponse::set_allocated_items(::Services::Entities* items) {
  delete items_;
  items_ = items;
  if (items) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Services.GetResponse.items)
}

// optional int64 count = 2;
inline void GetResponse::clear_count() {
  count_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 GetResponse::count() const {
  // @@protoc_insertion_point(field_get:Services.GetResponse.count)
  return count_;
}
inline void GetResponse::set_count(::google::protobuf::int64 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:Services.GetResponse.count)
}

// -------------------------------------------------------------------

// GetRequest

// optional .DataTypes.GetPersonRequest person_request = 1;
inline bool GetRequest::has_person_request() const {
  return request_type_case() == kPersonRequest;
}
inline void GetRequest::set_has_person_request() {
  _oneof_case_[0] = kPersonRequest;
}
inline void GetRequest::clear_person_request() {
  if (has_person_request()) {
    delete request_type_.person_request_;
    clear_has_request_type();
  }
}
inline  const ::DataTypes::GetPersonRequest& GetRequest::person_request() const {
  // @@protoc_insertion_point(field_get:Services.GetRequest.person_request)
  return has_person_request()
      ? *request_type_.person_request_
      : ::DataTypes::GetPersonRequest::default_instance();
}
inline ::DataTypes::GetPersonRequest* GetRequest::mutable_person_request() {
  if (!has_person_request()) {
    clear_request_type();
    set_has_person_request();
    request_type_.person_request_ = new ::DataTypes::GetPersonRequest;
  }
  // @@protoc_insertion_point(field_mutable:Services.GetRequest.person_request)
  return request_type_.person_request_;
}
inline ::DataTypes::GetPersonRequest* GetRequest::release_person_request() {
  // @@protoc_insertion_point(field_release:Services.GetRequest.person_request)
  if (has_person_request()) {
    clear_has_request_type();
    ::DataTypes::GetPersonRequest* temp = request_type_.person_request_;
    request_type_.person_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void GetRequest::set_allocated_person_request(::DataTypes::GetPersonRequest* person_request) {
  clear_request_type();
  if (person_request) {
    set_has_person_request();
    request_type_.person_request_ = person_request;
  }
  // @@protoc_insertion_point(field_set_allocated:Services.GetRequest.person_request)
}

// optional .DataTypes.GetCardRequest card_request = 2;
inline bool GetRequest::has_card_request() const {
  return request_type_case() == kCardRequest;
}
inline void GetRequest::set_has_card_request() {
  _oneof_case_[0] = kCardRequest;
}
inline void GetRequest::clear_card_request() {
  if (has_card_request()) {
    delete request_type_.card_request_;
    clear_has_request_type();
  }
}
inline  const ::DataTypes::GetCardRequest& GetRequest::card_request() const {
  // @@protoc_insertion_point(field_get:Services.GetRequest.card_request)
  return has_card_request()
      ? *request_type_.card_request_
      : ::DataTypes::GetCardRequest::default_instance();
}
inline ::DataTypes::GetCardRequest* GetRequest::mutable_card_request() {
  if (!has_card_request()) {
    clear_request_type();
    set_has_card_request();
    request_type_.card_request_ = new ::DataTypes::GetCardRequest;
  }
  // @@protoc_insertion_point(field_mutable:Services.GetRequest.card_request)
  return request_type_.card_request_;
}
inline ::DataTypes::GetCardRequest* GetRequest::release_card_request() {
  // @@protoc_insertion_point(field_release:Services.GetRequest.card_request)
  if (has_card_request()) {
    clear_has_request_type();
    ::DataTypes::GetCardRequest* temp = request_type_.card_request_;
    request_type_.card_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void GetRequest::set_allocated_card_request(::DataTypes::GetCardRequest* card_request) {
  clear_request_type();
  if (card_request) {
    set_has_card_request();
    request_type_.card_request_ = card_request;
  }
  // @@protoc_insertion_point(field_set_allocated:Services.GetRequest.card_request)
}

// optional .DataTypes.GetLocationRequest location_request = 3;
inline bool GetRequest::has_location_request() const {
  return request_type_case() == kLocationRequest;
}
inline void GetRequest::set_has_location_request() {
  _oneof_case_[0] = kLocationRequest;
}
inline void GetRequest::clear_location_request() {
  if (has_location_request()) {
    delete request_type_.location_request_;
    clear_has_request_type();
  }
}
inline  const ::DataTypes::GetLocationRequest& GetRequest::location_request() const {
  // @@protoc_insertion_point(field_get:Services.GetRequest.location_request)
  return has_location_request()
      ? *request_type_.location_request_
      : ::DataTypes::GetLocationRequest::default_instance();
}
inline ::DataTypes::GetLocationRequest* GetRequest::mutable_location_request() {
  if (!has_location_request()) {
    clear_request_type();
    set_has_location_request();
    request_type_.location_request_ = new ::DataTypes::GetLocationRequest;
  }
  // @@protoc_insertion_point(field_mutable:Services.GetRequest.location_request)
  return request_type_.location_request_;
}
inline ::DataTypes::GetLocationRequest* GetRequest::release_location_request() {
  // @@protoc_insertion_point(field_release:Services.GetRequest.location_request)
  if (has_location_request()) {
    clear_has_request_type();
    ::DataTypes::GetLocationRequest* temp = request_type_.location_request_;
    request_type_.location_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void GetRequest::set_allocated_location_request(::DataTypes::GetLocationRequest* location_request) {
  clear_request_type();
  if (location_request) {
    set_has_location_request();
    request_type_.location_request_ = location_request;
  }
  // @@protoc_insertion_point(field_set_allocated:Services.GetRequest.location_request)
}

// optional .DataTypes.GetVisitRecordRequest visit_record_request = 4;
inline bool GetRequest::has_visit_record_request() const {
  return request_type_case() == kVisitRecordRequest;
}
inline void GetRequest::set_has_visit_record_request() {
  _oneof_case_[0] = kVisitRecordRequest;
}
inline void GetRequest::clear_visit_record_request() {
  if (has_visit_record_request()) {
    delete request_type_.visit_record_request_;
    clear_has_request_type();
  }
}
inline  const ::DataTypes::GetVisitRecordRequest& GetRequest::visit_record_request() const {
  // @@protoc_insertion_point(field_get:Services.GetRequest.visit_record_request)
  return has_visit_record_request()
      ? *request_type_.visit_record_request_
      : ::DataTypes::GetVisitRecordRequest::default_instance();
}
inline ::DataTypes::GetVisitRecordRequest* GetRequest::mutable_visit_record_request() {
  if (!has_visit_record_request()) {
    clear_request_type();
    set_has_visit_record_request();
    request_type_.visit_record_request_ = new ::DataTypes::GetVisitRecordRequest;
  }
  // @@protoc_insertion_point(field_mutable:Services.GetRequest.visit_record_request)
  return request_type_.visit_record_request_;
}
inline ::DataTypes::GetVisitRecordRequest* GetRequest::release_visit_record_request() {
  // @@protoc_insertion_point(field_release:Services.GetRequest.visit_record_request)
  if (has_visit_record_request()) {
    clear_has_request_type();
    ::DataTypes::GetVisitRecordRequest* temp = request_type_.visit_record_request_;
    request_type_.visit_record_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void GetRequest::set_allocated_visit_record_request(::DataTypes::GetVisitRecordRequest* visit_record_request) {
  clear_request_type();
  if (visit_record_request) {
    set_has_visit_record_request();
    request_type_.visit_record_request_ = visit_record_request;
  }
  // @@protoc_insertion_point(field_set_allocated:Services.GetRequest.visit_record_request)
}

inline bool GetRequest::has_request_type() const {
  return request_type_case() != REQUEST_TYPE_NOT_SET;
}
inline void GetRequest::clear_has_request_type() {
  _oneof_case_[0] = REQUEST_TYPE_NOT_SET;
}
inline GetRequest::RequestTypeCase GetRequest::request_type_case() const {
  return GetRequest::RequestTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CommitRequest

// repeated .Services.Mutation mutations = 1;
inline int CommitRequest::mutations_size() const {
  return mutations_.size();
}
inline void CommitRequest::clear_mutations() {
  mutations_.Clear();
}
inline const ::Services::Mutation& CommitRequest::mutations(int index) const {
  // @@protoc_insertion_point(field_get:Services.CommitRequest.mutations)
  return mutations_.Get(index);
}
inline ::Services::Mutation* CommitRequest::mutable_mutations(int index) {
  // @@protoc_insertion_point(field_mutable:Services.CommitRequest.mutations)
  return mutations_.Mutable(index);
}
inline ::Services::Mutation* CommitRequest::add_mutations() {
  // @@protoc_insertion_point(field_add:Services.CommitRequest.mutations)
  return mutations_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Services::Mutation >*
CommitRequest::mutable_mutations() {
  // @@protoc_insertion_point(field_mutable_list:Services.CommitRequest.mutations)
  return &mutations_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Services::Mutation >&
CommitRequest::mutations() const {
  // @@protoc_insertion_point(field_list:Services.CommitRequest.mutations)
  return mutations_;
}

// -------------------------------------------------------------------

// CommitResponse

// repeated .Services.MutationResult mutation_results = 1;
inline int CommitResponse::mutation_results_size() const {
  return mutation_results_.size();
}
inline void CommitResponse::clear_mutation_results() {
  mutation_results_.Clear();
}
inline const ::Services::MutationResult& CommitResponse::mutation_results(int index) const {
  // @@protoc_insertion_point(field_get:Services.CommitResponse.mutation_results)
  return mutation_results_.Get(index);
}
inline ::Services::MutationResult* CommitResponse::mutable_mutation_results(int index) {
  // @@protoc_insertion_point(field_mutable:Services.CommitResponse.mutation_results)
  return mutation_results_.Mutable(index);
}
inline ::Services::MutationResult* CommitResponse::add_mutation_results() {
  // @@protoc_insertion_point(field_add:Services.CommitResponse.mutation_results)
  return mutation_results_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Services::MutationResult >*
CommitResponse::mutable_mutation_results() {
  // @@protoc_insertion_point(field_mutable_list:Services.CommitResponse.mutation_results)
  return &mutation_results_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Services::MutationResult >&
CommitResponse::mutation_results() const {
  // @@protoc_insertion_point(field_list:Services.CommitResponse.mutation_results)
  return mutation_results_;
}

// -------------------------------------------------------------------

// MutationResult

// optional .Services.Entity entity = 1;
inline bool MutationResult::has_entity() const {
  return !_is_default_instance_ && entity_ != NULL;
}
inline void MutationResult::clear_entity() {
  if (GetArenaNoVirtual() == NULL && entity_ != NULL) delete entity_;
  entity_ = NULL;
}
inline const ::Services::Entity& MutationResult::entity() const {
  // @@protoc_insertion_point(field_get:Services.MutationResult.entity)
  return entity_ != NULL ? *entity_ : *default_instance_->entity_;
}
inline ::Services::Entity* MutationResult::mutable_entity() {
  
  if (entity_ == NULL) {
    entity_ = new ::Services::Entity;
  }
  // @@protoc_insertion_point(field_mutable:Services.MutationResult.entity)
  return entity_;
}
inline ::Services::Entity* MutationResult::release_entity() {
  // @@protoc_insertion_point(field_release:Services.MutationResult.entity)
  
  ::Services::Entity* temp = entity_;
  entity_ = NULL;
  return temp;
}
inline void MutationResult::set_allocated_entity(::Services::Entity* entity) {
  delete entity_;
  entity_ = entity;
  if (entity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Services.MutationResult.entity)
}

// optional string error = 2;
inline void MutationResult::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MutationResult::error() const {
  // @@protoc_insertion_point(field_get:Services.MutationResult.error)
  return error_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MutationResult::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Services.MutationResult.error)
}
inline void MutationResult::set_error(const char* value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Services.MutationResult.error)
}
inline void MutationResult::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Services.MutationResult.error)
}
inline ::std::string* MutationResult::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:Services.MutationResult.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MutationResult::release_error() {
  // @@protoc_insertion_point(field_release:Services.MutationResult.error)
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MutationResult::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:Services.MutationResult.error)
}

// -------------------------------------------------------------------

// Mutation

// optional .Services.Entity insert = 1;
inline bool Mutation::has_insert() const {
  return operation_case() == kInsert;
}
inline void Mutation::set_has_insert() {
  _oneof_case_[0] = kInsert;
}
inline void Mutation::clear_insert() {
  if (has_insert()) {
    delete operation_.insert_;
    clear_has_operation();
  }
}
inline  const ::Services::Entity& Mutation::insert() const {
  // @@protoc_insertion_point(field_get:Services.Mutation.insert)
  return has_insert()
      ? *operation_.insert_
      : ::Services::Entity::default_instance();
}
inline ::Services::Entity* Mutation::mutable_insert() {
  if (!has_insert()) {
    clear_operation();
    set_has_insert();
    operation_.insert_ = new ::Services::Entity;
  }
  // @@protoc_insertion_point(field_mutable:Services.Mutation.insert)
  return operation_.insert_;
}
inline ::Services::Entity* Mutation::release_insert() {
  // @@protoc_insertion_point(field_release:Services.Mutation.insert)
  if (has_insert()) {
    clear_has_operation();
    ::Services::Entity* temp = operation_.insert_;
    operation_.insert_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Mutation::set_allocated_insert(::Services::Entity* insert) {
  clear_operation();
  if (insert) {
    set_has_insert();
    operation_.insert_ = insert;
  }
  // @@protoc_insertion_point(field_set_allocated:Services.Mutation.insert)
}

// optional .Services.Entity update = 2;
inline bool Mutation::has_update() const {
  return operation_case() == kUpdate;
}
inline void Mutation::set_has_update() {
  _oneof_case_[0] = kUpdate;
}
inline void Mutation::clear_update() {
  if (has_update()) {
    delete operation_.update_;
    clear_has_operation();
  }
}
inline  const ::Services::Entity& Mutation::update() const {
  // @@protoc_insertion_point(field_get:Services.Mutation.update)
  return has_update()
      ? *operation_.update_
      : ::Services::Entity::default_instance();
}
inline ::Services::Entity* Mutation::mutable_update() {
  if (!has_update()) {
    clear_operation();
    set_has_update();
    operation_.update_ = new ::Services::Entity;
  }
  // @@protoc_insertion_point(field_mutable:Services.Mutation.update)
  return operation_.update_;
}
inline ::Services::Entity* Mutation::release_update() {
  // @@protoc_insertion_point(field_release:Services.Mutation.update)
  if (has_update()) {
    clear_has_operation();
    ::Services::Entity* temp = operation_.update_;
    operation_.update_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Mutation::set_allocated_update(::Services::Entity* update) {
  clear_operation();
  if (update) {
    set_has_update();
    operation_.update_ = update;
  }
  // @@protoc_insertion_point(field_set_allocated:Services.Mutation.update)
}

// optional .Services.Entity delete = 3;
inline bool Mutation::has_delete_() const {
  return operation_case() == kDelete;
}
inline void Mutation::set_has_delete_() {
  _oneof_case_[0] = kDelete;
}
inline void Mutation::clear_delete_() {
  if (has_delete_()) {
    delete operation_.delete__;
    clear_has_operation();
  }
}
inline  const ::Services::Entity& Mutation::delete_() const {
  // @@protoc_insertion_point(field_get:Services.Mutation.delete)
  return has_delete_()
      ? *operation_.delete__
      : ::Services::Entity::default_instance();
}
inline ::Services::Entity* Mutation::mutable_delete_() {
  if (!has_delete_()) {
    clear_operation();
    set_has_delete_();
    operation_.delete__ = new ::Services::Entity;
  }
  // @@protoc_insertion_point(field_mutable:Services.Mutation.delete)
  return operation_.delete__;
}
inline ::Services::Entity* Mutation::release_delete_() {
  // @@protoc_insertion_point(field_release:Services.Mutation.delete)
  if (has_delete_()) {
    clear_has_operation();
    ::Services::Entity* temp = operation_.delete__;
    operation_.delete__ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Mutation::set_allocated_delete_(::Services::Entity* delete_) {
  clear_operation();
  if (delete_) {
    set_has_delete_();
    operation_.delete__ = delete_;
  }
  // @@protoc_insertion_point(field_set_allocated:Services.Mutation.delete)
}

inline bool Mutation::has_operation() const {
  return operation_case() != OPERATION_NOT_SET;
}
inline void Mutation::clear_has_operation() {
  _oneof_case_[0] = OPERATION_NOT_SET;
}
inline Mutation::OperationCase Mutation::operation_case() const {
  return Mutation::OperationCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Entity

// optional .DataTypes.Card card = 1;
inline bool Entity::has_card() const {
  return value_type_case() == kCard;
}
inline void Entity::set_has_card() {
  _oneof_case_[0] = kCard;
}
inline void Entity::clear_card() {
  if (has_card()) {
    delete value_type_.card_;
    clear_has_value_type();
  }
}
inline  const ::DataTypes::Card& Entity::card() const {
  // @@protoc_insertion_point(field_get:Services.Entity.card)
  return has_card()
      ? *value_type_.card_
      : ::DataTypes::Card::default_instance();
}
inline ::DataTypes::Card* Entity::mutable_card() {
  if (!has_card()) {
    clear_value_type();
    set_has_card();
    value_type_.card_ = new ::DataTypes::Card;
  }
  // @@protoc_insertion_point(field_mutable:Services.Entity.card)
  return value_type_.card_;
}
inline ::DataTypes::Card* Entity::release_card() {
  // @@protoc_insertion_point(field_release:Services.Entity.card)
  if (has_card()) {
    clear_has_value_type();
    ::DataTypes::Card* temp = value_type_.card_;
    value_type_.card_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Entity::set_allocated_card(::DataTypes::Card* card) {
  clear_value_type();
  if (card) {
    set_has_card();
    value_type_.card_ = card;
  }
  // @@protoc_insertion_point(field_set_allocated:Services.Entity.card)
}

// optional .DataTypes.Person person = 2;
inline bool Entity::has_person() const {
  return value_type_case() == kPerson;
}
inline void Entity::set_has_person() {
  _oneof_case_[0] = kPerson;
}
inline void Entity::clear_person() {
  if (has_person()) {
    delete value_type_.person_;
    clear_has_value_type();
  }
}
inline  const ::DataTypes::Person& Entity::person() const {
  // @@protoc_insertion_point(field_get:Services.Entity.person)
  return has_person()
      ? *value_type_.person_
      : ::DataTypes::Person::default_instance();
}
inline ::DataTypes::Person* Entity::mutable_person() {
  if (!has_person()) {
    clear_value_type();
    set_has_person();
    value_type_.person_ = new ::DataTypes::Person;
  }
  // @@protoc_insertion_point(field_mutable:Services.Entity.person)
  return value_type_.person_;
}
inline ::DataTypes::Person* Entity::release_person() {
  // @@protoc_insertion_point(field_release:Services.Entity.person)
  if (has_person()) {
    clear_has_value_type();
    ::DataTypes::Person* temp = value_type_.person_;
    value_type_.person_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Entity::set_allocated_person(::DataTypes::Person* person) {
  clear_value_type();
  if (person) {
    set_has_person();
    value_type_.person_ = person;
  }
  // @@protoc_insertion_point(field_set_allocated:Services.Entity.person)
}

// optional .DataTypes.VisitRecord visit_record = 3;
inline bool Entity::has_visit_record() const {
  return value_type_case() == kVisitRecord;
}
inline void Entity::set_has_visit_record() {
  _oneof_case_[0] = kVisitRecord;
}
inline void Entity::clear_visit_record() {
  if (has_visit_record()) {
    delete value_type_.visit_record_;
    clear_has_value_type();
  }
}
inline  const ::DataTypes::VisitRecord& Entity::visit_record() const {
  // @@protoc_insertion_point(field_get:Services.Entity.visit_record)
  return has_visit_record()
      ? *value_type_.visit_record_
      : ::DataTypes::VisitRecord::default_instance();
}
inline ::DataTypes::VisitRecord* Entity::mutable_visit_record() {
  if (!has_visit_record()) {
    clear_value_type();
    set_has_visit_record();
    value_type_.visit_record_ = new ::DataTypes::VisitRecord;
  }
  // @@protoc_insertion_point(field_mutable:Services.Entity.visit_record)
  return value_type_.visit_record_;
}
inline ::DataTypes::VisitRecord* Entity::release_visit_record() {
  // @@protoc_insertion_point(field_release:Services.Entity.visit_record)
  if (has_visit_record()) {
    clear_has_value_type();
    ::DataTypes::VisitRecord* temp = value_type_.visit_record_;
    value_type_.visit_record_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Entity::set_allocated_visit_record(::DataTypes::VisitRecord* visit_record) {
  clear_value_type();
  if (visit_record) {
    set_has_visit_record();
    value_type_.visit_record_ = visit_record;
  }
  // @@protoc_insertion_point(field_set_allocated:Services.Entity.visit_record)
}

// optional .DataTypes.Location location = 4;
inline bool Entity::has_location() const {
  return value_type_case() == kLocation;
}
inline void Entity::set_has_location() {
  _oneof_case_[0] = kLocation;
}
inline void Entity::clear_location() {
  if (has_location()) {
    delete value_type_.location_;
    clear_has_value_type();
  }
}
inline  const ::DataTypes::Location& Entity::location() const {
  // @@protoc_insertion_point(field_get:Services.Entity.location)
  return has_location()
      ? *value_type_.location_
      : ::DataTypes::Location::default_instance();
}
inline ::DataTypes::Location* Entity::mutable_location() {
  if (!has_location()) {
    clear_value_type();
    set_has_location();
    value_type_.location_ = new ::DataTypes::Location;
  }
  // @@protoc_insertion_point(field_mutable:Services.Entity.location)
  return value_type_.location_;
}
inline ::DataTypes::Location* Entity::release_location() {
  // @@protoc_insertion_point(field_release:Services.Entity.location)
  if (has_location()) {
    clear_has_value_type();
    ::DataTypes::Location* temp = value_type_.location_;
    value_type_.location_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Entity::set_allocated_location(::DataTypes::Location* location) {
  clear_value_type();
  if (location) {
    set_has_location();
    value_type_.location_ = location;
  }
  // @@protoc_insertion_point(field_set_allocated:Services.Entity.location)
}

// optional .DataTypes.Photo Photo = 5;
inline bool Entity::has_photo() const {
  return value_type_case() == kPhoto;
}
inline void Entity::set_has_photo() {
  _oneof_case_[0] = kPhoto;
}
inline void Entity::clear_photo() {
  if (has_photo()) {
    delete value_type_.photo_;
    clear_has_value_type();
  }
}
inline  const ::DataTypes::Photo& Entity::photo() const {
  // @@protoc_insertion_point(field_get:Services.Entity.Photo)
  return has_photo()
      ? *value_type_.photo_
      : ::DataTypes::Photo::default_instance();
}
inline ::DataTypes::Photo* Entity::mutable_photo() {
  if (!has_photo()) {
    clear_value_type();
    set_has_photo();
    value_type_.photo_ = new ::DataTypes::Photo;
  }
  // @@protoc_insertion_point(field_mutable:Services.Entity.Photo)
  return value_type_.photo_;
}
inline ::DataTypes::Photo* Entity::release_photo() {
  // @@protoc_insertion_point(field_release:Services.Entity.Photo)
  if (has_photo()) {
    clear_has_value_type();
    ::DataTypes::Photo* temp = value_type_.photo_;
    value_type_.photo_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Entity::set_allocated_photo(::DataTypes::Photo* photo) {
  clear_value_type();
  if (photo) {
    set_has_photo();
    value_type_.photo_ = photo;
  }
  // @@protoc_insertion_point(field_set_allocated:Services.Entity.Photo)
}

inline bool Entity::has_value_type() const {
  return value_type_case() != VALUE_TYPE_NOT_SET;
}
inline void Entity::clear_has_value_type() {
  _oneof_case_[0] = VALUE_TYPE_NOT_SET;
}
inline Entity::ValueTypeCase Entity::value_type_case() const {
  return Entity::ValueTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Entities

// repeated .Services.Entity items = 1;
inline int Entities::items_size() const {
  return items_.size();
}
inline void Entities::clear_items() {
  items_.Clear();
}
inline const ::Services::Entity& Entities::items(int index) const {
  // @@protoc_insertion_point(field_get:Services.Entities.items)
  return items_.Get(index);
}
inline ::Services::Entity* Entities::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:Services.Entities.items)
  return items_.Mutable(index);
}
inline ::Services::Entity* Entities::add_items() {
  // @@protoc_insertion_point(field_add:Services.Entities.items)
  return items_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Services::Entity >*
Entities::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:Services.Entities.items)
  return &items_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Services::Entity >&
Entities::items() const {
  // @@protoc_insertion_point(field_list:Services.Entities.items)
  return items_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Services

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_services_2fdatabase_5fservice_2eproto__INCLUDED
