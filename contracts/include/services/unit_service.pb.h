// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: services/unit_service.proto

#ifndef PROTOBUF_services_2funit_5fservice_2eproto__INCLUDED
#define PROTOBUF_services_2funit_5fservice_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
#include "datatypes/location.pb.h"
#include "datatypes/biometrics.pb.h"
#include "datatypes/devices.pb.h"
// @@protoc_insertion_point(includes)

namespace Services {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_services_2funit_5fservice_2eproto();
void protobuf_AssignDesc_services_2funit_5fservice_2eproto();
void protobuf_ShutdownFile_services_2funit_5fservice_2eproto();

class FrameBytes;

// ===================================================================

class FrameBytes : public ::google::protobuf::Message {
 public:
  FrameBytes();
  virtual ~FrameBytes();

  FrameBytes(const FrameBytes& from);

  inline FrameBytes& operator=(const FrameBytes& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FrameBytes& default_instance();

  void Swap(FrameBytes* other);

  // implements Message ----------------------------------------------

  inline FrameBytes* New() const { return New(NULL); }

  FrameBytes* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FrameBytes& from);
  void MergeFrom(const FrameBytes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FrameBytes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes frameData = 1;
  void clear_framedata();
  static const int kFrameDataFieldNumber = 1;
  const ::std::string& framedata() const;
  void set_framedata(const ::std::string& value);
  void set_framedata(const char* value);
  void set_framedata(const void* value, size_t size);
  ::std::string* mutable_framedata();
  ::std::string* release_framedata();
  void set_allocated_framedata(::std::string* framedata);

  // optional .DataTypes.Faces faces = 2;
  bool has_faces() const;
  void clear_faces();
  static const int kFacesFieldNumber = 2;
  const ::DataTypes::Faces& faces() const;
  ::DataTypes::Faces* mutable_faces();
  ::DataTypes::Faces* release_faces();
  void set_allocated_faces(::DataTypes::Faces* faces);

  // optional .DataTypes.Matches matches = 3;
  bool has_matches() const;
  void clear_matches();
  static const int kMatchesFieldNumber = 3;
  const ::DataTypes::Matches& matches() const;
  ::DataTypes::Matches* mutable_matches();
  ::DataTypes::Matches* release_matches();
  void set_allocated_matches(::DataTypes::Matches* matches);

  // @@protoc_insertion_point(class_scope:Services.FrameBytes)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr framedata_;
  ::DataTypes::Faces* faces_;
  ::DataTypes::Matches* matches_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_services_2funit_5fservice_2eproto();
  friend void protobuf_AssignDesc_services_2funit_5fservice_2eproto();
  friend void protobuf_ShutdownFile_services_2funit_5fservice_2eproto();

  void InitAsDefaultInstance();
  static FrameBytes* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// FrameBytes

// optional bytes frameData = 1;
inline void FrameBytes::clear_framedata() {
  framedata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FrameBytes::framedata() const {
  // @@protoc_insertion_point(field_get:Services.FrameBytes.frameData)
  return framedata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FrameBytes::set_framedata(const ::std::string& value) {
  
  framedata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Services.FrameBytes.frameData)
}
inline void FrameBytes::set_framedata(const char* value) {
  
  framedata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Services.FrameBytes.frameData)
}
inline void FrameBytes::set_framedata(const void* value, size_t size) {
  
  framedata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Services.FrameBytes.frameData)
}
inline ::std::string* FrameBytes::mutable_framedata() {
  
  // @@protoc_insertion_point(field_mutable:Services.FrameBytes.frameData)
  return framedata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FrameBytes::release_framedata() {
  // @@protoc_insertion_point(field_release:Services.FrameBytes.frameData)
  
  return framedata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FrameBytes::set_allocated_framedata(::std::string* framedata) {
  if (framedata != NULL) {
    
  } else {
    
  }
  framedata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), framedata);
  // @@protoc_insertion_point(field_set_allocated:Services.FrameBytes.frameData)
}

// optional .DataTypes.Faces faces = 2;
inline bool FrameBytes::has_faces() const {
  return !_is_default_instance_ && faces_ != NULL;
}
inline void FrameBytes::clear_faces() {
  if (GetArenaNoVirtual() == NULL && faces_ != NULL) delete faces_;
  faces_ = NULL;
}
inline const ::DataTypes::Faces& FrameBytes::faces() const {
  // @@protoc_insertion_point(field_get:Services.FrameBytes.faces)
  return faces_ != NULL ? *faces_ : *default_instance_->faces_;
}
inline ::DataTypes::Faces* FrameBytes::mutable_faces() {
  
  if (faces_ == NULL) {
    faces_ = new ::DataTypes::Faces;
  }
  // @@protoc_insertion_point(field_mutable:Services.FrameBytes.faces)
  return faces_;
}
inline ::DataTypes::Faces* FrameBytes::release_faces() {
  // @@protoc_insertion_point(field_release:Services.FrameBytes.faces)
  
  ::DataTypes::Faces* temp = faces_;
  faces_ = NULL;
  return temp;
}
inline void FrameBytes::set_allocated_faces(::DataTypes::Faces* faces) {
  delete faces_;
  faces_ = faces;
  if (faces) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Services.FrameBytes.faces)
}

// optional .DataTypes.Matches matches = 3;
inline bool FrameBytes::has_matches() const {
  return !_is_default_instance_ && matches_ != NULL;
}
inline void FrameBytes::clear_matches() {
  if (GetArenaNoVirtual() == NULL && matches_ != NULL) delete matches_;
  matches_ = NULL;
}
inline const ::DataTypes::Matches& FrameBytes::matches() const {
  // @@protoc_insertion_point(field_get:Services.FrameBytes.matches)
  return matches_ != NULL ? *matches_ : *default_instance_->matches_;
}
inline ::DataTypes::Matches* FrameBytes::mutable_matches() {
  
  if (matches_ == NULL) {
    matches_ = new ::DataTypes::Matches;
  }
  // @@protoc_insertion_point(field_mutable:Services.FrameBytes.matches)
  return matches_;
}
inline ::DataTypes::Matches* FrameBytes::release_matches() {
  // @@protoc_insertion_point(field_release:Services.FrameBytes.matches)
  
  ::DataTypes::Matches* temp = matches_;
  matches_ = NULL;
  return temp;
}
inline void FrameBytes::set_allocated_matches(::DataTypes::Matches* matches) {
  delete matches_;
  matches_ = matches;
  if (matches) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Services.FrameBytes.matches)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Services

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_services_2funit_5fservice_2eproto__INCLUDED
